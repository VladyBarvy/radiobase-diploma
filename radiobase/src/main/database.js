// const Database = require('better-sqlite3');
// const path = require('path');
// const { app } = require('electron');

// class ComponentsDatabase {
//   constructor() {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º userData –ø–∞–ø–∫—É Electron –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î
//     const userDataPath = app.getPath('userData');
//     this.dbPath = path.join(userDataPath, 'components.db');
    
//     // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//     const dbDir = path.dirname(this.dbPath);
//     require('fs').mkdirSync(dbDir, { recursive: true });
    
//     this.db = new Database(this.dbPath);
    
//     // –í–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
//     this.db.pragma('journal_mode = WAL');
//     this.db.pragma('foreign_keys = ON');
//     this.db.pragma('busy_timeout = 5000');
    
//     this.init();
//   }

//   init() {
//     try {
//       this.createTables();
//       this.insertInitialCategories();
//       this.migrateDatabase();
//       console.log('‚úÖ Database initialized at:', this.dbPath);
//     } catch (error) {
//       console.error('‚ùå Database initialization error:', error);
//       throw error;
//     }
//   }

//   createTables() {
//     // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
//     this.db.exec(`
//       CREATE TABLE IF NOT EXISTS categories (
//         id INTEGER PRIMARY KEY AUTOINCREMENT,
//         name TEXT NOT NULL UNIQUE,
//         created_at TEXT DEFAULT CURRENT_TIMESTAMP
//       )
//     `);

//     this.db.exec(`
//       CREATE TABLE IF NOT EXISTS components (
//         id INTEGER PRIMARY KEY AUTOINCREMENT,
//         category_id INTEGER NOT NULL,
//         name TEXT NOT NULL,
//         storage_cell TEXT,
//         datasheet_url TEXT,
//         quantity INTEGER DEFAULT 0,
//         updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
//         parameters TEXT DEFAULT '{}',
//         image_data TEXT,
//         description TEXT,
//         created_at TEXT DEFAULT CURRENT_TIMESTAMP,
//         FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
//       )
//     `);

//     // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_category ON components(category_id)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_name ON components(name)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_storage ON components(storage_cell)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_updated ON components(updated_at)');
//   }

//   insertInitialCategories() {
//     const categories = ["–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã", "–†–µ–∑–∏—Å—Ç–æ—Ä—ã", "–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã", "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã", "–î–∏–æ–¥—ã"];
    
//     const insertStmt = this.db.prepare('INSERT OR IGNORE INTO categories (name) VALUES (?)');
    
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//     const insertMany = this.db.transaction((cats) => {
//       for (const category of cats) {
//         insertStmt.run(category);
//       }
//     });

//     insertMany(categories);
//   }

//   migrateDatabase() {
//     try {
//       const columns = this.db.prepare("PRAGMA table_info(components)").all();
//       const columnNames = columns.map(col => col.name);
      
//       // –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
//       const migrations = [
//         { name: 'storage_cell', type: 'TEXT', default: 'NULL' },
//         { name: 'datasheet_url', type: 'TEXT', default: 'NULL' },
//         { name: 'quantity', type: 'INTEGER', default: '0' },
//         { name: 'updated_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' },
//         { name: 'parameters', type: 'TEXT', default: "'{}'" },
//         { name: 'image_data', type: 'TEXT', default: 'NULL' },
//         { name: 'description', type: 'TEXT', default: 'NULL' },
//         { name: 'created_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' }
//       ];

//       // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
//       const migrate = this.db.transaction(() => {
//         for (const migration of migrations) {
//           if (!columnNames.includes(migration.name)) {
//             this.db.exec(`ALTER TABLE components ADD COLUMN ${migration.name} ${migration.type} DEFAULT ${migration.default}`);
//             console.log(`‚úÖ Added column: ${migration.name}`);
//           }
//         }
//       });

//       migrate();
      
//     } catch (error) {
//       console.error('‚ùå Migration error:', error);
//     }
//   }

//   // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î =====

//   all(sql, params = []) {
//     try {
//       return this.db.prepare(sql).all(params);
//     } catch (error) {
//       console.error('‚ùå Query error (all):', error.message, sql, params);
//       return [];
//     }
//   }

//   get(sql, params = []) {
//     try {
//       return this.db.prepare(sql).get(params) || null;
//     } catch (error) {
//       console.error('‚ùå Query error (get):', error.message, sql, params);
//       return null;
//     }
//   }

//   run(sql, params = []) {
//     try {
//       const result = this.db.prepare(sql).run(params);
//       return {
//         success: true,
//         changes: result.changes,
//         lastInsertRowid: result.lastInsertRowid
//       };
//     } catch (error) {
//       console.error('‚ùå Query error (run):', error.message, sql, params);
//       return { 
//         success: false, 
//         changes: 0, 
//         lastInsertRowid: 0,
//         error: error.message 
//       };
//     }
//   }

//   // ===== API –ö–ê–¢–ï–ì–û–†–ò–ô =====

//   getCategories() {
//     return this.all("SELECT * FROM categories ORDER BY name");
//   }

//   addCategory(name) {
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
//     }

//     const result = this.run("INSERT INTO categories (name) VALUES (?)", [name.trim()]);
    
//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid };
//     }
    
//     return { 
//       success: false, 
//       error: result.error?.includes('UNIQUE') 
//         ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" 
//         : "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     };
//   }

//   updateCategory(id, name) {
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
//     }

//     const result = this.run("UPDATE categories SET name = ? WHERE id = ?", [name.trim(), id]);
    
//     if (result.success && result.changes > 0) {
//       return { success: true };
//     }
    
//     return { 
//       success: false, 
//       error: result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     };
//   }

//   deleteCategory(id) {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º CASCADE –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
//     const result = this.run("DELETE FROM categories WHERE id = ?", [id]);
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : null
//     };
//   }

//   // ===== API –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

//   getComponents(categoryId = null) {
//     if (categoryId) {
//       return this.all(
//         "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.category_id = ? ORDER BY c.name", 
//         [categoryId]
//       );
//     }
//     return this.all("SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id ORDER BY c.name");
//   }

//   getComponent(id) {
//     const component = this.get(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.id = ?
//     `, [id]);
    
//     console.log('üîç Raw component data:', component);
//     console.log('üîç Parameters type:', typeof component?.parameters);
//     console.log('üîç Parameters value:', component?.parameters);
    
//     if (component) {
//       // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
//       if (component.parameters && typeof component.parameters === 'string') {
//         try {
//           component.parameters = JSON.parse(component.parameters);
//           console.log('‚úÖ Successfully parsed parameters:', component.parameters);
//         } catch (error) {
//           console.error('‚ùå JSON parse error:', error);
//           component.parameters = {};
//         }
//       } else {
//         component.parameters = component.parameters || {};
//       }
//     }
    
//     return component;
//   }

//   addComponent(componentData) {
//     // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
//     if (!componentData.category_id || !componentData.name?.trim()) {
//       return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" };
//     }

//     const result = this.run(`
//       INSERT INTO components 
//       (category_id, name, storage_cell, datasheet_url, quantity, updated_at, parameters, image_data, description)
//       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
//     `, [
//       componentData.category_id,
//       componentData.name.trim(),
//       componentData.storage_cell?.trim() || null,
//       componentData.datasheet_url?.trim() || null,
//       Math.max(0, parseInt(componentData.quantity) || 0),
//       componentData.updated_at || new Date().toISOString(),
//       this.serializeParameters(componentData.parameters),
//       componentData.image_data || null,
//       componentData.description?.trim() || null
//     ]);

//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid };
//     }
    
//     return { success: false, error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞" };
//   }

//   updateComponent(componentData) {
//     if (!componentData.id) {
//       return { success: false, error: "ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" };
//     }
  
//     const result = this.run(`
//       UPDATE components 
//       SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, 
//           quantity = ?, updated_at = ?, parameters = ?, image_data = ?, description = ?
//       WHERE id = ?
//     `, [
//       componentData.category_id,
//       componentData.name,
//       componentData.storage_cell,
//       componentData.datasheet_url,
//       componentData.quantity,
//       new Date().toISOString(),
//       JSON.stringify(componentData.parameters),
//       componentData.image_data,
//       componentData.description,
//       componentData.id
//     ]);
  
//     return { 
//       success: result.success, 
//       changes: result.changes,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     };
//   }
  

//   deleteComponent(id) {
//     const result = this.run("DELETE FROM components WHERE id = ?", [id]);
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     };
//   }

//   // ===== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====

//   searchComponents(query) {
//     if (!query?.trim()) return [];
    
//     const searchTerm = `%${query.trim()}%`;
//     return this.all(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.name LIKE ? OR c.storage_cell LIKE ? OR cat.name LIKE ? OR c.description LIKE ?
//       ORDER BY c.name
//     `, [searchTerm, searchTerm, searchTerm, searchTerm]);
//   }

//   getComponentsByStorage(cell) {
//     if (!cell?.trim()) return [];
    
//     return this.all(
//       "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.storage_cell = ? ORDER BY c.name",
//       [cell.trim()]
//     );
//   }

//   // ===== –£–¢–ò–õ–ò–¢–´ =====

//   serializeParameters(parameters) {
//     if (!parameters) return '{}';
//     if (typeof parameters === 'string') {
//       try {
//         // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ JSON —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
//         JSON.parse(parameters);
//         return parameters;
//       } catch {
//         return '{}';
//       }
//     }
//     return JSON.stringify(parameters);
//   }

//   getDatabaseStats() {
//     const categoryCount = this.get("SELECT COUNT(*) as count FROM categories")?.count || 0;
//     const componentCount = this.get("SELECT COUNT(*) as count FROM components")?.count || 0;
//     const totalQuantity = this.get("SELECT SUM(quantity) as total FROM components")?.total || 0;

//     return {
//       categoryCount,
//       componentCount,
//       totalQuantity,
//       dbPath: this.dbPath,
//       lastUpdated: new Date().toISOString()
//     };
//   }

//   checkDatabaseIntegrity() {
//     try {
//       const integrityCheck = this.get("PRAGMA integrity_check");
//       const tables = this.all("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name");
//       const componentCount = this.get("SELECT COUNT(*) as c FROM components")?.c || 0;
      
//       console.log("‚úÖ Database integrity:", integrityCheck);
//       console.log("üìä Database contains tables:", tables.map(t => t.name));
//       console.log("üîß Total components:", componentCount);
      
//       return {
//         success: true,
//         integrity: integrityCheck,
//         tables: tables.map(t => t.name),
//         componentCount
//       };
//     } catch (error) {
//       console.error("‚ùå Database integrity error:", error);
//       return { success: false, error: error.message };
//     }
//   }

//   // ===== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ö–†–´–¢–ò–ï =====

//   optimize() {
//     try {
//       this.db.exec('PRAGMA optimize');
//       this.db.exec('VACUUM');
//       console.log('‚úÖ Database optimized');
//     } catch (error) {
//       console.error('‚ùå Database optimization error:', error);
//     }
//   }

//   backup() {
//     try {
//       const backupPath = this.dbPath + '.backup_' + Date.now();
//       this.db.backup(backupPath);
//       console.log('‚úÖ Database backup created:', backupPath);
//       return backupPath;
//     } catch (error) {
//       console.error('‚ùå Database backup error:', error);
//       return null;
//     }
//   }

//   close() {
//     if (this.db) {
//       this.optimize();
//       this.db.close();
//       console.log('‚úÖ Database closed');
//     }
//   }
// }

// export default ComponentsDatabase;




















































// const Database = require('better-sqlite3');
// const path = require('path');
// const { app } = require('electron');

// class ComponentsDatabase {
//   constructor() {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º userData –ø–∞–ø–∫—É Electron –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î
//     const userDataPath = app.getPath('userData');
//     this.dbPath = path.join(userDataPath, 'components.db');
//     // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//     const dbDir = path.dirname(this.dbPath);
//     require('fs').mkdirSync(dbDir, { recursive: true });
//     this.db = new Database(this.dbPath);


    
        

    
//     // –í–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
//     this.db.pragma('journal_mode = WAL');
//     this.db.pragma('foreign_keys = ON');
//     this.db.pragma('busy_timeout = 5000');
    
//     this.init();
//   }

//   init() {
//     try {
//       this.createTables();
//       this.insertInitialCategories();
//       this.migrateDatabase();
//       console.log('‚úÖ Database initialized at:', this.dbPath);
//     } catch (error) {
//       console.error('‚ùå Database initialization error:', error);
//       throw error;
//     }
//   }

//   createTables() {
//     // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
//     this.db.exec(`
//       CREATE TABLE IF NOT EXISTS categories (
//         id INTEGER PRIMARY KEY AUTOINCREMENT,
//         name TEXT NOT NULL UNIQUE,
//         created_at TEXT DEFAULT CURRENT_TIMESTAMP
//       )
//     `);

//     this.db.exec(`
//       CREATE TABLE IF NOT EXISTS components (
//         id INTEGER PRIMARY KEY AUTOINCREMENT,
//         category_id INTEGER NOT NULL,
//         name TEXT NOT NULL,
//         storage_cell TEXT,
//         datasheet_url TEXT,
//         quantity INTEGER DEFAULT 0,
//         updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
//         parameters TEXT DEFAULT '{}',
//         image_data TEXT,
//         description TEXT,
//         created_at TEXT DEFAULT CURRENT_TIMESTAMP,
//         FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
//       )
//     `);

//     // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_category ON components(category_id)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_name ON components(name)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_storage ON components(storage_cell)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_updated ON components(updated_at)');
//   }

//   insertInitialCategories() {
//     const categories = ["–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã", "–†–µ–∑–∏—Å—Ç–æ—Ä—ã", "–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã", "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã", "–î–∏–æ–¥—ã"];
    
//     const insertStmt = this.db.prepare('INSERT OR IGNORE INTO categories (name) VALUES (?)');
    
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//     const insertMany = this.db.transaction((cats) => {
//       for (const category of cats) {
//         insertStmt.run(category);
//       }
//     });

//     insertMany(categories);
//   }

//   migrateDatabase() {
//     try {
//       const columns = this.db.prepare("PRAGMA table_info(components)").all();
//       const columnNames = columns.map(col => col.name);
      
//       // –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
//       const migrations = [
//         { name: 'storage_cell', type: 'TEXT', default: 'NULL' },
//         { name: 'datasheet_url', type: 'TEXT', default: 'NULL' },
//         { name: 'quantity', type: 'INTEGER', default: '0' },
//         { name: 'updated_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' },
//         { name: 'parameters', type: 'TEXT', default: "'{}'" },
//         { name: 'image_data', type: 'TEXT', default: 'NULL' },
//         { name: 'description', type: 'TEXT', default: 'NULL' },
//         { name: 'created_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' }
//       ];

//       // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
//       const migrate = this.db.transaction(() => {
//         for (const migration of migrations) {
//           if (!columnNames.includes(migration.name)) {
//             this.db.exec(`ALTER TABLE components ADD COLUMN ${migration.name} ${migration.type} DEFAULT ${migration.default}`);
//             console.log(`‚úÖ Added column: ${migration.name}`);
//           }
//         }
//       });

//       migrate();
      
//     } catch (error) {
//       console.error('‚ùå Migration error:', error);
//     }
//   }

//   // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î =====

//   all(sql, params = []) {
//     try {
//       return this.db.prepare(sql).all(params);
//     } catch (error) {
//       console.error('‚ùå Query error (all):', error.message, sql, params);
//       return [];
//     }
//   }

//   get(sql, params = []) {
//     try {
//       return this.db.prepare(sql).get(params) || null;
//     } catch (error) {
//       console.error('‚ùå Query error (get):', error.message, sql, params);
//       return null;
//     }
//   }

//   run(sql, params = []) {
//     try {
//       const result = this.db.prepare(sql).run(params);
//       return {
//         success: true,
//         changes: result.changes,
//         lastInsertRowid: result.lastInsertRowid
//       };
//     } catch (error) {
//       console.error('‚ùå Query error (run):', error.message, sql, params);
//       return { 
//         success: false, 
//         changes: 0, 
//         lastInsertRowid: 0,
//         error: error.message 
//       };
//     }
//   }

//   // ===== API –ö–ê–¢–ï–ì–û–†–ò–ô =====

//   getCategories() {
//     return this.all("SELECT * FROM categories ORDER BY name");
//   }

//   addCategory(name) {
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
//     }

//     const result = this.run("INSERT INTO categories (name) VALUES (?)", [name.trim()]);
    
//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid };
//     }
    
//     return { 
//       success: false, 
//       error: result.error?.includes('UNIQUE') 
//         ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" 
//         : "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     };
//   }

//   updateCategory(id, name) {
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
//     }

//     const result = this.run("UPDATE categories SET name = ? WHERE id = ?", [name.trim(), id]);
    
//     if (result.success && result.changes > 0) {
//       return { success: true };
//     }
    
//     return { 
//       success: false, 
//       error: result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     };
//   }

//   deleteCategory(id) {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º CASCADE –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
//     const result = this.run("DELETE FROM categories WHERE id = ?", [id]);
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : null
//     };
//   }

//   // ===== API –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

//   getComponents(categoryId = null) {
//     if (categoryId) {
//       return this.all(
//         "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.category_id = ? ORDER BY c.name", 
//         [categoryId]
//       );
//     }
//     return this.all("SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id ORDER BY c.name");
//   }

//   getComponent(id) {
//     const component = this.get(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.id = ?
//     `, [id]);
    
//     console.log('üîç Raw component data:', component);
//     console.log('üîç Parameters type:', typeof component?.parameters);
//     console.log('üîç Parameters value:', component?.parameters);
    
//     if (component) {
//       // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
//       if (component.parameters && typeof component.parameters === 'string') {
//         try {
//           component.parameters = JSON.parse(component.parameters);
//           console.log('‚úÖ Successfully parsed parameters:', component.parameters);
//         } catch (error) {
//           console.error('‚ùå JSON parse error:', error);
//           component.parameters = {};
//         }
//       } else {
//         component.parameters = component.parameters || {};
//       }
//     }
    
//     return component;
//   }

//   addComponent(componentData) {
//     // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
//     if (!componentData.category_id || !componentData.name?.trim()) {
//       return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" };
//     }

//     const result = this.run(`
//       INSERT INTO components 
//       (category_id, name, storage_cell, datasheet_url, quantity, updated_at, parameters, image_data, description)
//       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
//     `, [
//       componentData.category_id,
//       componentData.name.trim(),
//       componentData.storage_cell?.trim() || null,
//       componentData.datasheet_url?.trim() || null,
//       Math.max(0, parseInt(componentData.quantity) || 0),
//       componentData.updated_at || new Date().toISOString(),
//       this.serializeParameters(componentData.parameters),
//       componentData.image_data || null,
//       componentData.description?.trim() || null
//     ]);

//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid };
//     }
    
//     return { success: false, error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞" };
//   }

//   updateComponent(componentData) {
//     if (!componentData.id) {
//       return { success: false, error: "ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" };
//     }
  
//     const result = this.run(`
//       UPDATE components 
//       SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, 
//           quantity = ?, updated_at = ?, parameters = ?, image_data = ?, description = ?
//       WHERE id = ?
//     `, [
//       componentData.category_id,
//       componentData.name,
//       componentData.storage_cell,
//       componentData.datasheet_url,
//       componentData.quantity,
//       new Date().toISOString(),
//       JSON.stringify(componentData.parameters),
//       componentData.image_data,
//       componentData.description,
//       componentData.id
//     ]);
  
//     return { 
//       success: result.success, 
//       changes: result.changes,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     };
//   }
  

//   deleteComponent(id) {
//     const result = this.run("DELETE FROM components WHERE id = ?", [id]);
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     };
//   }

//   // ===== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====

//   searchComponents(query) {
//     if (!query?.trim()) return [];
    
//     const searchTerm = `%${query.trim()}%`;
//     return this.all(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.name LIKE ? OR c.storage_cell LIKE ? OR cat.name LIKE ? OR c.description LIKE ?
//       ORDER BY c.name
//     `, [searchTerm, searchTerm, searchTerm, searchTerm]);
//   }

//   getComponentsByStorage(cell) {
//     if (!cell?.trim()) return [];
    
//     return this.all(
//       "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.storage_cell = ? ORDER BY c.name",
//       [cell.trim()]
//     );
//   }

//   // ===== –£–¢–ò–õ–ò–¢–´ =====

//   serializeParameters(parameters) {
//     if (!parameters) return '{}';
//     if (typeof parameters === 'string') {
//       try {
//         // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ JSON —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
//         JSON.parse(parameters);
//         return parameters;
//       } catch {
//         return '{}';
//       }
//     }
//     return JSON.stringify(parameters);
//   }

//   getDatabaseStats() {
//     const categoryCount = this.get("SELECT COUNT(*) as count FROM categories")?.count || 0;
//     const componentCount = this.get("SELECT COUNT(*) as count FROM components")?.count || 0;
//     const totalQuantity = this.get("SELECT SUM(quantity) as total FROM components")?.total || 0;

//     return {
//       categoryCount,
//       componentCount,
//       totalQuantity,
//       dbPath: this.dbPath,
//       lastUpdated: new Date().toISOString()
//     };
//   }

//   checkDatabaseIntegrity() {
//     try {
//       const integrityCheck = this.get("PRAGMA integrity_check");
//       const tables = this.all("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name");
//       const componentCount = this.get("SELECT COUNT(*) as c FROM components")?.c || 0;
      
//       console.log("‚úÖ Database integrity:", integrityCheck);
//       console.log("üìä Database contains tables:", tables.map(t => t.name));
//       console.log("üîß Total components:", componentCount);
      
//       return {
//         success: true,
//         integrity: integrityCheck,
//         tables: tables.map(t => t.name),
//         componentCount
//       };
//     } catch (error) {
//       console.error("‚ùå Database integrity error:", error);
//       return { success: false, error: error.message };
//     }
//   }

//   // ===== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ö–†–´–¢–ò–ï =====

//   optimize() {
//     try {
//       this.db.exec('PRAGMA optimize');
//       this.db.exec('VACUUM');
//       console.log('‚úÖ Database optimized');
//     } catch (error) {
//       console.error('‚ùå Database optimization error:', error);
//     }
//   }

//   backup() {
//     try {
//       const backupPath = this.dbPath + '.backup_' + Date.now();
//       this.db.backup(backupPath);
//       console.log('‚úÖ Database backup created:', backupPath);
//       return backupPath;
//     } catch (error) {
//       console.error('‚ùå Database backup error:', error);
//       return null;
//     }
//   }

//   close() {
//     if (this.db) {
//       this.optimize();
//       this.db.close();
//       console.log('‚úÖ Database closed');
//     }
//   }
// }

// export default ComponentsDatabase;



















































// import { app } from 'electron'
// import path from 'path'
// import fs from 'fs'

// class ComponentsDatabase {
//   constructor() {
//     this.db = null
//     this.dbPath = null
//     this.isInitialized = false
    
//     console.log('üîß ComponentsDatabase constructor STARTED')
//     this.initializeDatabase()
//   }

//   initializeDatabase() {
//     console.log('üîÑ Starting SIMPLE database initialization...')
    
//     try {
//       // –ò—Å–ø–æ–ª—å–∑—É–µ–º userData –ø–∞–ø–∫—É
//       const userDataPath = app.getPath('userData')
//       const dbDir = path.join(userDataPath, 'RadioBase')
//       this.dbPath = path.join(dbDir, 'components.db')
      
//       console.log('üìÅ Database path:', this.dbPath)
      
//       // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
//       if (!fs.existsSync(dbDir)) {
//         console.log('üîÑ Creating directory...')
//         fs.mkdirSync(dbDir, { recursive: true })
//         console.log('‚úÖ Directory created')
//       }
      
//       // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ—Å—Ç–æ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —á—Ç–æ –ë–î —Å–æ–∑–¥–∞–Ω–∞)
//       console.log('üîÑ Creating database file...')
//       if (!fs.existsSync(this.dbPath)) {
//         fs.writeFileSync(this.dbPath, 'SQLite format 3')
//         console.log('‚úÖ Database file created')
//       } else {
//         console.log('‚úÖ Database file already exists')
//       }
      
//       this.isInitialized = true
//       console.log('‚úÖ Database initialized successfully!')
      
//     } catch (error) {
//       console.error('‚ùå SIMPLE database initialization failed:', error)
//       console.error('‚ùå Error stack:', error.stack)
//       throw error
//     }
//   }

//   getCategories() {
//     console.log('üìÅ getCategories called - returning mock data')
//     if (!this.isInitialized) {
//       console.error('‚ùå Database not initialized')
//       return []
//     }
    
//     // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
//     return [
//       { id: 1, name: '–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//       { id: 2, name: '–†–µ–∑–∏—Å—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//       { id: 3, name: '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//       { id: 4, name: '–î–∏–æ–¥—ã', created_at: new Date().toISOString() },
//       { id: 5, name: '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã', created_at: new Date().toISOString() },
//       { id: 6, name: '–ò–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', created_at: new Date().toISOString() },
//       { id: 7, name: '–†–∞–∑—ä–µ–º—ã', created_at: new Date().toISOString() },
//       { id: 8, name: '–ö–≤–∞—Ä—Ü–µ–≤—ã–µ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã', created_at: new Date().toISOString() }
//     ]
//   }

//   getComponents(categoryId = null) {
//     console.log('üìÅ getComponents called with categoryId:', categoryId)
//     // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
//     return []
//   }

//   addCategory(name) {
//     console.log('üìÅ addCategory called with:', name)
//     // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//     return { success: true, id: Date.now() }
//   }

//   getDatabaseStats() {
//     console.log('üìÅ getDatabaseStats called')
//     return {
//       dbPath: this.dbPath || 'Not initialized',
//       isInitialized: this.isInitialized,
//       categoryCount: 8,
//       componentCount: 0,
//       totalQuantity: 0,
//       lastUpdated: new Date().toISOString()
//     }
//   }

//   close() {
//     console.log('üîß Database close called')
//     this.isInitialized = false
//   }
// }

// export default ComponentsDatabase



























































// 271025



// import Database from 'better-sqlite3'
// import { app } from 'electron'
// import path from 'path'
// import fs from 'fs'

// class ComponentsDatabase {
//   constructor() {
//     this.db = null
//     this.dbPath = null
//     this.isInitialized = false
    
//     console.log('üîß ComponentsDatabase constructor STARTED')
//     this.initializeDatabase()
//   }

//   initializeDatabase() {
//     console.log('üîÑ Starting database initialization with better-sqlite3...')
    
//     try {
//       // –ò—Å–ø–æ–ª—å–∑—É–µ–º userData –ø–∞–ø–∫—É
//       const userDataPath = app.getPath('userData')
//       const dbDir = path.join(userDataPath, 'RadioBase')
//       this.dbPath = path.join(dbDir, 'components.db')
      
//       console.log('üìÅ Database path:', this.dbPath)
      
//       // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
//       if (!fs.existsSync(dbDir)) {
//         console.log('üîÑ Creating directory...')
//         fs.mkdirSync(dbDir, { recursive: true })
//         console.log('‚úÖ Directory created')
//       }
      
//       // –°–æ–∑–¥–∞–µ–º/–æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å better-sqlite3
//       console.log('üîÑ Opening database with better-sqlite3...')
//       this.db = new Database(this.dbPath)
//       console.log('‚úÖ Database opened successfully')
      
//       // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ë–î
//       this.db.pragma('journal_mode = WAL')
//       this.db.pragma('foreign_keys = ON')
//       this.db.pragma('busy_timeout = 5000')
      
//       // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
//       this.createTables()
      
//       // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
//       this.insertInitialData()
      
//       this.isInitialized = true
//       console.log('‚úÖ Database FULLY initialized successfully!')
      
//     } catch (error) {
//       console.error('‚ùå Database initialization failed:', error)
//       console.error('‚ùå Error message:', error.message)
//       console.error('‚ùå Error stack:', error.stack)
//       throw error
//     }
//   }

//   createTables() {
//     console.log('üîÑ Creating tables...')
    
//     try {
//       // –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
//       this.db.exec(`
//         CREATE TABLE IF NOT EXISTS categories (
//           id INTEGER PRIMARY KEY AUTOINCREMENT,
//           name TEXT NOT NULL UNIQUE,
//           created_at DATETIME DEFAULT CURRENT_TIMESTAMP
//         )
//       `)
      
//       // –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
//       this.db.exec(`
//         CREATE TABLE IF NOT EXISTS components (
//           id INTEGER PRIMARY KEY AUTOINCREMENT,
//           category_id INTEGER NOT NULL,
//           name TEXT NOT NULL,
//           storage_cell TEXT,
//           datasheet_url TEXT,
//           quantity INTEGER DEFAULT 0,
//           updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
//           parameters TEXT DEFAULT '{}',
//           image_data TEXT,
//           description TEXT,
//           created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
//           FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
//         )
//       `)

//       // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//       this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_category ON components(category_id)')
//       this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_name ON components(name)')
//       this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_storage ON components(storage_cell)')
//       this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_updated ON components(updated_at)')
      
//       console.log('‚úÖ Tables created successfully')
//     } catch (error) {
//       console.error('‚ùå Table creation failed:', error)
//       throw error
//     }
//   }

//   insertInitialData() {
//     console.log('üîÑ Inserting initial data...')
    
//     try {
//       const categories = [
//         '–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã',
//         '–†–µ–∑–∏—Å—Ç–æ—Ä—ã', 
//         '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã',
//         '–î–∏–æ–¥—ã',
//         '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã',
//         '–ò–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
//         '–†–∞–∑—ä–µ–º—ã',
//         '–ö–≤–∞—Ä—Ü–µ–≤—ã–µ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã'
//       ]
      
//       const insertCategory = this.db.prepare('INSERT OR IGNORE INTO categories (name) VALUES (?)')
      
//       // –ò—Å–ø–æ–ª—å–∑—É–µ–º transaction –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤—Å—Ç–∞–≤–∫–∏
//       const insertMany = this.db.transaction((cats) => {
//         for (const category of cats) {
//           console.log('üìù Inserting category:', category)
//           insertCategory.run(category)
//         }
//       })
      
//       insertMany(categories)
//       console.log('‚úÖ Initial categories inserted')
      
//       // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ
//       const count = this.db.prepare('SELECT COUNT(*) as count FROM categories').get()
//       console.log(`üìä Total categories in database: ${count.count}`)
      
//     } catch (error) {
//       console.error('‚ùå Initial data insertion failed:', error)
//       throw error
//     }
//   }

//   // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î =====

//   all(sql, params = []) {
//     if (!this.db || !this.isInitialized) {
//       console.error('‚ùå Database not initialized for query:', sql)
//       return []
//     }
    
//     try {
//       return this.db.prepare(sql).all(params)
//     } catch (error) {
//       console.error('‚ùå Query error (all):', error.message, sql, params)
//       return []
//     }
//   }

//   get(sql, params = []) {
//     if (!this.db || !this.isInitialized) {
//       console.error('‚ùå Database not initialized for query:', sql)
//       return null
//     }
    
//     try {
//       return this.db.prepare(sql).get(params) || null
//     } catch (error) {
//       console.error('‚ùå Query error (get):', error.message, sql, params)
//       return null
//     }
//   }

//   run(sql, params = []) {
//     if (!this.db || !this.isInitialized) {
//       console.error('‚ùå Database not initialized for query:', sql)
//       return { 
//         success: false, 
//         changes: 0, 
//         lastInsertRowid: 0,
//         error: 'Database not initialized' 
//       }
//     }
    
//     try {
//       const result = this.db.prepare(sql).run(params)
//       return {
//         success: true,
//         changes: result.changes,
//         lastInsertRowid: result.lastInsertRowid
//       }
//     } catch (error) {
//       console.error('‚ùå Query error (run):', error.message, sql, params)
//       return { 
//         success: false, 
//         changes: 0, 
//         lastInsertRowid: 0,
//         error: error.message 
//       }
//     }
//   }

//   // ===== API –ö–ê–¢–ï–ì–û–†–ò–ô =====

//   getCategories() {
//     console.log('üìÅ getCategories called - reading from SQLite database')
//     if (!this.db || !this.isInitialized) {
//       console.error('‚ùå Database not initialized')
//       return []
//     }
    
//     try {
//       const categories = this.all("SELECT * FROM categories ORDER BY name")
//       console.log(`‚úÖ Retrieved ${categories.length} categories from SQLite database`)
//       return categories
//     } catch (error) {
//       console.error('‚ùå getCategories error:', error)
//       return []
//     }
//   }

//   addCategory(name) {
//     console.log('üìÅ addCategory called with:', name)
//     if (!this.db || !this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }
    
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" }
//     }

//     const result = this.run("INSERT INTO categories (name) VALUES (?)", [name.trim()])
    
//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid }
//     }
    
//     return { 
//       success: false, 
//       error: result.error?.includes('UNIQUE') 
//         ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" 
//         : "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     }
//   }

//   updateCategory(id, name) {
//     console.log('üìÅ updateCategory called with:', id, name)
//     if (!this.db || !this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }
    
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" }
//     }

//     const result = this.run("UPDATE categories SET name = ? WHERE id = ?", [name.trim(), id])
    
//     if (result.success && result.changes > 0) {
//       return { success: true }
//     }
    
//     return { 
//       success: false, 
//       error: result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     }
//   }

//   deleteCategory(id) {
//     console.log('üìÅ deleteCategory called with:', id)
//     if (!this.db || !this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }
    
//     const result = this.run("DELETE FROM categories WHERE id = ?", [id])
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : null
//     }
//   }

//   // ===== API –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

//   getComponents(categoryId = null) {
//     console.log('üìÅ getComponents called with categoryId:', categoryId)
//     if (!this.db || !this.isInitialized) {
//       return []
//     }
    
//     try {
//       if (categoryId) {
//         return this.all(
//           "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.category_id = ? ORDER BY c.name", 
//           [categoryId]
//         )
//       }
//       return this.all("SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id ORDER BY c.name")
//     } catch (error) {
//       console.error('‚ùå getComponents error:', error)
//       return []
//     }
//   }

//   getComponent(id) {
//     console.log('üìÅ getComponent called with id:', id)
//     if (!this.db || !this.isInitialized) {
//       return null
//     }
    
//     const component = this.get(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.id = ?
//     `, [id])
    
//     if (component) {
//       if (component.parameters && typeof component.parameters === 'string') {
//         try {
//           component.parameters = JSON.parse(component.parameters)
//         } catch (error) {
//           console.error('‚ùå JSON parse error:', error)
//           component.parameters = {}
//         }
//       } else {
//         component.parameters = component.parameters || {}
//       }
//     }
    
//     return component
//   }

//   addComponent(componentData) {
//     console.log('üìÅ addComponent called')
//     if (!this.db || !this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }
    
//     if (!componentData.category_id || !componentData.name?.trim()) {
//       return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }
//     }

//     const result = this.run(`
//       INSERT INTO components 
//       (category_id, name, storage_cell, datasheet_url, quantity, parameters, description)
//       VALUES (?, ?, ?, ?, ?, ?, ?)
//     `, [
//       componentData.category_id,
//       componentData.name.trim(),
//       componentData.storage_cell?.trim() || null,
//       componentData.datasheet_url?.trim() || null,
//       Math.max(0, parseInt(componentData.quantity) || 0),
//       this.serializeParameters(componentData.parameters),
//       componentData.description?.trim() || null
//     ])

//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid }
//     }
    
//     return { success: false, error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞" }
//   }

//   updateComponent(componentData) {
//     console.log('üìÅ updateComponent called')
//     if (!this.db || !this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }
    
//     if (!componentData.id) {
//       return { success: false, error: "ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" }
//     }
  
//     const result = this.run(`
//       UPDATE components 
//       SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, 
//           quantity = ?, parameters = ?, description = ?, updated_at = CURRENT_TIMESTAMP
//       WHERE id = ?
//     `, [
//       componentData.category_id,
//       componentData.name,
//       componentData.storage_cell,
//       componentData.datasheet_url,
//       componentData.quantity,
//       this.serializeParameters(componentData.parameters),
//       componentData.description,
//       componentData.id
//     ])
  
//     return { 
//       success: result.success, 
//       changes: result.changes,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     }
//   }

//   deleteComponent(id) {
//     console.log('üìÅ deleteComponent called with id:', id)
//     if (!this.db || !this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }
    
//     const result = this.run("DELETE FROM components WHERE id = ?", [id])
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     }
//   }

//   // ===== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====

//   searchComponents(query) {
//     console.log('üìÅ searchComponents called with query:', query)
//     if (!this.db || !this.isInitialized) {
//       return []
//     }
    
//     if (!query?.trim()) return []
    
//     const searchTerm = `%${query.trim()}%`
//     return this.all(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.name LIKE ? OR c.storage_cell LIKE ? OR cat.name LIKE ? OR c.description LIKE ?
//       ORDER BY c.name
//     `, [searchTerm, searchTerm, searchTerm, searchTerm])
//   }

//   getComponentsByStorage(cell) {
//     console.log('üìÅ getComponentsByStorage called with cell:', cell)
//     if (!this.db || !this.isInitialized) {
//       return []
//     }
    
//     if (!cell?.trim()) return []
    
//     return this.all(
//       "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.storage_cell = ? ORDER BY c.name",
//       [cell.trim()]
//     )
//   }

//   // ===== –£–¢–ò–õ–ò–¢–´ =====

//   serializeParameters(parameters) {
//     if (!parameters) return '{}'
//     if (typeof parameters === 'string') {
//       try {
//         JSON.parse(parameters)
//         return parameters
//       } catch {
//         return '{}'
//       }
//     }
//     return JSON.stringify(parameters)
//   }

//   getDatabaseStats() {
//     console.log('üìÅ getDatabaseStats called')
//     if (!this.db || !this.isInitialized) {
//       return {
//         error: 'Database not initialized',
//         dbPath: 'Not available',
//         isInitialized: false
//       }
//     }
    
//     try {
//       const categoryCount = this.get("SELECT COUNT(*) as count FROM categories")?.count || 0
//       const componentCount = this.get("SELECT COUNT(*) as count FROM components")?.count || 0
//       const totalQuantity = this.get("SELECT SUM(quantity) as total FROM components")?.total || 0

//       return {
//         categoryCount,
//         componentCount,
//         totalQuantity,
//         dbPath: this.dbPath,
//         isInitialized: this.isInitialized,
//         lastUpdated: new Date().toISOString()
//       }
//     } catch (error) {
//       console.error('‚ùå getDatabaseStats error:', error)
//       return {
//         error: error.message,
//         dbPath: this.dbPath,
//         isInitialized: this.isInitialized
//       }
//     }
//   }

//   checkDatabaseIntegrity() {
//     if (!this.db || !this.isInitialized) {
//       return { success: false, error: "Database not initialized" }
//     }
    
//     try {
//       const integrityCheck = this.get("PRAGMA integrity_check")
//       const tables = this.all("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name")
      
//       return {
//         success: true,
//         integrity: integrityCheck,
//         tables: tables.map(t => t.name),
//         isInitialized: this.isInitialized
//       }
//     } catch (error) {
//       console.error("‚ùå Database integrity error:", error)
//       return { success: false, error: error.message }
//     }
//   }

//   close() {
//     if (this.db) {
//       try {
//         this.db.close()
//         console.log('‚úÖ Database closed')
//       } catch (error) {
//         console.error('‚ùå Error closing database:', error)
//       }
//       this.db = null
//       this.isInitialized = false
//     }
//   }
// }

// export default ComponentsDatabase






























// import { app } from 'electron'
// import path from 'path'
// import fs from 'fs'

// class ComponentsDatabase {
//   constructor() {
//     this.db = null
//     this.dbPath = null
//     this.isInitialized = false
    
//     console.log('üîß ComponentsDatabase constructor STARTED')
//     this.initializeDatabase()
//   }

//   initializeDatabase() {
//     console.log('üîÑ Starting SIMPLE database initialization...')
    
//     try {
//       // –ò—Å–ø–æ–ª—å–∑—É–µ–º userData –ø–∞–ø–∫—É
//       const userDataPath = app.getPath('userData')
//       const dbDir = path.join(userDataPath, 'RadioBase')
//       this.dbPath = path.join(dbDir, 'components.db')
      
//       console.log('üìÅ Database path:', this.dbPath)
      
//       // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
//       if (!fs.existsSync(dbDir)) {
//         console.log('üîÑ Creating directory...')
//         fs.mkdirSync(dbDir, { recursive: true })
//         console.log('‚úÖ Directory created')
//       }
      
//       // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ—Å—Ç–æ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —á—Ç–æ –ë–î —Å–æ–∑–¥–∞–Ω–∞)
//       console.log('üîÑ Creating database file...')
//       if (!fs.existsSync(this.dbPath)) {
//         fs.writeFileSync(this.dbPath, 'SQLite format 3')
//         console.log('‚úÖ Database file created')
//       } else {
//         console.log('‚úÖ Database file already exists')
//       }
      
//       this.isInitialized = true
//       console.log('‚úÖ Database initialized successfully!')
      
//     } catch (error) {
//       console.error('‚ùå SIMPLE database initialization failed:', error)
//       console.error('‚ùå Error stack:', error.stack)
//       throw error
//     }
//   }

//   getCategories() {
//     console.log('üìÅ getCategories called - returning mock data')
//     if (!this.isInitialized) {
//       console.error('‚ùå Database not initialized')
//       return []
//     }
    
//     // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
//     return [
//       { id: 1, name: '–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//       { id: 2, name: '–†–µ–∑–∏—Å—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//       { id: 3, name: '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//       { id: 4, name: '–î–∏–æ–¥—ã', created_at: new Date().toISOString() },
//       { id: 5, name: '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã', created_at: new Date().toISOString() },
//       { id: 6, name: '–ò–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', created_at: new Date().toISOString() },
//       { id: 7, name: '–†–∞–∑—ä–µ–º—ã', created_at: new Date().toISOString() },
//       { id: 8, name: '–ö–≤–∞—Ä—Ü–µ–≤—ã–µ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã', created_at: new Date().toISOString() }
//     ]
//   }

//   getComponents(categoryId = null) {
//     console.log('üìÅ getComponents called with categoryId:', categoryId)
//     // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
//     return []
//   }

//   addCategory(name) {
//     console.log('üìÅ addCategory called with:', name)
//     // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//     return { success: true, id: Date.now() }
//   }

//   updateCategory(id, name) {
//     console.log('üìÅ updateCategory called with:', id, name)
//     return { success: true }
//   }

//   deleteCategory(id) {
//     console.log('üìÅ deleteCategory called with:', id)
//     return { success: true }
//   }

//   getComponent(id) {
//     console.log('üìÅ getComponent called with id:', id)
//     return null
//   }

//   addComponent(componentData) {
//     console.log('üìÅ addComponent called')
//     return { success: true, id: Date.now() }
//   }

//   updateComponent(componentData) {
//     console.log('üìÅ updateComponent called')
//     return { success: true }
//   }

//   deleteComponent(id) {
//     console.log('üìÅ deleteComponent called with id:', id)
//     return { success: true }
//   }

//   searchComponents(query) {
//     console.log('üìÅ searchComponents called with query:', query)
//     return []
//   }

//   getComponentsByStorage(cell) {
//     console.log('üìÅ getComponentsByStorage called with cell:', cell)
//     return []
//   }

//   getDatabaseStats() {
//     console.log('üìÅ getDatabaseStats called')
//     return {
//       dbPath: this.dbPath || 'Not initialized',
//       isInitialized: this.isInitialized,
//       categoryCount: 8,
//       componentCount: 0,
//       totalQuantity: 0,
//       lastUpdated: new Date().toISOString()
//     }
//   }

//   checkDatabaseIntegrity() {
//     return {
//       success: true,
//       integrity: 'ok',
//       tables: ['categories', 'components'],
//       isInitialized: this.isInitialized
//     }
//   }

//   close() {
//     console.log('üîß Database close called')
//     this.isInitialized = false
//   }
// }

// export default ComponentsDatabase







































// import { app } from 'electron'
// import path from 'path'
// import fs from 'fs'
// import os from 'os'

// class ComponentsDatabase {
//   constructor() {
//     this.db = null
//     this.dbPath = null
//     this.isInitialized = false
    
//     console.log('üîß ComponentsDatabase constructor STARTED')
//     this.initializeDatabase()
//   }

//   getTrueExecutablePath() {
//     // –î–ª—è portable –≤–µ—Ä—Å–∏–π –Ω–∞—Ö–æ–¥–∏–º –Ω–∞—Å—Ç–æ—è—â–∏–π .exe —Ñ–∞–π–ª
//     if (process.platform === 'win32') {
//       // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—É—Ç—å
//       const possiblePaths = [
//         process.execPath, // —Ç–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
//         path.join(process.cwd(), path.basename(process.execPath)), // —Ç–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
//       ]
      
//       for (const possiblePath of possiblePaths) {
//         if (possiblePath && fs.existsSync(possiblePath) && possiblePath.endsWith('.exe')) {
//           console.log('üìÅ Found executable at:', possiblePath)
//           return possiblePath
//         }
//       }
//     }
    
//     // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º process.execPath
//     console.log('üìÅ Using process.execPath:', process.execPath)
//     return process.execPath
//   }

//   getDatabaseDirectory() {
//     if (app.isPackaged) {
//       // –í production - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ù–ê–°–¢–û–Ø–©–ò–ô .exe —Ñ–∞–π–ª
//       const exePath = this.getTrueExecutablePath()
//       const exeDir = path.dirname(exePath)
//       const dbDir = path.join(exeDir, 'Database')
      
//       console.log('üìÅ Production setup:')
//       console.log('üìÅ   Executable path:', exePath)
//       console.log('üìÅ   Executable dir:', exeDir)
//       console.log('üìÅ   Database dir:', dbDir)
      
//       return dbDir
//     } else {
//       // Development - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
//       const devDir = path.join(app.getAppPath(), 'Database')
//       console.log('üìÅ Development database directory:', devDir)
//       return devDir
//     }
//   }

//   initializeDatabase() {
//     console.log('üîÑ Starting PORTABLE database initialization...')
    
//     try {
//       // –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ä—è–¥–æ–º —Å .exe)
//       const dbDir = this.getDatabaseDirectory()
//       this.dbPath = path.join(dbDir, 'radiobase.db')
      
//       console.log('üìÅ Final database path:', this.dbPath)
//       console.log('üìÅ Database directory exists?', fs.existsSync(dbDir))
      
//       // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É Database –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
//       if (!fs.existsSync(dbDir)) {
//         console.log('üîÑ Creating database directory...')
//         fs.mkdirSync(dbDir, { recursive: true })
//         console.log('‚úÖ Database directory created')
//       }
      
//       // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
//       this.testWritePermissions(dbDir)
      
//       // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//       console.log('üîÑ Creating database file...')
//       if (!fs.existsSync(this.dbPath)) {
//         this.createNewDatabase()
//       } else {
//         console.log('‚úÖ Database file already exists, using existing database')
//         // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î
//       }
      
//       this.isInitialized = true
//       console.log('‚úÖ Portable database initialized successfully!')
      
//     } catch (error) {
//       console.error('‚ùå Portable database initialization failed:', error)
      
//       // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º userData –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
//       console.log('üîÑ Trying fallback to userData...')
//       this.useFallbackLocation()
//     }
//   }

//   testWritePermissions(dir) {
//     console.log('üîÑ Testing write permissions in:', dir)
//     try {
//       const testFile = path.join(dir, 'write_test.tmp')
//       fs.writeFileSync(testFile, 'test')
//       fs.unlinkSync(testFile)
//       console.log('‚úÖ Write permissions: OK')
//     } catch (error) {
//       console.error('‚ùå Write permissions: FAILED', error.message)
//       throw new Error(`No write permissions in directory: ${dir}`)
//     }
//   }

//   useFallbackLocation() {
//     try {
//       console.log('üìÅ Using fallback location (userData)...')
//       const userDataPath = app.getPath('userData')
//       const fallbackDir = path.join(userDataPath, 'RadioBase')
//       this.dbPath = path.join(fallbackDir, 'radiobase.db')
      
//       console.log('üìÅ Fallback database path:', this.dbPath)
      
//       if (!fs.existsSync(fallbackDir)) {
//         fs.mkdirSync(fallbackDir, { recursive: true })
//       }
      
//       if (!fs.existsSync(this.dbPath)) {
//         this.createNewDatabase()
//       }
      
//       this.isInitialized = true
//       console.log('‚úÖ Fallback database initialized')
      
//     } catch (fallbackError) {
//       console.error('‚ùå Fallback database also failed:', fallbackError)
//       throw fallbackError
//     }
//   }

//   createNewDatabase() {
//     console.log('üîÑ Creating new database file...')
    
//     // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª —Å –º–µ—Ç–∫–æ–π
//     const dbInfo = {
//       version: '1.0.0',
//       created: new Date().toISOString(),
//       description: 'RadioBase Components Database',
//       portable: true
//     }
    
//     fs.writeFileSync(this.dbPath, JSON.stringify(dbInfo, null, 2))
//     console.log('‚úÖ New database file created with info:', dbInfo)
    
//     // –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ SQLite –±–∞–∑—ã
//     // –∫–æ–≥–¥–∞ —Ä–µ—à–∏–º –ø—Ä–æ–±–ª–µ–º—É —Å better-sqlite3
//   }

//   // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò =====

//   getCategories() {
//     console.log('üìÅ getCategories called - reading from portable database')
//     if (!this.isInitialized) {
//       console.error('‚ùå Database not initialized')
//       return []
//     }
    
//     try {
//       // –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
//       if (fs.existsSync(this.dbPath)) {
//         const dbInfo = fs.readFileSync(this.dbPath, 'utf8')
//         console.log('üìÅ Database info:', JSON.parse(dbInfo))
//       }
      
//       // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ –±—É–¥—É—â–µ–º - –∏–∑ SQLite)
//       return [
//         { id: 1, name: '–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//         { id: 2, name: '–†–µ–∑–∏—Å—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//         { id: 3, name: '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//         { id: 4, name: '–î–∏–æ–¥—ã', created_at: new Date().toISOString() },
//         { id: 5, name: '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã', created_at: new Date().toISOString() },
//         { id: 6, name: '–ò–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', created_at: new Date().toISOString() },
//         { id: 7, name: '–†–∞–∑—ä–µ–º—ã', created_at: new Date().toISOString() },
//         { id: 8, name: '–ö–≤–∞—Ä—Ü–µ–≤—ã–µ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã', created_at: new Date().toISOString() }
//       ]
//     } catch (error) {
//       console.error('‚ùå getCategories error:', error)
//       return []
//     }
//   }

//   getDatabaseStats() {
//     console.log('üìÅ getDatabaseStats called')
    
//     let dbInfo = {}
//     try {
//       if (fs.existsSync(this.dbPath)) {
//         const infoStr = fs.readFileSync(this.dbPath, 'utf8')
//         dbInfo = JSON.parse(infoStr)
//       }
//     } catch (error) {
//       console.error('‚ùå Error reading database info:', error)
//     }
    
//     return {
//       dbPath: this.dbPath || 'Not initialized',
//       isInitialized: this.isInitialized,
//       categoryCount: 8,
//       componentCount: 0,
//       totalQuantity: 0,
//       lastUpdated: new Date().toISOString(),
//       portable: true,
//       dbInfo: dbInfo
//     }
//   }

//   // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê/–ò–ú–ü–û–†–¢–ê =====

//   exportDatabase(destinationPath) {
//     console.log('üìÅ Exporting database to:', destinationPath)
    
//     try {
//       if (!this.isInitialized || !fs.existsSync(this.dbPath)) {
//         return { success: false, error: 'Database not available for export' }
//       }
      
//       // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//       fs.copyFileSync(this.dbPath, destinationPath)
//       console.log('‚úÖ Database exported successfully')
      
//       return { success: true, path: destinationPath }
//     } catch (error) {
//       console.error('‚ùå Export failed:', error)
//       return { success: false, error: error.message }
//     }
//   }

//   importDatabase(sourcePath) {
//     console.log('üìÅ Importing database from:', sourcePath)
    
//     try {
//       if (!fs.existsSync(sourcePath)) {
//         return { success: false, error: 'Source file not found' }
//       }
      
//       // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã
//       const backupPath = this.dbPath + '.backup'
//       if (fs.existsSync(this.dbPath)) {
//         fs.copyFileSync(this.dbPath, backupPath)
//       }
      
//       // –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—É—é –±–∞–∑—É
//       fs.copyFileSync(sourcePath, this.dbPath)
//       console.log('‚úÖ Database imported successfully')
      
//       return { 
//         success: true, 
//         message: 'Database imported successfully. Previous database backed up.',
//         backupPath: fs.existsSync(backupPath) ? backupPath : null
//       }
//     } catch (error) {
//       console.error('‚ùå Import failed:', error)
//       return { success: false, error: error.message }
//     }
//   }

//   getDatabaseInfo() {
//     try {
//       if (fs.existsSync(this.dbPath)) {
//         const infoStr = fs.readFileSync(this.dbPath, 'utf8')
//         return JSON.parse(infoStr)
//       }
//       return { error: 'Database file not found' }
//     } catch (error) {
//       return { error: error.message }
//     }
//   }

//   // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ...
//   getComponents(categoryId = null) {
//     console.log('üìÅ getComponents called with categoryId:', categoryId)
//     return []
//   }

//   addCategory(name) {
//     console.log('üìÅ addCategory called with:', name)
//     return { success: true, id: Date.now() }
//   }

//   updateCategory(id, name) {
//     console.log('üìÅ updateCategory called with:', id, name)
//     return { success: true }
//   }

//   deleteCategory(id) {
//     console.log('üìÅ deleteCategory called with:', id)
//     return { success: true }
//   }

//   close() {
//     console.log('üîß Database close called')
//     this.isInitialized = false
//   }
// }

// export default ComponentsDatabase






















































// import { app } from 'electron'
// import path from 'path'
// import fs from 'fs'

// class ComponentsDatabase {
//   constructor() {
//     this.db = null
//     this.dbPath = null
//     this.isInitialized = false
    
//     console.log('üîß ComponentsDatabase constructor STARTED')
//     this.initializeDatabase()
//   }

//   getTrueExecutablePath() {
//     // –î–ª—è portable –≤–µ—Ä—Å–∏–π –Ω–∞—Ö–æ–¥–∏–º –Ω–∞—Å—Ç–æ—è—â–∏–π .exe —Ñ–∞–π–ª
//     if (process.platform === 'win32') {
//       const possiblePaths = [
//         process.execPath,
//         path.join(process.cwd(), path.basename(process.execPath)),
//       ]
      
//       for (const possiblePath of possiblePaths) {
//         if (possiblePath && fs.existsSync(possiblePath) && possiblePath.endsWith('.exe')) {
//           console.log('üìÅ Found executable at:', possiblePath)
//           return possiblePath
//         }
//       }
//     }
    
//     console.log('üìÅ Using process.execPath:', process.execPath)
//     return process.execPath
//   }

//   getDatabaseDirectory() {
//     if (app.isPackaged) {
//       // –í production - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ù–ê–°–¢–û–Ø–©–ò–ô .exe —Ñ–∞–π–ª
//       const exePath = this.getTrueExecutablePath()
//       const exeDir = path.dirname(exePath)
//       const dbDir = path.join(exeDir, 'Database')
      
//       console.log('üìÅ Production setup:')
//       console.log('üìÅ   Executable path:', exePath)
//       console.log('üìÅ   Executable dir:', exeDir)
//       console.log('üìÅ   Database dir:', dbDir)
      
//       return dbDir
//     } else {
//       // Development - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
//       const devDir = path.join(app.getAppPath(), 'Database')
//       console.log('üìÅ Development database directory:', devDir)
//       return devDir
//     }
//   }

//   initializeDatabase() {
//     console.log('üîÑ Starting PORTABLE database initialization...')
    
//     try {
//       // –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ä—è–¥–æ–º —Å .exe)
//       const dbDir = this.getDatabaseDirectory()
//       this.dbPath = path.join(dbDir, 'radiobase.db')
      
//       console.log('üìÅ Final database path:', this.dbPath)
//       console.log('üìÅ Database directory exists?', fs.existsSync(dbDir))
      
//       // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É Database –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
//       if (!fs.existsSync(dbDir)) {
//         console.log('üîÑ Creating database directory...')
//         fs.mkdirSync(dbDir, { recursive: true })
//         console.log('‚úÖ Database directory created')
//       }
      
//       // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
//       this.testWritePermissions(dbDir)
      
//       // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//       console.log('üîÑ Creating database file...')
//       if (!fs.existsSync(this.dbPath)) {
//         this.createNewDatabase()
//       } else {
//         console.log('‚úÖ Database file already exists, using existing database')
//       }
      
//       this.isInitialized = true
//       console.log('‚úÖ Portable database initialized successfully!')
      
//     } catch (error) {
//       console.error('‚ùå Portable database initialization failed:', error)
      
//       // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º userData –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
//       console.log('üîÑ Trying fallback to userData...')
//       this.useFallbackLocation()
//     }
//   }

//   testWritePermissions(dir) {
//     console.log('üîÑ Testing write permissions in:', dir)
//     try {
//       const testFile = path.join(dir, 'write_test.tmp')
//       fs.writeFileSync(testFile, 'test')
//       fs.unlinkSync(testFile)
//       console.log('‚úÖ Write permissions: OK')
//     } catch (error) {
//       console.error('‚ùå Write permissions: FAILED', error.message)
//       throw new Error(`No write permissions in directory: ${dir}`)
//     }
//   }

//   useFallbackLocation() {
//     try {
//       console.log('üìÅ Using fallback location (userData)...')
//       const userDataPath = app.getPath('userData')
//       const fallbackDir = path.join(userDataPath, 'RadioBase')
//       this.dbPath = path.join(fallbackDir, 'radiobase.db')
      
//       console.log('üìÅ Fallback database path:', this.dbPath)
      
//       if (!fs.existsSync(fallbackDir)) {
//         fs.mkdirSync(fallbackDir, { recursive: true })
//       }
      
//       if (!fs.existsSync(this.dbPath)) {
//         this.createNewDatabase()
//       }
      
//       this.isInitialized = true
//       console.log('‚úÖ Fallback database initialized')
      
//     } catch (fallbackError) {
//       console.error('‚ùå Fallback database also failed:', fallbackError)
//       throw fallbackError
//     }
//   }

//   createNewDatabase() {
//     console.log('üîÑ Creating new database file...')
    
//     // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª —Å –º–µ—Ç–∫–æ–π
//     const dbInfo = {
//       version: '1.0.0',
//       created: new Date().toISOString(),
//       description: 'RadioBase Components Database',
//       portable: true,
//       categories: [
//         { id: 1, name: '–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//         { id: 2, name: '–†–µ–∑–∏—Å—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//         { id: 3, name: '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã', created_at: new Date().toISOString() },
//         { id: 4, name: '–î–∏–æ–¥—ã', created_at: new Date().toISOString() },
//         { id: 5, name: '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã', created_at: new Date().toISOString() },
//         { id: 6, name: '–ò–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', created_at: new Date().toISOString() },
//         { id: 7, name: '–†–∞–∑—ä–µ–º—ã', created_at: new Date().toISOString() },
//         { id: 8, name: '–ö–≤–∞—Ä—Ü–µ–≤—ã–µ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã', created_at: new Date().toISOString() }
//       ],
//       components: []
//     }
    
//     fs.writeFileSync(this.dbPath, JSON.stringify(dbInfo, null, 2))
//     console.log('‚úÖ New database file created with initial data')
//   }

//   // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

//   loadDatabase() {
//     try {
//       if (fs.existsSync(this.dbPath)) {
//         const data = fs.readFileSync(this.dbPath, 'utf8')
//         return JSON.parse(data)
//       }
//       return null
//     } catch (error) {
//       console.error('‚ùå Error loading database:', error)
//       return null
//     }
//   }

//   saveDatabase(data) {
//     try {
//       fs.writeFileSync(this.dbPath, JSON.stringify(data, null, 2))
//       return true
//     } catch (error) {
//       console.error('‚ùå Error saving database:', error)
//       return false
//     }
//   }

//   // ===== API –ö–ê–¢–ï–ì–û–†–ò–ô =====

//   getCategories() {
//     console.log('üìÅ getCategories called - reading from portable database')
//     if (!this.isInitialized) {
//       console.error('‚ùå Database not initialized')
//       return []
//     }
    
//     try {
//       const dbData = this.loadDatabase()
//       if (dbData && dbData.categories) {
//         console.log(`‚úÖ Retrieved ${dbData.categories.length} categories from database`)
//         return dbData.categories
//       }
//       return []
//     } catch (error) {
//       console.error('‚ùå getCategories error:', error)
//       return []
//     }
//   }

//   addCategory(name) {
//     console.log('üìÅ addCategory called with:', name)
//     if (!this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }
    
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" }
//     }

//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData) {
//         return { success: false, error: "Database corrupted" }
//       }

//       // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
//       const existingCategory = dbData.categories.find(cat => 
//         cat.name.toLowerCase() === name.trim().toLowerCase()
//       )
      
//       if (existingCategory) {
//         return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" }
//       }

//       // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
//       const newCategory = {
//         id: Date.now(),
//         name: name.trim(),
//         created_at: new Date().toISOString()
//       }
      
//       dbData.categories.push(newCategory)
      
//       if (this.saveDatabase(dbData)) {
//         return { success: true, id: newCategory.id }
//       } else {
//         return { success: false, error: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" }
//       }
//     } catch (error) {
//       console.error('‚ùå addCategory error:', error)
//       return { success: false, error: error.message }
//     }
//   }

//   updateCategory(id, name) {
//     console.log('üìÅ updateCategory called with:', id, name)
//     if (!this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }
    
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" }
//     }

//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData) {
//         return { success: false, error: "Database corrupted" }
//       }

//       const categoryIndex = dbData.categories.findIndex(cat => cat.id === id)
//       if (categoryIndex === -1) {
//         return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }
//       }

//       // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
//       dbData.categories[categoryIndex].name = name.trim()
      
//       if (this.saveDatabase(dbData)) {
//         return { success: true }
//       } else {
//         return { success: false, error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" }
//       }
//     } catch (error) {
//       console.error('‚ùå updateCategory error:', error)
//       return { success: false, error: error.message }
//     }
//   }

//   deleteCategory(id) {
//     console.log('üìÅ deleteCategory called with:', id)
//     if (!this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }

//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData) {
//         return { success: false, error: "Database corrupted" }
//       }

//       const categoryIndex = dbData.categories.findIndex(cat => cat.id === id)
//       if (categoryIndex === -1) {
//         return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }
//       }

//       // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
//       dbData.categories.splice(categoryIndex, 1)
//       dbData.components = dbData.components.filter(comp => comp.category_id !== id)
      
//       if (this.saveDatabase(dbData)) {
//         return { success: true }
//       } else {
//         return { success: false, error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" }
//       }
//     } catch (error) {
//       console.error('‚ùå deleteCategory error:', error)
//       return { success: false, error: error.message }
//     }
//   }

//   // ===== API –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

//   getComponents(categoryId = null) {
//     console.log('üìÅ getComponents called with categoryId:', categoryId)
//     if (!this.isInitialized) {
//       return []
//     }
    
//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData || !dbData.components) {
//         return []
//       }

//       let components = dbData.components
      
//       // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
//       if (categoryId) {
//         components = components.filter(comp => comp.category_id === categoryId)
//       }

//       // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
//       const categories = dbData.categories || []
//       components = components.map(comp => {
//         const category = categories.find(cat => cat.id === comp.category_id)
//         return {
//           ...comp,
//           category_name: category ? category.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
//         }
//       })

//       console.log(`‚úÖ Retrieved ${components.length} components`)
//       return components
//     } catch (error) {
//       console.error('‚ùå getComponents error:', error)
//       return []
//     }
//   }

//   getComponent(id) {
//     console.log('üìÅ getComponent called with id:', id)
//     if (!this.isInitialized) {
//       return null
//     }
    
//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData || !dbData.components) {
//         return null
//       }

//       const component = dbData.components.find(comp => comp.id === id)
//       if (component) {
//         // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//         const categories = dbData.categories || []
//         const category = categories.find(cat => cat.id === component.category_id)
//         return {
//           ...component,
//           category_name: category ? category.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
//         }
//       }
      
//       return null
//     } catch (error) {
//       console.error('‚ùå getComponent error:', error)
//       return null
//     }
//   }

//   addComponent(componentData) {
//     console.log('üìÅ addComponent called with data:', componentData)
//     if (!this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }
    
//     // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
//     if (!componentData.category_id || !componentData.name?.trim()) {
//       return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }
//     }

//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData) {
//         return { success: false, error: "Database corrupted" }
//       }

//       // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//       const categoryExists = dbData.categories.some(cat => cat.id === componentData.category_id)
//       if (!categoryExists) {
//         return { success: false, error: "–£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" }
//       }

//       // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
//       const newComponent = {
//         id: Date.now(),
//         category_id: componentData.category_id,
//         name: componentData.name.trim(),
//         storage_cell: componentData.storage_cell?.trim() || null,
//         datasheet_url: componentData.datasheet_url?.trim() || null,
//         quantity: Math.max(0, parseInt(componentData.quantity) || 0),
//         parameters: componentData.parameters || {},
//         description: componentData.description?.trim() || null,
//         created_at: new Date().toISOString(),
//         updated_at: new Date().toISOString()
//       }

//       // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
//       if (!dbData.components) {
//         dbData.components = []
//       }

//       dbData.components.push(newComponent)
      
//       if (this.saveDatabase(dbData)) {
//         console.log('‚úÖ Component added successfully')
//         return { success: true, id: newComponent.id }
//       } else {
//         return { success: false, error: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞" }
//       }
//     } catch (error) {
//       console.error('‚ùå addComponent error:', error)
//       return { success: false, error: error.message }
//     }
//   }

//   updateComponent(componentData) {
//     console.log('üìÅ updateComponent called with data:', componentData)
//     if (!this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }
    
//     if (!componentData.id) {
//       return { success: false, error: "ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" }
//     }

//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData || !dbData.components) {
//         return { success: false, error: "Database corrupted or no components" }
//       }

//       const componentIndex = dbData.components.findIndex(comp => comp.id === componentData.id)
//       if (componentIndex === -1) {
//         return { success: false, error: "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" }
//       }

//       // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
//       dbData.components[componentIndex] = {
//         ...dbData.components[componentIndex],
//         category_id: componentData.category_id,
//         name: componentData.name,
//         storage_cell: componentData.storage_cell,
//         datasheet_url: componentData.datasheet_url,
//         quantity: componentData.quantity,
//         parameters: componentData.parameters,
//         description: componentData.description,
//         updated_at: new Date().toISOString()
//       }
      
//       if (this.saveDatabase(dbData)) {
//         console.log('‚úÖ Component updated successfully')
//         return { success: true }
//       } else {
//         return { success: false, error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞" }
//       }
//     } catch (error) {
//       console.error('‚ùå updateComponent error:', error)
//       return { success: false, error: error.message }
//     }
//   }

//   deleteComponent(id) {
//     console.log('üìÅ deleteComponent called with id:', id)
//     if (!this.isInitialized) {
//       return { success: false, error: 'Database not initialized' }
//     }

//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData || !dbData.components) {
//         return { success: false, error: "Database corrupted or no components" }
//       }

//       const componentIndex = dbData.components.findIndex(comp => comp.id === id)
//       if (componentIndex === -1) {
//         return { success: false, error: "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" }
//       }

//       dbData.components.splice(componentIndex, 1)
      
//       if (this.saveDatabase(dbData)) {
//         console.log('‚úÖ Component deleted successfully')
//         return { success: true }
//       } else {
//         return { success: false, error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞" }
//       }
//     } catch (error) {
//       console.error('‚ùå deleteComponent error:', error)
//       return { success: false, error: error.message }
//     }
//   }

//   // ===== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====

//   searchComponents(query) {
//     console.log('üìÅ searchComponents called with query:', query)
//     if (!this.isInitialized) {
//       return []
//     }
    
//     if (!query?.trim()) {
//       return []
//     }

//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData || !dbData.components) {
//         return []
//       }

//       const searchTerm = query.trim().toLowerCase()
//       const categories = dbData.categories || []

//       const results = dbData.components.filter(comp => {
//         const compName = comp.name?.toLowerCase() || ''
//         const storageCell = comp.storage_cell?.toLowerCase() || ''
//         const description = comp.description?.toLowerCase() || ''
        
//         const category = categories.find(cat => cat.id === comp.category_id)
//         const categoryName = category?.name?.toLowerCase() || ''

//         return compName.includes(searchTerm) ||
//                storageCell.includes(searchTerm) ||
//                categoryName.includes(searchTerm) ||
//                description.includes(searchTerm)
//       })

//       // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
//       const resultsWithCategories = results.map(comp => {
//         const category = categories.find(cat => cat.id === comp.category_id)
//         return {
//           ...comp,
//           category_name: category ? category.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
//         }
//       })

//       console.log(`‚úÖ Search found ${resultsWithCategories.length} results`)
//       return resultsWithCategories
//     } catch (error) {
//       console.error('‚ùå searchComponents error:', error)
//       return []
//     }
//   }

//   getComponentsByStorage(cell) {
//     console.log('üìÅ getComponentsByStorage called with cell:', cell)
//     if (!this.isInitialized) {
//       return []
//     }
    
//     if (!cell?.trim()) {
//       return []
//     }

//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData || !dbData.components) {
//         return []
//       }

//       const searchCell = cell.trim().toLowerCase()
//       const categories = dbData.categories || []

//       const results = dbData.components.filter(comp => {
//         const storageCell = comp.storage_cell?.toLowerCase() || ''
//         return storageCell === searchCell
//       })

//       // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
//       const resultsWithCategories = results.map(comp => {
//         const category = categories.find(cat => cat.id === comp.category_id)
//         return {
//           ...comp,
//           category_name: category ? category.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
//         }
//       })

//       console.log(`‚úÖ Found ${resultsWithCategories.length} components in storage cell`)
//       return resultsWithCategories
//     } catch (error) {
//       console.error('‚ùå getComponentsByStorage error:', error)
//       return []
//     }
//   }

//   // ===== –£–¢–ò–õ–ò–¢–´ =====

//   getDatabaseStats() {
//     console.log('üìÅ getDatabaseStats called')
//     if (!this.isInitialized) {
//       return {
//         error: 'Database not initialized',
//         dbPath: 'Not available',
//         isInitialized: false
//       }
//     }
    
//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData) {
//         return {
//           error: 'Database corrupted',
//           dbPath: this.dbPath,
//           isInitialized: this.isInitialized
//         }
//       }

//       const categoryCount = dbData.categories ? dbData.categories.length : 0
//       const componentCount = dbData.components ? dbData.components.length : 0
//       const totalQuantity = dbData.components ? 
//         dbData.components.reduce((sum, comp) => sum + (comp.quantity || 0), 0) : 0

//       return {
//         categoryCount,
//         componentCount,
//         totalQuantity,
//         dbPath: this.dbPath,
//         isInitialized: this.isInitialized,
//         lastUpdated: new Date().toISOString()
//       }
//     } catch (error) {
//       console.error('‚ùå getDatabaseStats error:', error)
//       return {
//         error: error.message,
//         dbPath: this.dbPath,
//         isInitialized: this.isInitialized
//       }
//     }
//   }

//   checkDatabaseIntegrity() {
//     if (!this.isInitialized) {
//       return { success: false, error: "Database not initialized" }
//     }
    
//     try {
//       const dbData = this.loadDatabase()
//       if (!dbData) {
//         return { success: false, error: "Database file corrupted or missing" }
//       }

//       const tables = []
//       if (dbData.categories) tables.push('categories')
//       if (dbData.components) tables.push('components')

//       return {
//         success: true,
//         integrity: 'ok',
//         tables: tables,
//         componentCount: dbData.components ? dbData.components.length : 0,
//         isInitialized: this.isInitialized
//       }
//     } catch (error) {
//       console.error("‚ùå Database integrity error:", error)
//       return { success: false, error: error.message }
//     }
//   }

//   // ===== –≠–ö–°–ü–û–†–¢/–ò–ú–ü–û–†–¢ =====

//   exportDatabase(destinationPath) {
//     console.log('üìÅ Exporting database to:', destinationPath)
    
//     try {
//       if (!this.isInitialized || !fs.existsSync(this.dbPath)) {
//         return { success: false, error: 'Database not available for export' }
//       }
      
//       // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//       fs.copyFileSync(this.dbPath, destinationPath)
//       console.log('‚úÖ Database exported successfully')
      
//       return { success: true, path: destinationPath }
//     } catch (error) {
//       console.error('‚ùå Export failed:', error)
//       return { success: false, error: error.message }
//     }
//   }

//   importDatabase(sourcePath) {
//     console.log('üìÅ Importing database from:', sourcePath)
    
//     try {
//       if (!fs.existsSync(sourcePath)) {
//         return { success: false, error: 'Source file not found' }
//       }
      
//       // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã
//       const backupPath = this.dbPath + '.backup'
//       if (fs.existsSync(this.dbPath)) {
//         fs.copyFileSync(this.dbPath, backupPath)
//       }
      
//       // –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—É—é –±–∞–∑—É
//       fs.copyFileSync(sourcePath, this.dbPath)
//       console.log('‚úÖ Database imported successfully')
      
//       return { 
//         success: true, 
//         message: 'Database imported successfully. Previous database backed up.',
//         backupPath: fs.existsSync(backupPath) ? backupPath : null
//       }
//     } catch (error) {
//       console.error('‚ùå Import failed:', error)
//       return { success: false, error: error.message }
//     }
//   }

//   getDatabaseInfo() {
//     try {
//       if (fs.existsSync(this.dbPath)) {
//         const infoStr = fs.readFileSync(this.dbPath, 'utf8')
//         const dbData = JSON.parse(infoStr)
//         return {
//           version: dbData.version || '1.0.0',
//           created: dbData.created || new Date().toISOString(),
//           description: dbData.description || 'RadioBase Components Database',
//           portable: dbData.portable !== undefined ? dbData.portable : true
//         }
//       }
//       return { error: 'Database file not found' }
//     } catch (error) {
//       return { error: error.message }
//     }
//   }

//   close() {
//     console.log('üîß Database close called')
//     this.isInitialized = false
//   }
// }

// export default ComponentsDatabase


















































































































// const Database = require('better-sqlite3');
// const path = require('path');
// const { app } = require('electron');

// class ComponentsDatabase {
//   constructor() {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º userData –ø–∞–ø–∫—É Electron –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î
//     const userDataPath = app.getPath('userData');
//     this.dbPath = path.join(userDataPath, 'components.db');
    
//     // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//     const dbDir = path.dirname(this.dbPath);
//     require('fs').mkdirSync(dbDir, { recursive: true });
    
//     this.db = new Database(this.dbPath);
    
//     // –í–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
//     this.db.pragma('journal_mode = WAL');
//     this.db.pragma('foreign_keys = ON');
//     this.db.pragma('busy_timeout = 5000');
    
//     this.init();
//   }

//   init() {
//     try {
//       this.createTables();
//       this.insertInitialCategories();
//       this.migrateDatabase();
//       console.log('‚úÖ Database initialized at:', this.dbPath);
//     } catch (error) {
//       console.error('‚ùå Database initialization error:', error);
//       throw error;
//     }
//   }

//   createTables() {
//     // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
//     this.db.exec(`
//       CREATE TABLE IF NOT EXISTS categories (
//         id INTEGER PRIMARY KEY AUTOINCREMENT,
//         name TEXT NOT NULL UNIQUE,
//         created_at TEXT DEFAULT CURRENT_TIMESTAMP
//       )
//     `);

//     this.db.exec(`
//       CREATE TABLE IF NOT EXISTS components (
//         id INTEGER PRIMARY KEY AUTOINCREMENT,
//         category_id INTEGER NOT NULL,
//         name TEXT NOT NULL,
//         storage_cell TEXT,
//         datasheet_url TEXT,
//         quantity INTEGER DEFAULT 0,
//         updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
//         parameters TEXT DEFAULT '{}',
//         image_data TEXT,
//         description TEXT,
//         created_at TEXT DEFAULT CURRENT_TIMESTAMP,
//         FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
//       )
//     `);

//     // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_category ON components(category_id)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_name ON components(name)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_storage ON components(storage_cell)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_updated ON components(updated_at)');
//   }

//   insertInitialCategories() {
//     const categories = ["–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã", "–†–µ–∑–∏—Å—Ç–æ—Ä—ã", "–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã", "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã", "–î–∏–æ–¥—ã"];
    
//     const insertStmt = this.db.prepare('INSERT OR IGNORE INTO categories (name) VALUES (?)');
    
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//     const insertMany = this.db.transaction((cats) => {
//       for (const category of cats) {
//         insertStmt.run(category);
//       }
//     });

//     insertMany(categories);
//   }

//   migrateDatabase() {
//     try {
//       const columns = this.db.prepare("PRAGMA table_info(components)").all();
//       const columnNames = columns.map(col => col.name);
      
//       // –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
//       const migrations = [
//         { name: 'storage_cell', type: 'TEXT', default: 'NULL' },
//         { name: 'datasheet_url', type: 'TEXT', default: 'NULL' },
//         { name: 'quantity', type: 'INTEGER', default: '0' },
//         { name: 'updated_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' },
//         { name: 'parameters', type: 'TEXT', default: "'{}'" },
//         { name: 'image_data', type: 'TEXT', default: 'NULL' },
//         { name: 'description', type: 'TEXT', default: 'NULL' },
//         { name: 'created_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' }
//       ];

//       // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
//       const migrate = this.db.transaction(() => {
//         for (const migration of migrations) {
//           if (!columnNames.includes(migration.name)) {
//             this.db.exec(`ALTER TABLE components ADD COLUMN ${migration.name} ${migration.type} DEFAULT ${migration.default}`);
//             console.log(`‚úÖ Added column: ${migration.name}`);
//           }
//         }
//       });

//       migrate();
      
//     } catch (error) {
//       console.error('‚ùå Migration error:', error);
//     }
//   }

//   // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î =====

//   all(sql, params = []) {
//     try {
//       return this.db.prepare(sql).all(params);
//     } catch (error) {
//       console.error('‚ùå Query error (all):', error.message, sql, params);
//       return [];
//     }
//   }

//   get(sql, params = []) {
//     try {
//       return this.db.prepare(sql).get(params) || null;
//     } catch (error) {
//       console.error('‚ùå Query error (get):', error.message, sql, params);
//       return null;
//     }
//   }

//   run(sql, params = []) {
//     try {
//       const result = this.db.prepare(sql).run(params);
//       return {
//         success: true,
//         changes: result.changes,
//         lastInsertRowid: result.lastInsertRowid
//       };
//     } catch (error) {
//       console.error('‚ùå Query error (run):', error.message, sql, params);
//       return { 
//         success: false, 
//         changes: 0, 
//         lastInsertRowid: 0,
//         error: error.message 
//       };
//     }
//   }

//   // ===== API –ö–ê–¢–ï–ì–û–†–ò–ô =====

//   getCategories() {
//     return this.all("SELECT * FROM categories ORDER BY name");
//   }

//   addCategory(name) {
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
//     }

//     const result = this.run("INSERT INTO categories (name) VALUES (?)", [name.trim()]);
    
//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid };
//     }
    
//     return { 
//       success: false, 
//       error: result.error?.includes('UNIQUE') 
//         ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" 
//         : "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     };
//   }

//   updateCategory(id, name) {
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
//     }

//     const result = this.run("UPDATE categories SET name = ? WHERE id = ?", [name.trim(), id]);
    
//     if (result.success && result.changes > 0) {
//       return { success: true };
//     }
    
//     return { 
//       success: false, 
//       error: result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     };
//   }

//   deleteCategory(id) {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º CASCADE –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
//     const result = this.run("DELETE FROM categories WHERE id = ?", [id]);
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : null
//     };
//   }

//   // ===== API –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

//   getComponents(categoryId = null) {
//     if (categoryId) {
//       return this.all(
//         "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.category_id = ? ORDER BY c.name", 
//         [categoryId]
//       );
//     }
//     return this.all("SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id ORDER BY c.name");
//   }

//   getComponent(id) {
//     const component = this.get(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.id = ?
//     `, [id]);
    
//     console.log('üîç Raw component data:', component);
//     console.log('üîç Parameters type:', typeof component?.parameters);
//     console.log('üîç Parameters value:', component?.parameters);
    
//     if (component) {
//       // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
//       if (component.parameters && typeof component.parameters === 'string') {
//         try {
//           component.parameters = JSON.parse(component.parameters);
//           console.log('‚úÖ Successfully parsed parameters:', component.parameters);
//         } catch (error) {
//           console.error('‚ùå JSON parse error:', error);
//           component.parameters = {};
//         }
//       } else {
//         component.parameters = component.parameters || {};
//       }
//     }
    
//     return component;
//   }

//   addComponent(componentData) {
//     // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
//     if (!componentData.category_id || !componentData.name?.trim()) {
//       return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" };
//     }

//     const result = this.run(`
//       INSERT INTO components 
//       (category_id, name, storage_cell, datasheet_url, quantity, updated_at, parameters, image_data, description)
//       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
//     `, [
//       componentData.category_id,
//       componentData.name.trim(),
//       componentData.storage_cell?.trim() || null,
//       componentData.datasheet_url?.trim() || null,
//       Math.max(0, parseInt(componentData.quantity) || 0),
//       componentData.updated_at || new Date().toISOString(),
//       this.serializeParameters(componentData.parameters),
//       componentData.image_data || null,
//       componentData.description?.trim() || null
//     ]);

//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid };
//     }
    
//     return { success: false, error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞" };
//   }

//   updateComponent(componentData) {
//     if (!componentData.id) {
//       return { success: false, error: "ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" };
//     }
  
//     const result = this.run(`
//       UPDATE components 
//       SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, 
//           quantity = ?, updated_at = ?, parameters = ?, image_data = ?, description = ?
//       WHERE id = ?
//     `, [
//       componentData.category_id,
//       componentData.name,
//       componentData.storage_cell,
//       componentData.datasheet_url,
//       componentData.quantity,
//       new Date().toISOString(),
//       JSON.stringify(componentData.parameters),
//       componentData.image_data,
//       componentData.description,
//       componentData.id
//     ]);
  
//     return { 
//       success: result.success, 
//       changes: result.changes,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     };
//   }
  

//   deleteComponent(id) {
//     const result = this.run("DELETE FROM components WHERE id = ?", [id]);
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     };
//   }

//   // ===== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====

//   searchComponents(query) {
//     if (!query?.trim()) return [];
    
//     const searchTerm = `%${query.trim()}%`;
//     return this.all(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.name LIKE ? OR c.storage_cell LIKE ? OR cat.name LIKE ? OR c.description LIKE ?
//       ORDER BY c.name
//     `, [searchTerm, searchTerm, searchTerm, searchTerm]);
//   }

//   getComponentsByStorage(cell) {
//     if (!cell?.trim()) return [];
    
//     return this.all(
//       "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.storage_cell = ? ORDER BY c.name",
//       [cell.trim()]
//     );
//   }

//   // ===== –£–¢–ò–õ–ò–¢–´ =====

//   serializeParameters(parameters) {
//     if (!parameters) return '{}';
//     if (typeof parameters === 'string') {
//       try {
//         // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ JSON —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
//         JSON.parse(parameters);
//         return parameters;
//       } catch {
//         return '{}';
//       }
//     }
//     return JSON.stringify(parameters);
//   }

//   getDatabaseStats() {
//     const categoryCount = this.get("SELECT COUNT(*) as count FROM categories")?.count || 0;
//     const componentCount = this.get("SELECT COUNT(*) as count FROM components")?.count || 0;
//     const totalQuantity = this.get("SELECT SUM(quantity) as total FROM components")?.total || 0;

//     return {
//       categoryCount,
//       componentCount,
//       totalQuantity,
//       dbPath: this.dbPath,
//       lastUpdated: new Date().toISOString()
//     };
//   }

//   checkDatabaseIntegrity() {
//     try {
//       const integrityCheck = this.get("PRAGMA integrity_check");
//       const tables = this.all("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name");
//       const componentCount = this.get("SELECT COUNT(*) as c FROM components")?.c || 0;
      
//       console.log("‚úÖ Database integrity:", integrityCheck);
//       console.log("üìä Database contains tables:", tables.map(t => t.name));
//       console.log("üîß Total components:", componentCount);
      
//       return {
//         success: true,
//         integrity: integrityCheck,
//         tables: tables.map(t => t.name),
//         componentCount
//       };
//     } catch (error) {
//       console.error("‚ùå Database integrity error:", error);
//       return { success: false, error: error.message };
//     }
//   }

//   // ===== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ö–†–´–¢–ò–ï =====

//   optimize() {
//     try {
//       this.db.exec('PRAGMA optimize');
//       this.db.exec('VACUUM');
//       console.log('‚úÖ Database optimized');
//     } catch (error) {
//       console.error('‚ùå Database optimization error:', error);
//     }
//   }

//   backup() {
//     try {
//       const backupPath = this.dbPath + '.backup_' + Date.now();
//       this.db.backup(backupPath);
//       console.log('‚úÖ Database backup created:', backupPath);
//       return backupPath;
//     } catch (error) {
//       console.error('‚ùå Database backup error:', error);
//       return null;
//     }
//   }

//   close() {
//     if (this.db) {
//       this.optimize();
//       this.db.close();
//       console.log('‚úÖ Database closed');
//     }
//   }
// }

// export default ComponentsDatabase;



































































// const Database = require('better-sqlite3');
// const path = require('path');
// const { app } = require('electron');

// class ComponentsDatabase {
//   constructor() {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º userData –ø–∞–ø–∫—É Electron –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î
//     const userDataPath = app.getPath('userData');
//     this.dbPath = path.join(userDataPath, 'components.db');
    
//     // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//     const dbDir = path.dirname(this.dbPath);
//     require('fs').mkdirSync(dbDir, { recursive: true });
    
//     this.db = new Database(this.dbPath);
    
//     // –í–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
//     this.db.pragma('journal_mode = WAL');
//     this.db.pragma('foreign_keys = ON');
//     this.db.pragma('busy_timeout = 5000');
    
//     this.init();
//   }

//   init() {
//     try {
//       this.createTables();
//       this.insertInitialCategories();
//       this.migrateDatabase();
//       console.log('‚úÖ Database initialized at:', this.dbPath);
//     } catch (error) {
//       console.error('‚ùå Database initialization error:', error);
//       throw error;
//     }
//   }

//   createTables() {
//     // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
//     this.db.exec(`
//       CREATE TABLE IF NOT EXISTS categories (
//         id INTEGER PRIMARY KEY AUTOINCREMENT,
//         name TEXT NOT NULL UNIQUE,
//         created_at TEXT DEFAULT CURRENT_TIMESTAMP
//       )
//     `);

//     this.db.exec(`
//       CREATE TABLE IF NOT EXISTS components (
//         id INTEGER PRIMARY KEY AUTOINCREMENT,
//         category_id INTEGER NOT NULL,
//         name TEXT NOT NULL,
//         storage_cell TEXT,
//         datasheet_url TEXT,
//         quantity INTEGER DEFAULT 0,
//         updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
//         parameters TEXT DEFAULT '{}',
//         image_data TEXT,
//         description TEXT,
//         created_at TEXT DEFAULT CURRENT_TIMESTAMP,
//         FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
//       )
//     `);

//     // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_category ON components(category_id)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_name ON components(name)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_storage ON components(storage_cell)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_updated ON components(updated_at)');
//   }

//   insertInitialCategories() {
//     const categories = ["–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã", "–†–µ–∑–∏—Å—Ç–æ—Ä—ã", "–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã", "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã", "–î–∏–æ–¥—ã"];
    
//     const insertStmt = this.db.prepare('INSERT OR IGNORE INTO categories (name) VALUES (?)');
    
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//     const insertMany = this.db.transaction((cats) => {
//       for (const category of cats) {
//         insertStmt.run(category);
//       }
//     });

//     insertMany(categories);
//   }

//   migrateDatabase() {
//     try {
//       const columns = this.db.prepare("PRAGMA table_info(components)").all();
//       const columnNames = columns.map(col => col.name);
      
//       // –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
//       const migrations = [
//         { name: 'storage_cell', type: 'TEXT', default: 'NULL' },
//         { name: 'datasheet_url', type: 'TEXT', default: 'NULL' },
//         { name: 'quantity', type: 'INTEGER', default: '0' },
//         { name: 'updated_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' },
//         { name: 'parameters', type: 'TEXT', default: "'{}'" },
//         { name: 'image_data', type: 'TEXT', default: 'NULL' },
//         { name: 'description', type: 'TEXT', default: 'NULL' },
//         { name: 'created_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' }
//       ];

//       // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
//       const migrate = this.db.transaction(() => {
//         for (const migration of migrations) {
//           if (!columnNames.includes(migration.name)) {
//             this.db.exec(`ALTER TABLE components ADD COLUMN ${migration.name} ${migration.type} DEFAULT ${migration.default}`);
//             console.log(`‚úÖ Added column: ${migration.name}`);
//           }
//         }
//       });

//       migrate();
      
//     } catch (error) {
//       console.error('‚ùå Migration error:', error);
//     }
//   }

//   // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î =====

//   all(sql, params = []) {
//     try {
//       return this.db.prepare(sql).all(params);
//     } catch (error) {
//       console.error('‚ùå Query error (all):', error.message, sql, params);
//       return [];
//     }
//   }

//   get(sql, params = []) {
//     try {
//       return this.db.prepare(sql).get(params) || null;
//     } catch (error) {
//       console.error('‚ùå Query error (get):', error.message, sql, params);
//       return null;
//     }
//   }

//   run(sql, params = []) {
//     try {
//       const result = this.db.prepare(sql).run(params);
//       return {
//         success: true,
//         changes: result.changes,
//         lastInsertRowid: result.lastInsertRowid
//       };
//     } catch (error) {
//       console.error('‚ùå Query error (run):', error.message, sql, params);
//       return { 
//         success: false, 
//         changes: 0, 
//         lastInsertRowid: 0,
//         error: error.message 
//       };
//     }
//   }

//   // ===== API –ö–ê–¢–ï–ì–û–†–ò–ô =====

//   getCategories() {
//     return this.all("SELECT * FROM categories ORDER BY name");
//   }

//   addCategory(name) {
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
//     }

//     const result = this.run("INSERT INTO categories (name) VALUES (?)", [name.trim()]);
    
//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid };
//     }
    
//     return { 
//       success: false, 
//       error: result.error?.includes('UNIQUE') 
//         ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" 
//         : "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     };
//   }

//   updateCategory(id, name) {
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
//     }

//     const result = this.run("UPDATE categories SET name = ? WHERE id = ?", [name.trim(), id]);
    
//     if (result.success && result.changes > 0) {
//       return { success: true };
//     }
    
//     return { 
//       success: false, 
//       error: result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     };
//   }

//   deleteCategory(id) {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º CASCADE –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
//     const result = this.run("DELETE FROM categories WHERE id = ?", [id]);
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : null
//     };
//   }

//   // ===== API –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

//   getComponents(categoryId = null) {
//     if (categoryId) {
//       return this.all(
//         "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.category_id = ? ORDER BY c.name", 
//         [categoryId]
//       );
//     }
//     return this.all("SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id ORDER BY c.name");
//   }

//   getComponent(id) {
//     const component = this.get(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.id = ?
//     `, [id]);
    
//     console.log('üîç Raw component data:', component);
//     console.log('üîç Parameters type:', typeof component?.parameters);
//     console.log('üîç Parameters value:', component?.parameters);
    
//     if (component) {
//       // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
//       if (component.parameters && typeof component.parameters === 'string') {
//         try {
//           component.parameters = JSON.parse(component.parameters);
//           console.log('‚úÖ Successfully parsed parameters:', component.parameters);
//         } catch (error) {
//           console.error('‚ùå JSON parse error:', error);
//           component.parameters = {};
//         }
//       } else {
//         component.parameters = component.parameters || {};
//       }
//     }
    
//     return component;
//   }

//   addComponent(componentData) {
//     // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
//     if (!componentData.category_id || !componentData.name?.trim()) {
//       return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" };
//     }

//     const result = this.run(`
//       INSERT INTO components 
//       (category_id, name, storage_cell, datasheet_url, quantity, updated_at, parameters, image_data, description)
//       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
//     `, [
//       componentData.category_id,
//       componentData.name.trim(),
//       componentData.storage_cell?.trim() || null,
//       componentData.datasheet_url?.trim() || null,
//       Math.max(0, parseInt(componentData.quantity) || 0),
//       componentData.updated_at || new Date().toISOString(),
//       this.serializeParameters(componentData.parameters),
//       componentData.image_data || null,
//       componentData.description?.trim() || null
//     ]);

//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid };
//     }
    
//     return { success: false, error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞" };
//   }

//   updateComponent(componentData) {
//     if (!componentData.id) {
//       return { success: false, error: "ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" };
//     }
  
//     const result = this.run(`
//       UPDATE components 
//       SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, 
//           quantity = ?, updated_at = ?, parameters = ?, image_data = ?, description = ?
//       WHERE id = ?
//     `, [
//       componentData.category_id,
//       componentData.name,
//       componentData.storage_cell,
//       componentData.datasheet_url,
//       componentData.quantity,
//       new Date().toISOString(),
//       JSON.stringify(componentData.parameters),
//       componentData.image_data,
//       componentData.description,
//       componentData.id
//     ]);
  
//     return { 
//       success: result.success, 
//       changes: result.changes,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     };
//   }
  

//   deleteComponent(id) {
//     const result = this.run("DELETE FROM components WHERE id = ?", [id]);
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     };
//   }

//   // ===== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====

//   searchComponents(query) {
//     if (!query?.trim()) return [];
    
//     const searchTerm = `%${query.trim()}%`;
//     return this.all(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.name LIKE ? OR c.storage_cell LIKE ? OR cat.name LIKE ? OR c.description LIKE ?
//       ORDER BY c.name
//     `, [searchTerm, searchTerm, searchTerm, searchTerm]);
//   }

//   getComponentsByStorage(cell) {
//     if (!cell?.trim()) return [];
    
//     return this.all(
//       "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.storage_cell = ? ORDER BY c.name",
//       [cell.trim()]
//     );
//   }

//   // ===== –£–¢–ò–õ–ò–¢–´ =====

//   serializeParameters(parameters) {
//     if (!parameters) return '{}';
//     if (typeof parameters === 'string') {
//       try {
//         // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ JSON —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
//         JSON.parse(parameters);
//         return parameters;
//       } catch {
//         return '{}';
//       }
//     }
//     return JSON.stringify(parameters);
//   }

//   getDatabaseStats() {
//     const categoryCount = this.get("SELECT COUNT(*) as count FROM categories")?.count || 0;
//     const componentCount = this.get("SELECT COUNT(*) as count FROM components")?.count || 0;
//     const totalQuantity = this.get("SELECT SUM(quantity) as total FROM components")?.total || 0;

//     return {
//       categoryCount,
//       componentCount,
//       totalQuantity,
//       dbPath: this.dbPath,
//       lastUpdated: new Date().toISOString()
//     };
//   }

//   checkDatabaseIntegrity() {
//     try {
//       const integrityCheck = this.get("PRAGMA integrity_check");
//       const tables = this.all("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name");
//       const componentCount = this.get("SELECT COUNT(*) as c FROM components")?.c || 0;
      
//       console.log("‚úÖ Database integrity:", integrityCheck);
//       console.log("üìä Database contains tables:", tables.map(t => t.name));
//       console.log("üîß Total components:", componentCount);
      
//       return {
//         success: true,
//         integrity: integrityCheck,
//         tables: tables.map(t => t.name),
//         componentCount
//       };
//     } catch (error) {
//       console.error("‚ùå Database integrity error:", error);
//       return { success: false, error: error.message };
//     }
//   }

//   // ===== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ö–†–´–¢–ò–ï =====

//   optimize() {
//     try {
//       this.db.exec('PRAGMA optimize');
//       this.db.exec('VACUUM');
//       console.log('‚úÖ Database optimized');
//     } catch (error) {
//       console.error('‚ùå Database optimization error:', error);
//     }
//   }

//   backup() {
//     try {
//       const backupPath = this.dbPath + '.backup_' + Date.now();
//       this.db.backup(backupPath);
//       console.log('‚úÖ Database backup created:', backupPath);
//       return backupPath;
//     } catch (error) {
//       console.error('‚ùå Database backup error:', error);
//       return null;
//     }
//   }

//   close() {
//     if (this.db) {
//       this.optimize();
//       this.db.close();
//       console.log('‚úÖ Database closed');
//     }
//   }
// }

// export default ComponentsDatabase;









































// const Database = require('better-sqlite3');
// const path = require('path');
// const { app } = require('electron');

// class ComponentsDatabase {
//   constructor() {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º userData –ø–∞–ø–∫—É Electron –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î
//     const userDataPath = app.getPath('userData');
//     this.dbPath = path.join(userDataPath, 'components.db');
    
//     // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//     const dbDir = path.dirname(this.dbPath);
//     require('fs').mkdirSync(dbDir, { recursive: true });
    
//     this.db = new Database(this.dbPath);
    
//     // –í–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
//     this.db.pragma('journal_mode = WAL');
//     this.db.pragma('foreign_keys = ON');
//     this.db.pragma('busy_timeout = 5000');
    
//     this.init();
//   }

//   init() {
//     try {
//       this.createTables();
//       this.insertInitialCategories();
//       this.migrateDatabase();
//       console.log('‚úÖ Database initialized at:', this.dbPath);
//     } catch (error) {
//       console.error('‚ùå Database initialization error:', error);
//       throw error;
//     }
//   }

//   createTables() {
//     // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
//     this.db.exec(`
//       CREATE TABLE IF NOT EXISTS categories (
//         id INTEGER PRIMARY KEY AUTOINCREMENT,
//         name TEXT NOT NULL UNIQUE,
//         created_at TEXT DEFAULT CURRENT_TIMESTAMP
//       )
//     `);

//     this.db.exec(`
//       CREATE TABLE IF NOT EXISTS components (
//         id INTEGER PRIMARY KEY AUTOINCREMENT,
//         category_id INTEGER NOT NULL,
//         name TEXT NOT NULL,
//         storage_cell TEXT,
//         datasheet_url TEXT,
//         quantity INTEGER DEFAULT 0,
//         updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
//         parameters TEXT DEFAULT '{}',
//         image_data TEXT,
//         description TEXT,
//         created_at TEXT DEFAULT CURRENT_TIMESTAMP,
//         FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
//       )
//     `);

//     // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_category ON components(category_id)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_name ON components(name)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_storage ON components(storage_cell)');
//     this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_updated ON components(updated_at)');
//   }

//   insertInitialCategories() {
//     const categories = ["–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã", "–†–µ–∑–∏—Å—Ç–æ—Ä—ã", "–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã", "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã", "–î–∏–æ–¥—ã"];
    
//     const insertStmt = this.db.prepare('INSERT OR IGNORE INTO categories (name) VALUES (?)');
    
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//     const insertMany = this.db.transaction((cats) => {
//       for (const category of cats) {
//         insertStmt.run(category);
//       }
//     });

//     insertMany(categories);
//   }

//   migrateDatabase() {
//     try {
//       const columns = this.db.prepare("PRAGMA table_info(components)").all();
//       const columnNames = columns.map(col => col.name);
      
//       // –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
//       const migrations = [
//         { name: 'storage_cell', type: 'TEXT', default: 'NULL' },
//         { name: 'datasheet_url', type: 'TEXT', default: 'NULL' },
//         { name: 'quantity', type: 'INTEGER', default: '0' },
//         { name: 'updated_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' },
//         { name: 'parameters', type: 'TEXT', default: "'{}'" },
//         { name: 'image_data', type: 'TEXT', default: 'NULL' },
//         { name: 'description', type: 'TEXT', default: 'NULL' },
//         { name: 'created_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' }
//       ];

//       // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
//       const migrate = this.db.transaction(() => {
//         for (const migration of migrations) {
//           if (!columnNames.includes(migration.name)) {
//             this.db.exec(`ALTER TABLE components ADD COLUMN ${migration.name} ${migration.type} DEFAULT ${migration.default}`);
//             console.log(`‚úÖ Added column: ${migration.name}`);
//           }
//         }
//       });

//       migrate();
      
//     } catch (error) {
//       console.error('‚ùå Migration error:', error);
//     }
//   }

//   // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î =====

//   all(sql, params = []) {
//     try {
//       return this.db.prepare(sql).all(params);
//     } catch (error) {
//       console.error('‚ùå Query error (all):', error.message, sql, params);
//       return [];
//     }
//   }

//   get(sql, params = []) {
//     try {
//       return this.db.prepare(sql).get(params) || null;
//     } catch (error) {
//       console.error('‚ùå Query error (get):', error.message, sql, params);
//       return null;
//     }
//   }

//   run(sql, params = []) {
//     try {
//       const result = this.db.prepare(sql).run(params);
//       return {
//         success: true,
//         changes: result.changes,
//         lastInsertRowid: result.lastInsertRowid
//       };
//     } catch (error) {
//       console.error('‚ùå Query error (run):', error.message, sql, params);
//       return { 
//         success: false, 
//         changes: 0, 
//         lastInsertRowid: 0,
//         error: error.message 
//       };
//     }
//   }

//   // ===== API –ö–ê–¢–ï–ì–û–†–ò–ô =====

//   getCategories() {
//     return this.all("SELECT * FROM categories ORDER BY name");
//   }

//   addCategory(name) {
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
//     }

//     const result = this.run("INSERT INTO categories (name) VALUES (?)", [name.trim()]);
    
//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid };
//     }
    
//     return { 
//       success: false, 
//       error: result.error?.includes('UNIQUE') 
//         ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" 
//         : "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     };
//   }

//   updateCategory(id, name) {
//     if (!name || !name.trim()) {
//       return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
//     }

//     const result = this.run("UPDATE categories SET name = ? WHERE id = ?", [name.trim(), id]);
    
//     if (result.success && result.changes > 0) {
//       return { success: true };
//     }
    
//     return { 
//       success: false, 
//       error: result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
//     };
//   }

//   deleteCategory(id) {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º CASCADE –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
//     const result = this.run("DELETE FROM categories WHERE id = ?", [id]);
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : null
//     };
//   }

//   // ===== API –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

//   getComponents(categoryId = null) {
//     if (categoryId) {
//       return this.all(
//         "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.category_id = ? ORDER BY c.name", 
//         [categoryId]
//       );
//     }
//     return this.all("SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id ORDER BY c.name");
//   }

//   getComponent(id) {
//     const component = this.get(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.id = ?
//     `, [id]);
    
//     console.log('üîç Raw component data:', component);
//     console.log('üîç Parameters type:', typeof component?.parameters);
//     console.log('üîç Parameters value:', component?.parameters);
    
//     if (component) {
//       // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
//       if (component.parameters && typeof component.parameters === 'string') {
//         try {
//           component.parameters = JSON.parse(component.parameters);
//           console.log('‚úÖ Successfully parsed parameters:', component.parameters);
//         } catch (error) {
//           console.error('‚ùå JSON parse error:', error);
//           component.parameters = {};
//         }
//       } else {
//         component.parameters = component.parameters || {};
//       }
//     }
    
//     return component;
//   }

//   addComponent(componentData) {
//     // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
//     if (!componentData.category_id || !componentData.name?.trim()) {
//       return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" };
//     }

//     const result = this.run(`
//       INSERT INTO components 
//       (category_id, name, storage_cell, datasheet_url, quantity, updated_at, parameters, image_data, description)
//       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
//     `, [
//       componentData.category_id,
//       componentData.name.trim(),
//       componentData.storage_cell?.trim() || null,
//       componentData.datasheet_url?.trim() || null,
//       Math.max(0, parseInt(componentData.quantity) || 0),
//       componentData.updated_at || new Date().toISOString(),
//       this.serializeParameters(componentData.parameters),
//       componentData.image_data || null,
//       componentData.description?.trim() || null
//     ]);

//     if (result.success && result.changes > 0) {
//       return { success: true, id: result.lastInsertRowid };
//     }
    
//     return { success: false, error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞" };
//   }

//   updateComponent(componentData) {
//     if (!componentData.id) {
//       return { success: false, error: "ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" };
//     }
  
//     const result = this.run(`
//       UPDATE components 
//       SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, 
//           quantity = ?, updated_at = ?, parameters = ?, image_data = ?, description = ?
//       WHERE id = ?
//     `, [
//       componentData.category_id,
//       componentData.name,
//       componentData.storage_cell,
//       componentData.datasheet_url,
//       componentData.quantity,
//       new Date().toISOString(),
//       JSON.stringify(componentData.parameters),
//       componentData.image_data,
//       componentData.description,
//       componentData.id
//     ]);
  
//     return { 
//       success: result.success, 
//       changes: result.changes,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     };
//   }
  

//   deleteComponent(id) {
//     const result = this.run("DELETE FROM components WHERE id = ?", [id]);
//     return { 
//       success: result.success && result.changes > 0,
//       error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
//     };
//   }

//   // ===== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====

//   searchComponents(query) {
//     if (!query?.trim()) return [];
    
//     const searchTerm = `%${query.trim()}%`;
//     return this.all(`
//       SELECT c.*, cat.name as category_name 
//       FROM components c 
//       LEFT JOIN categories cat ON c.category_id = cat.id 
//       WHERE c.name LIKE ? OR c.storage_cell LIKE ? OR cat.name LIKE ? OR c.description LIKE ?
//       ORDER BY c.name
//     `, [searchTerm, searchTerm, searchTerm, searchTerm]);
//   }

//   getComponentsByStorage(cell) {
//     if (!cell?.trim()) return [];
    
//     return this.all(
//       "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.storage_cell = ? ORDER BY c.name",
//       [cell.trim()]
//     );
//   }

//   // ===== –£–¢–ò–õ–ò–¢–´ =====

//   serializeParameters(parameters) {
//     if (!parameters) return '{}';
//     if (typeof parameters === 'string') {
//       try {
//         // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ JSON —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
//         JSON.parse(parameters);
//         return parameters;
//       } catch {
//         return '{}';
//       }
//     }
//     return JSON.stringify(parameters);
//   }

//   getDatabaseStats() {
//     const categoryCount = this.get("SELECT COUNT(*) as count FROM categories")?.count || 0;
//     const componentCount = this.get("SELECT COUNT(*) as count FROM components")?.count || 0;
//     const totalQuantity = this.get("SELECT SUM(quantity) as total FROM components")?.total || 0;

//     return {
//       categoryCount,
//       componentCount,
//       totalQuantity,
//       dbPath: this.dbPath,
//       lastUpdated: new Date().toISOString()
//     };
//   }

//   checkDatabaseIntegrity() {
//     try {
//       const integrityCheck = this.get("PRAGMA integrity_check");
//       const tables = this.all("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name");
//       const componentCount = this.get("SELECT COUNT(*) as c FROM components")?.c || 0;
      
//       console.log("‚úÖ Database integrity:", integrityCheck);
//       console.log("üìä Database contains tables:", tables.map(t => t.name));
//       console.log("üîß Total components:", componentCount);
      
//       return {
//         success: true,
//         integrity: integrityCheck,
//         tables: tables.map(t => t.name),
//         componentCount
//       };
//     } catch (error) {
//       console.error("‚ùå Database integrity error:", error);
//       return { success: false, error: error.message };
//     }
//   }

//   // ===== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ö–†–´–¢–ò–ï =====

//   optimize() {
//     try {
//       this.db.exec('PRAGMA optimize');
//       this.db.exec('VACUUM');
//       console.log('‚úÖ Database optimized');
//     } catch (error) {
//       console.error('‚ùå Database optimization error:', error);
//     }
//   }

//   backup() {
//     try {
//       const backupPath = this.dbPath + '.backup_' + Date.now();
//       this.db.backup(backupPath);
//       console.log('‚úÖ Database backup created:', backupPath);
//       return backupPath;
//     } catch (error) {
//       console.error('‚ùå Database backup error:', error);
//       return null;
//     }
//   }

//   close() {
//     if (this.db) {
//       this.optimize();
//       this.db.close();
//       console.log('‚úÖ Database closed');
//     }
//   }
// }

// export default ComponentsDatabase;






























































































const initSqlJs = require('sql.js');
const fs = require('fs');
const path = require('path');
const { app } = require('electron');

class ComponentsDatabase {
  constructor() {
    this.db = null;
    this.dbPath = null;
    this.initPromise = this.initialize();
  }

  async initialize() {
    try {
      // –î–ª—è portable –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ .exe —Ñ–∞–π–ª–∞
      let basePath;
      
      if (app.isPackaged) {
        // –í portable –≤–µ—Ä—Å–∏–∏ process.execPath —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É .exe —Ñ–∞–π–ª—É
        const originalExecPath = process.env.PORTABLE_EXECUTABLE_FILE || process.execPath;
        basePath = path.dirname(originalExecPath);
        console.log('üìÅ Original executable path:', originalExecPath);
        console.log('üìÅ Base directory for database:', basePath);
      } else {
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        basePath = app.getAppPath();
      }
      
      const dbDir = path.join(basePath, 'Database');
      
      console.log('üìÅ Database directory:', dbDir);

      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É Database –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!fs.existsSync(dbDir)) {
        fs.mkdirSync(dbDir, { recursive: true });
        console.log('‚úÖ Created database directory');
      }
      
      this.dbPath = path.join(dbDir, 'radiodata.db');
      console.log('üìÅ Final database path:', this.dbPath);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SQL.js
      const SQL = await initSqlJs();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
      if (fs.existsSync(this.dbPath)) {
        console.log('‚úÖ Loading existing database');
        const fileBuffer = fs.readFileSync(this.dbPath);
        this.db = new SQL.Database(fileBuffer);
      } else {
        console.log('üÜï Creating new database');
        this.db = new SQL.Database();
        this.createTables();
        this.insertInitialCategories();
        this.saveToFile();
      }

      console.log('‚úÖ Database initialized successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Database initialization error:', error);
      throw error;
    }
  }

 // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–î –≤ —Ñ–∞–π–ª
 saveToFile() {
  if (this.db && this.dbPath) {
    try {
      const data = this.db.export();
      const buffer = Buffer.from(data);
      fs.writeFileSync(this.dbPath, buffer);
      console.log('üíæ Database saved to file:', this.dbPath);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
      const exists = fs.existsSync(this.dbPath);
      console.log('üîç Database file exists after save:', exists);
      if (exists) {
        const stats = fs.statSync(this.dbPath);
        console.log('üìä Database file size:', stats.size, 'bytes');
      }
    } catch (error) {
      console.error('‚ùå Error saving database:', error);
    }
  }
}

  createTables() {
    const sql = `
      CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL UNIQUE,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE IF NOT EXISTS components (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        category_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        storage_cell TEXT,
        datasheet_url TEXT,
        quantity INTEGER DEFAULT 0,
        updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
        parameters TEXT DEFAULT '{}',
        image_data TEXT,
        description TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
      );

      CREATE INDEX IF NOT EXISTS idx_components_category ON components(category_id);
      CREATE INDEX IF NOT EXISTS idx_components_name ON components(name);
      CREATE INDEX IF NOT EXISTS idx_components_storage ON components(storage_cell);
      CREATE INDEX IF NOT EXISTS idx_components_updated ON components(updated_at);
    `;

    this.db.exec(sql);
  }

  insertInitialCategories() {
    const categories = ["–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã", "–†–µ–∑–∏—Å—Ç–æ—Ä—ã", "–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã", "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã", "–î–∏–æ–¥—ã"];
    
    const stmt = this.db.prepare('INSERT OR IGNORE INTO categories (name) VALUES (?)');
    
    categories.forEach(category => {
      stmt.run([category]);
    });
    
    stmt.free();
    this.saveToFile();
  }

  // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  all(sql, params = []) {
    try {
      const stmt = this.db.prepare(sql);
      stmt.bind(params);
      const results = [];
      while (stmt.step()) {
        results.push(stmt.getAsObject());
      }
      stmt.free();
      return results;
    } catch (error) {
      console.error('‚ùå Query error (all):', error.message, sql, params);
      return [];
    }
  }

  get(sql, params = []) {
    try {
      const stmt = this.db.prepare(sql);
      stmt.bind(params);
      const result = stmt.step() ? stmt.getAsObject() : null;
      stmt.free();
      return result;
    } catch (error) {
      console.error('‚ùå Query error (get):', error.message, sql, params);
      return null;
    }
  }

  run(sql, params = []) {
    try {
      const stmt = this.db.prepare(sql);
      stmt.bind(params);
      stmt.step();
      const changes = this.db.getRowsModified();
      stmt.free();
      
      // –ü–æ–ª—É—á–∞–µ–º lastInsertRowid –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      const lastIdResult = this.get("SELECT last_insert_rowid() as id");
      
      this.saveToFile(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
      
      return {
        success: true,
        changes: changes,
        lastInsertRowid: lastIdResult ? lastIdResult.id : 0
      };
    } catch (error) {
      console.error('‚ùå Query error (run):', error.message, sql, params);
      return { 
        success: false, 
        changes: 0, 
        lastInsertRowid: 0,
        error: error.message 
      };
    }
  }

  // ===== API –ö–ê–¢–ï–ì–û–†–ò–ô =====

  getCategories() {
    return this.all("SELECT * FROM categories ORDER BY name");
  }

  addCategory(name) {
    if (!name || !name.trim()) {
      return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
    }

    const result = this.run("INSERT INTO categories (name) VALUES (?)", [name.trim()]);
    
    if (result.success && result.changes > 0) {
      return { success: true, id: result.lastInsertRowid };
    }
    
    return { 
      success: false, 
      error: result.error?.includes('UNIQUE') 
        ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" 
        : "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
    };
  }

  updateCategory(id, name) {
    if (!name || !name.trim()) {
      return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
    }

    const result = this.run("UPDATE categories SET name = ? WHERE id = ?", [name.trim(), id]);
    
    if (result.success && result.changes > 0) {
      return { success: true };
    }
    
    return { 
      success: false, 
      error: result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
    };
  }

  deleteCategory(id) {
    const result = this.run("DELETE FROM categories WHERE id = ?", [id]);
    return { 
      success: result.success && result.changes > 0,
      error: result.success && result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : null
    };
  }

  // ===== API –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

  getComponents(categoryId = null) {
    if (categoryId) {
      return this.all(
        "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.category_id = ? ORDER BY c.name", 
        [categoryId]
      );
    }
    return this.all("SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id ORDER BY c.name");
  }

  getComponent(id) {
    const component = this.get(`
      SELECT c.*, cat.name as category_name 
      FROM components c 
      LEFT JOIN categories cat ON c.category_id = cat.id 
      WHERE c.id = ?
    `, [id]);
    
    if (component && component.parameters && typeof component.parameters === 'string') {
      try {
        component.parameters = JSON.parse(component.parameters);
      } catch (error) {
        console.error('‚ùå JSON parse error:', error);
        component.parameters = {};
      }
    } else if (component) {
      component.parameters = component.parameters || {};
    }
    
    return component;
  }

  addComponent(componentData) {
    if (!componentData.category_id || !componentData.name?.trim()) {
      return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" };
    }

    const result = this.run(`
      INSERT INTO components 
      (category_id, name, storage_cell, datasheet_url, quantity, updated_at, parameters, image_data, description)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      componentData.category_id,
      componentData.name.trim(),
      componentData.storage_cell?.trim() || null,
      componentData.datasheet_url?.trim() || null,
      Math.max(0, parseInt(componentData.quantity) || 0),
      componentData.updated_at || new Date().toISOString(),
      this.serializeParameters(componentData.parameters),
      componentData.image_data || null,
      componentData.description?.trim() || null
    ]);

    if (result.success && result.changes > 0) {
      return { success: true, id: result.lastInsertRowid };
    }
    
    return { success: false, error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞" };
  }

  updateComponent(componentData) {
    if (!componentData.id) {
      return { success: false, error: "ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" };
    }
  
    const result = this.run(`
      UPDATE components 
      SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, 
          quantity = ?, updated_at = ?, parameters = ?, image_data = ?, description = ?
      WHERE id = ?
    `, [
      componentData.category_id,
      componentData.name,
      componentData.storage_cell,
      componentData.datasheet_url,
      componentData.quantity,
      new Date().toISOString(),
      JSON.stringify(componentData.parameters),
      componentData.image_data,
      componentData.description,
      componentData.id
    ]);
  
    return { 
      success: result.success, 
      changes: result.changes,
      error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
    };
  }

  deleteComponent(id) {
    const result = this.run("DELETE FROM components WHERE id = ?", [id]);
    return { 
      success: result.success && result.changes > 0,
      error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
    };
  }

  // ===== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====

  searchComponents(query) {
    if (!query?.trim()) return [];
    
    const searchTerm = `%${query.trim()}%`;
    return this.all(`
      SELECT c.*, cat.name as category_name 
      FROM components c 
      LEFT JOIN categories cat ON c.category_id = cat.id 
      WHERE c.name LIKE ? OR c.storage_cell LIKE ? OR cat.name LIKE ? OR c.description LIKE ?
      ORDER BY c.name
    `, [searchTerm, searchTerm, searchTerm, searchTerm]);
  }

  // ===== –£–¢–ò–õ–ò–¢–´ =====

  serializeParameters(parameters) {
    if (!parameters) return '{}';
    if (typeof parameters === 'string') {
      try {
        JSON.parse(parameters);
        return parameters;
      } catch {
        return '{}';
      }
    }
    return JSON.stringify(parameters);
  }

  getDatabaseStats() {
    const categoryCount = this.get("SELECT COUNT(*) as count FROM categories")?.count || 0;
    const componentCount = this.get("SELECT COUNT(*) as count FROM components")?.count || 0;
    const totalQuantity = this.get("SELECT SUM(quantity) as total FROM components")?.total || 0;

    return {
      categoryCount,
      componentCount,
      totalQuantity,
      dbPath: this.dbPath,
      lastUpdated: new Date().toISOString()
    };
  }

  checkDatabaseIntegrity() {
    try {
      const integrityCheck = this.all("PRAGMA integrity_check");
      const tables = this.all("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name");
      const componentCount = this.get("SELECT COUNT(*) as c FROM components")?.c || 0;
      
      console.log("‚úÖ Database integrity:", integrityCheck);
      console.log("üìä Database contains tables:", tables.map(t => t.name));
      console.log("üîß Total components:", componentCount);
      
      return {
        success: true,
        integrity: integrityCheck,
        tables: tables.map(t => t.name),
        componentCount
      };
    } catch (error) {
      console.error("‚ùå Database integrity error:", error);
      return { success: false, error: error.message };
    }
  }

  // ===== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ö–†–´–¢–ò–ï =====

  optimize() {
    try {
      this.db.exec('PRAGMA optimize');
      this.saveToFile();
      console.log('‚úÖ Database optimized');
    } catch (error) {
      console.error('‚ùå Database optimization error:', error);
    }
  }

  backup() {
    try {
      const backupPath = this.dbPath + '.backup_' + Date.now();
      const data = this.db.export();
      const buffer = Buffer.from(data);
      fs.writeFileSync(backupPath, buffer);
      console.log('‚úÖ Database backup created:', backupPath);
      return backupPath;
    } catch (error) {
      console.error('‚ùå Database backup error:', error);
      return null;
    }
  }

  close() {
    if (this.db) {
      this.optimize();
      this.db.close();
      console.log('‚úÖ Database closed');
    }
  }
}

export default ComponentsDatabase;
