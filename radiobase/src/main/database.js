const initSqlJs = require('sql.js');
const fs = require('fs');
const path = require('path');
const { app } = require('electron');

class ComponentsDatabase {
  constructor() {
    this.db = null;
    this.dbPath = null;
    this.initPromise = this.initialize();
  }

  async initialize() {
    try {
      // –î–ª—è portable –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ .exe —Ñ–∞–π–ª–∞
      let basePath;
      
      if (app.isPackaged) {
        // –í portable –≤–µ—Ä—Å–∏–∏ process.execPath —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É .exe —Ñ–∞–π–ª—É
        const originalExecPath = process.env.PORTABLE_EXECUTABLE_FILE || process.execPath;
        basePath = path.dirname(originalExecPath);
        console.log('üìÅ Original executable path:', originalExecPath);
        console.log('üìÅ Base directory for database:', basePath);
      } else {
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        basePath = app.getAppPath();
      }
      
      const dbDir = path.join(basePath, 'Database');
      
      console.log('üìÅ Database directory:', dbDir);

      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É Database –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!fs.existsSync(dbDir)) {
        fs.mkdirSync(dbDir, { recursive: true });
        console.log('‚úÖ Created database directory');
      }
      
      this.dbPath = path.join(dbDir, 'radiodata.db');
      console.log('üìÅ Final database path:', this.dbPath);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SQL.js
      const SQL = await initSqlJs();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
      if (fs.existsSync(this.dbPath)) {
        console.log('‚úÖ Loading existing database');
        const fileBuffer = fs.readFileSync(this.dbPath);
        this.db = new SQL.Database(fileBuffer);
      } else {
        console.log('üÜï Creating new database');
        this.db = new SQL.Database();
        this.createTables();
        this.insertInitialCategories();
        this.saveToFile();
      }

      console.log('‚úÖ Database initialized successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Database initialization error:', error);
      throw error;
    }
  }

 // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–î –≤ —Ñ–∞–π–ª
 saveToFile() {
  if (this.db && this.dbPath) {
    try {
      const data = this.db.export();
      const buffer = Buffer.from(data);
      fs.writeFileSync(this.dbPath, buffer);
      console.log('üíæ Database saved to file:', this.dbPath);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
      const exists = fs.existsSync(this.dbPath);
      console.log('üîç Database file exists after save:', exists);
      if (exists) {
        const stats = fs.statSync(this.dbPath);
        console.log('üìä Database file size:', stats.size, 'bytes');
      }
    } catch (error) {
      console.error('‚ùå Error saving database:', error);
    }
  }
}

  createTables() {
    const sql = `
      CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL UNIQUE,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE IF NOT EXISTS components (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        category_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        storage_cell TEXT,
        datasheet_url TEXT,
        quantity INTEGER DEFAULT 0,
        updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
        parameters TEXT DEFAULT '{}',
        image_data TEXT,
        description TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
      );

      CREATE INDEX IF NOT EXISTS idx_components_category ON components(category_id);
      CREATE INDEX IF NOT EXISTS idx_components_name ON components(name);
      CREATE INDEX IF NOT EXISTS idx_components_storage ON components(storage_cell);
      CREATE INDEX IF NOT EXISTS idx_components_updated ON components(updated_at);
    `;

    this.db.exec(sql);
  }

  insertInitialCategories() {
    const categories = ["–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã", "–†–µ–∑–∏—Å—Ç–æ—Ä—ã", "–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã", "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã", "–î–∏–æ–¥—ã"];
    
    const stmt = this.db.prepare('INSERT OR IGNORE INTO categories (name) VALUES (?)');
    
    categories.forEach(category => {
      stmt.run([category]);
    });
    
    stmt.free();
    this.saveToFile();
  }

  // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  all(sql, params = []) {
    try {
      const stmt = this.db.prepare(sql);
      stmt.bind(params);
      const results = [];
      while (stmt.step()) {
        results.push(stmt.getAsObject());
      }
      stmt.free();
      return results;
    } catch (error) {
      console.error('‚ùå Query error (all):', error.message, sql, params);
      return [];
    }
  }

  get(sql, params = []) {
    try {
      const stmt = this.db.prepare(sql);
      stmt.bind(params);
      const result = stmt.step() ? stmt.getAsObject() : null;
      stmt.free();
      return result;
    } catch (error) {
      console.error('‚ùå Query error (get):', error.message, sql, params);
      return null;
    }
  }

  run(sql, params = []) {
    try {
      const stmt = this.db.prepare(sql);
      stmt.bind(params);
      stmt.step();
      const changes = this.db.getRowsModified();
      stmt.free();
      
      // –ü–æ–ª—É—á–∞–µ–º lastInsertRowid –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      const lastIdResult = this.get("SELECT last_insert_rowid() as id");
      
      this.saveToFile(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
      
      return {
        success: true,
        changes: changes,
        lastInsertRowid: lastIdResult ? lastIdResult.id : 0
      };
    } catch (error) {
      console.error('‚ùå Query error (run):', error.message, sql, params);
      return { 
        success: false, 
        changes: 0, 
        lastInsertRowid: 0,
        error: error.message 
      };
    }
  }

  // ===== API –ö–ê–¢–ï–ì–û–†–ò–ô =====

  getCategories() {
    return this.all("SELECT * FROM categories ORDER BY name");
  }

  addCategory(name) {
    if (!name || !name.trim()) {
      return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
    }

    const result = this.run("INSERT INTO categories (name) VALUES (?)", [name.trim()]);
    
    if (result.success && result.changes > 0) {
      return { success: true, id: result.lastInsertRowid };
    }
    
    return { 
      success: false, 
      error: result.error?.includes('UNIQUE') 
        ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" 
        : "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
    };
  }

  updateCategory(id, name) {
    if (!name || !name.trim()) {
      return { success: false, error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" };
    }

    const result = this.run("UPDATE categories SET name = ? WHERE id = ?", [name.trim(), id]);
    
    if (result.success && result.changes > 0) {
      return { success: true };
    }
    
    return { 
      success: false, 
      error: result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" 
    };
  }

  deleteCategory(id) {
    const result = this.run("DELETE FROM categories WHERE id = ?", [id]);
    return { 
      success: result.success && result.changes > 0,
      error: result.success && result.changes === 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : null
    };
  }

  // ===== API –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

  getComponents(categoryId = null) {
    if (categoryId) {
      return this.all(
        "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.category_id = ? ORDER BY c.name", 
        [categoryId]
      );
    }
    return this.all("SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id ORDER BY c.name");
  }

  getComponent(id) {
    const component = this.get(`
      SELECT c.*, cat.name as category_name 
      FROM components c 
      LEFT JOIN categories cat ON c.category_id = cat.id 
      WHERE c.id = ?
    `, [id]);
    
    if (component && component.parameters && typeof component.parameters === 'string') {
      try {
        component.parameters = JSON.parse(component.parameters);
      } catch (error) {
        console.error('‚ùå JSON parse error:', error);
        component.parameters = {};
      }
    } else if (component) {
      component.parameters = component.parameters || {};
    }
    
    return component;
  }

  addComponent(componentData) {
    if (!componentData.category_id || !componentData.name?.trim()) {
      return { success: false, error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" };
    }

    const result = this.run(`
      INSERT INTO components 
      (category_id, name, storage_cell, datasheet_url, quantity, updated_at, parameters, image_data, description)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      componentData.category_id,
      componentData.name.trim(),
      componentData.storage_cell?.trim() || null,
      componentData.datasheet_url?.trim() || null,
      Math.max(0, parseInt(componentData.quantity) || 0),
      componentData.updated_at || new Date().toISOString(),
      this.serializeParameters(componentData.parameters),
      componentData.image_data || null,
      componentData.description?.trim() || null
    ]);

    if (result.success && result.changes > 0) {
      return { success: true, id: result.lastInsertRowid };
    }
    
    return { success: false, error: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞" };
  }

  updateComponent(componentData) {
    if (!componentData.id) {
      return { success: false, error: "ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" };
    }
  
    const result = this.run(`
      UPDATE components 
      SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, 
          quantity = ?, updated_at = ?, parameters = ?, image_data = ?, description = ?
      WHERE id = ?
    `, [
      componentData.category_id,
      componentData.name,
      componentData.storage_cell,
      componentData.datasheet_url,
      componentData.quantity,
      new Date().toISOString(),
      JSON.stringify(componentData.parameters),
      componentData.image_data,
      componentData.description,
      componentData.id
    ]);
  
    return { 
      success: result.success, 
      changes: result.changes,
      error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
    };
  }

  deleteComponent(id) {
    const result = this.run("DELETE FROM components WHERE id = ?", [id]);
    return { 
      success: result.success && result.changes > 0,
      error: result.success && result.changes === 0 ? "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" : null
    };
  }

  // ===== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====

  searchComponents(query) {
    if (!query?.trim()) return [];
    
    const searchTerm = `%${query.trim()}%`;
    return this.all(`
      SELECT c.*, cat.name as category_name 
      FROM components c 
      LEFT JOIN categories cat ON c.category_id = cat.id 
      WHERE c.name LIKE ? OR c.storage_cell LIKE ? OR cat.name LIKE ? OR c.description LIKE ?
      ORDER BY c.name
    `, [searchTerm, searchTerm, searchTerm, searchTerm]);
  }

  // ===== –£–¢–ò–õ–ò–¢–´ =====

  serializeParameters(parameters) {
    if (!parameters) return '{}';
    if (typeof parameters === 'string') {
      try {
        JSON.parse(parameters);
        return parameters;
      } catch {
        return '{}';
      }
    }
    return JSON.stringify(parameters);
  }

  getDatabaseStats() {
    const categoryCount = this.get("SELECT COUNT(*) as count FROM categories")?.count || 0;
    const componentCount = this.get("SELECT COUNT(*) as count FROM components")?.count || 0;
    const totalQuantity = this.get("SELECT SUM(quantity) as total FROM components")?.total || 0;

    return {
      categoryCount,
      componentCount,
      totalQuantity,
      dbPath: this.dbPath,
      lastUpdated: new Date().toISOString()
    };
  }

  checkDatabaseIntegrity() {
    try {
      const integrityCheck = this.all("PRAGMA integrity_check");
      const tables = this.all("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name");
      const componentCount = this.get("SELECT COUNT(*) as c FROM components")?.c || 0;
      
      console.log("‚úÖ Database integrity:", integrityCheck);
      console.log("üìä Database contains tables:", tables.map(t => t.name));
      console.log("üîß Total components:", componentCount);
      
      return {
        success: true,
        integrity: integrityCheck,
        tables: tables.map(t => t.name),
        componentCount
      };
    } catch (error) {
      console.error("‚ùå Database integrity error:", error);
      return { success: false, error: error.message };
    }
  }

  // ===== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ö–†–´–¢–ò–ï =====

  optimize() {
    try {
      this.db.exec('PRAGMA optimize');
      this.saveToFile();
      console.log('‚úÖ Database optimized');
    } catch (error) {
      console.error('‚ùå Database optimization error:', error);
    }
  }

  backup() {
    try {
      const backupPath = this.dbPath + '.backup_' + Date.now();
      const data = this.db.export();
      const buffer = Buffer.from(data);
      fs.writeFileSync(backupPath, buffer);
      console.log('‚úÖ Database backup created:', backupPath);
      return backupPath;
    } catch (error) {
      console.error('‚ùå Database backup error:', error);
      return null;
    }
  }

  close() {
    if (this.db) {
      this.optimize();
      this.db.close();
      console.log('‚úÖ Database closed');
    }
  }
}

export default ComponentsDatabase;
