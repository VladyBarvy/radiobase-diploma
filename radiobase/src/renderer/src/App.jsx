// import React, { useState } from 'react';
// import Sidebar from './components/Sidebar';
// import ComponentList from './components/ComponentList';
// import './styles/App.css';
// import chipIcon from './assets/picto-chip.png';

// function App() {
//   const [selectedCategory, setSelectedCategory] = useState(null);
//   const [selectedComponent, setSelectedComponent] = useState(null);

//   const handleComponentSelect = (component) => {
//     setSelectedComponent(component);
//   };

//   const handleEditComponent = (component) => {
//     console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', component);
//     // –ó–¥–µ—Å—å –≤—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
//     // –ù–∞–ø—Ä–∏–º–µ—Ä: setEditingComponent(component); setIsEditModalOpen(true);
//   };

//   return (
//     <div className="app">
//       <Sidebar
//         selectedCategory={selectedCategory}
//         onCategorySelect={setSelectedCategory}
//         onComponentSelect={handleComponentSelect}
//       />

//       <main className="main-content">
//         <div className="content-wrapper">
//           {selectedComponent ? (
//             <ComponentList
//               category={selectedCategory}
//               component={selectedComponent}
//               onEdit={handleEditComponent}
//             />
//           ) : selectedCategory ? (
//             <div className="welcome-message">
//               <img src={chipIcon} alt="–ú–∏–∫—Ä–æ—Å—Ö–µ–º–∞" className="welcome-icon" />
//               {/* –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: selectedCategory.name –≤–º–µ—Å—Ç–æ selectedCategory */}
//               <h1>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{selectedCategory.name}"</h1>
//               <p>–∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</p>
//               <div className="divider"></div>
//             </div>
//           ) : (
//             <div className="welcome-message">
//               <img src={chipIcon} alt="–ú–∏–∫—Ä–æ—Å—Ö–µ–º–∞" className="welcome-icon" />
//               <h1>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</h1>
//               <p>–∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</p>
//               <div className="divider"></div>
//             </div>
//           )}
//         </div>
//       </main>
//     </div>
//   )
// }

// export default App



import React, { useState } from 'react';
import Sidebar from './components/Sidebar';
import ComponentList from './components/ComponentList';
import ModalAddComponent from './components/ModalAddComponent'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
import './styles/App.css';
import chipIcon from './assets/picto-chip.png';

function App() {
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedComponent, setSelectedComponent] = useState(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingComponent, setEditingComponent] = useState(null);

  const handleComponentSelect = (component) => {
    setSelectedComponent(component);
  };

  const handleEditComponent = (component) => {
    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', component);
    setEditingComponent(component);
    setIsEditModalOpen(true);
  };

  // const handleSaveComponent = async (componentData) => {
  //   try {
  //     // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  //     console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', componentData);

  //     // TODO: –í—ã–∑–≤–∞—Ç—å API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  //     // await updateComponent(componentData);

  //     // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ–∫—É—â–∏–π
  //     if (selectedComponent && selectedComponent.id === componentData.id) {
  //       setSelectedComponent(componentData);
  //     }

  //     // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  //     setIsEditModalOpen(false);
  //     setEditingComponent(null);

  //     // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
  //     alert('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');

  //   } catch (error) {
  //     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
  //     alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
  //   }
  // };


  const handleSaveComponent = async (componentData) => {
    try {
      console.log('üíæ Saving component:', componentData);
      
      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const result = await window.api.database.updateComponent(componentData);
      
      if (result.success) {
        console.log('‚úÖ Component updated successfully');
        
        // –û–ë–ù–û–í–õ–Ø–ï–ú –í–´–ë–†–ê–ù–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢
        if (selectedComponent && selectedComponent.id === componentData.id) {
          setSelectedComponent(componentData);
        }
        
        return { success: true };
      } else {
        console.error('‚ùå Failed to update component:', result.error);
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('‚ùå Error saving component:', error);
      throw error;
    }
  };
  

  const handleCloseEditModal = () => {
    setIsEditModalOpen(false);
    setEditingComponent(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
  const getCategories = () => {
    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return [
      { id: 1, name: '–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã' },
      { id: 2, name: '–†–µ–∑–∏—Å—Ç–æ—Ä—ã' },
      { id: 3, name: '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã' },
      { id: 4, name: '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã' },
      { id: 5, name: '–î–∏–æ–¥—ã' }
    ];
  };

  return (
    <div className="app">
      <Sidebar
        selectedCategory={selectedCategory}
        onCategorySelect={setSelectedCategory}
        onComponentSelect={handleComponentSelect}
        onComponentUpdated={(updatedComponent) => {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω
          if (selectedComponent && selectedComponent.id === updatedComponent.id) {
            setSelectedComponent(updatedComponent);
          }
        }}
      />

      <main className="main-content">
        <div className="content-wrapper">
          {selectedComponent ? (
            <ComponentList
              category={selectedCategory}
              component={selectedComponent}
              onEdit={handleEditComponent}
            />
          ) : selectedCategory ? (
            <div className="welcome-message">
              <img src={chipIcon} alt="–ú–∏–∫—Ä–æ—Å—Ö–µ–º–∞" className="welcome-icon" />
              <h1>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{selectedCategory.name}"</h1>
              <p>–∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</p>
              <div className="divider"></div>
            </div>
          ) : (
            <div className="welcome-message">
              <img src={chipIcon} alt="–ú–∏–∫—Ä–æ—Å—Ö–µ–º–∞" className="welcome-icon" />
              <h1>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</h1>
              <p>–∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</p>
              <div className="divider"></div>
            </div>
          )}
        </div>
      </main>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ */}
      <ModalAddComponent
        isOpen={isEditModalOpen}
        onClose={handleCloseEditModal}
        onSave={handleSaveComponent}
        categories={getCategories()}
        editMode={true}
        componentData={editingComponent}
      />
    </div>
  );
}

export default App;
