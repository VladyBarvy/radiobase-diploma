import React, { useState } from 'react';
import '../styles/ComponentList.css';

const ComponentList = ({ category, component, onEdit }) => {
  // –í—Å–µ —Ö—É–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –¥–æ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
  const [isImageModalOpen, setIsImageModalOpen] = useState(false);
  const [imagePreview, setImagePreview] = useState(null);

  // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder –∫–∞–∫ –≤ –æ–±—Ä–∞–∑—Ü–µ
  if (!component || typeof component !== 'object') {
    return (
      <div className="component-view">
        <div className="text-center text-muted mt-5">
          <i className="fas fa-microchip fa-3x mb-3"></i>
          <h4>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</h4>
          <p>–∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</p>
        </div>
      </div>
    );
  }

  const componentName = component.name;
  const categoryName = component.category_name || category?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    if (!dateString) return '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return dateString;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const getParametersObject = (parameters) => {
    if (!parameters) return {};

    console.log('üîç Raw parameters:', parameters);
    console.log('üîç Parameters type:', typeof parameters);

    // –ï—Å–ª–∏ parameters —É–∂–µ –æ–±—ä–µ–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    if (typeof parameters === 'object') {
      const keys = Object.keys(parameters);
      // –ï—Å–ª–∏ –∫–ª—é—á–∏ —á–∏—Å–ª–æ–≤—ã–µ (0,1,2...) - —ç—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
      if (keys.length > 0 && keys.every(key => !isNaN(key))) {
        console.log('‚ö†Ô∏è Parameters appear to be a parsed string, trying to reconstruct...');
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        const reconstructedString = keys.map(key => parameters[key]).join('');
        console.log('üîç Reconstructed string:', reconstructedString);
        try {
          return JSON.parse(reconstructedString);
        } catch (error) {
          console.error('‚ùå Failed to parse reconstructed string:', error);
          return {};
        }
      }
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏
      return parameters;
    }

    // –ï—Å–ª–∏ parameters - —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    if (typeof parameters === 'string') {
      try {
        return JSON.parse(parameters);
      } catch {
        console.error('‚ùå Failed to parse parameters string');
        return {};
      }
    }

    return {};
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const parameters = getParametersObject(component.parameters);

  console.log('‚úÖ Final parameters:', parameters);
  console.log('‚úÖ Final parameters keys:', Object.keys(parameters));

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleEditClick = () => {
    if (onEdit) {
      onEdit(component);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleUpdateImage = () => {
    setIsImageModalOpen(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleCloseImageModal = () => {
    setIsImageModalOpen(false);
    setImagePreview(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleSaveImage = async () => {
    if (!imagePreview) return;

    try {
      const updatedComponent = {
        ...component,
        image_data: imagePreview,
        updated_at: new Date().toISOString()
      };

      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const result = await window.api.database.updateComponent(updatedComponent);

      if (result.success) {
        console.log('‚úÖ Image updated successfully');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
        if (onEdit) {
          onEdit(updatedComponent);
        }

        handleCloseImageModal();
      } else {
        console.error('‚ùå Failed to update image:', result.error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      }
    } catch (error) {
      console.error('‚ùå Error updating image:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è datasheet –≤ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–º –æ–∫–Ω–µ
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è datasheet –≤ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–º –æ–∫–Ω–µ
  const handleDatasheetClick = async (e, url) => {
    e.preventDefault();

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('üîç Debug - Available APIs:');
    console.log('window.api:', window.api);
    console.log('window.electron:', window.electron);
    console.log('window.api.window:', window.api?.window);

    try {
      console.log('üåê Opening datasheet:', url);

      if (!url) {
        alert('–°—Å—ã–ª–∫–∞ –Ω–∞ datasheet –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
        return;
      }

      let normalizedUrl = url.trim();
      if (!normalizedUrl.startsWith('http')) {
        normalizedUrl = 'https://' + normalizedUrl;
      }

      // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥: –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
      if (window.electron && window.electron.shell) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Electron shell API
        window.electron.shell.openExternal(normalizedUrl);
      } else if (window.api && window.api.window && window.api.window.openBrowser) {
        // –ü—Ä–æ–±—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥
        const result = await window.api.window.openBrowser(normalizedUrl);
        if (!result.success) {
          throw new Error(result.error);
        }
      } else {
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: –æ–±—ã—á–Ω–æ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
        window.open(normalizedUrl, '_blank', 'noopener,noreferrer');
      }

    } catch (error) {
      console.error('‚ùå Error opening datasheet:', error);

      // Ultimate fallback
      window.open(url, '_blank', 'noopener,noreferrer');
    }
  };

  return (
    <div className="component-view">
      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ */}
      <div className="component-card">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –∫–Ω–æ–ø–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="component-header">
          <h1 className="component-title">{componentName}</h1>
          <button
            className="btn-edit-component"
            onClick={handleEditClick}
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"
          >
            <i className="fas fa-edit me-1"></i>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </button>
        </div>

        <div className="component-content">
          {/* –í–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫: –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
          <div className="top-section">
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="info-section">
              <div className="info-row">
                <span className="info-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
                <span className="info-value">{categoryName}</span>
              </div>
              <div className="info-row">
                <span className="info-label">–Ø—á–µ–π–∫–∞:</span>
                <span className="info-value">{component.storage_cell || '-'}</span>
              </div>



              <div className="info-row">
                <span className="info-label">Datasheet:</span>
                <span className="info-value">
                  {component.datasheet_url ? (
                    <a
                      href={component.datasheet_url}
                      onClick={(e) => handleDatasheetClick(e, component.datasheet_url)}
                      className="datasheet-link"
                    >
                      –û—Ç–∫—Ä—ã—Ç—å
                    </a>
                  ) : '-'}
                </span>
              </div>



              <div className="info-row">
                <span className="info-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                <span className="info-value">{component.quantity || 0}</span>
              </div>
              <div className="info-row">
                <span className="info-label">–û–±–Ω–æ–≤–ª—ë–Ω:</span>
                <span className="info-value">{formatDate(component.updated_at)}</span>
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
            <div className="image-section-right">
              {component.image_data ? (
                <div className="image-container">
                  <img
                    src={component.image_data}
                    className="component-image"
                    alt={componentName}
                  />
                  <div>
                    <button
                      className="btn btn-outline-primary btn-sm mt-2"
                      onClick={handleUpdateImage}
                    >
                      <i className="fas fa-sync me-1"></i>–û–±–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    </button>
                  </div>
                </div>
              ) : (
                <div className="image-placeholder">
                  <i className="fas fa-image fa-3x mb-2"></i>
                  <p className="text-muted mb-2">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                  <button
                    className="btn btn-primary btn-sm"
                    onClick={handleUpdateImage}
                  >
                    <i className="fas fa-plus me-1"></i>–î–æ–±–∞–≤–∏—Ç—å
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
          {component.description && (
            <>
              <div className="description-section">
                <h2 className="section-title">–û–ø–∏—Å–∞–Ω–∏–µ</h2>
                <div className="description-content">
                  {component.description}
                </div>
              </div>
              <div className="divider"></div>
            </>
          )}

          {/* –ù–∏–∂–Ω–∏–π –±–ª–æ–∫: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
          <div className="parameters-section-full">
            <h2 className="section-title">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</h2>
            {Object.keys(parameters).length > 0 ? (
              <div className="parameters-table">
                <div className="table-header">
                  <div className="parameter-name-header">–ü–∞—Ä–∞–º–µ—Ç—Ä</div>
                  <div className="parameter-value-header">–ó–Ω–∞—á–µ–Ω–∏–µ</div>
                </div>
                <div className="table-body">
                  {Object.entries(parameters).map(([key, value]) => (
                    <div key={key} className="parameter-row-full">
                      <div className="parameter-name-cell">{key}</div>
                      <div className="parameter-value-cell">
                        {typeof value === 'object' ? JSON.stringify(value) : String(value)}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className="no-parameters">
                <i className="fas fa-info-circle me-2"></i>
                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      {isImageModalOpen && (
        <div className="modal-overlay" onClick={handleCloseImageModal}>
          <div className="modal-content image-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2 className="modal-title">
                {component.image_data ? '–û–±–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
              </h2>
              <button
                type="button"
                className="modal-close-btn"
                onClick={handleCloseImageModal}
              >
                √ó
              </button>
            </div>

            <div className="modal-body">
              <div className="image-upload-section">
                <div className="image-preview">
                  {imagePreview ? (
                    <img src={imagePreview} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" className="image-preview-img" />
                  ) : component.image_data ? (
                    <img src={component.image_data} alt="–¢–µ–∫—É—â–µ–µ" className="image-preview-img" />
                  ) : (
                    <div className="image-placeholder">
                      <span>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</span>
                    </div>
                  )}
                </div>

                <div className="file-input-wrapper">
                  <input
                    type="file"
                    id="update-component-image"
                    accept="image/*"
                    onChange={handleImageChange}
                    className="file-input"
                  />
                  <label htmlFor="update-component-image" className="file-input-label">
                    {imagePreview ? '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
                  </label>
                </div>
              </div>
            </div>

            <div className="modal-footer">
              <button
                type="button"
                className="btn btn-secondary"
                onClick={handleCloseImageModal}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="button"
                className="btn btn-primary"
                onClick={handleSaveImage}
                disabled={!imagePreview && !component.image_data}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ComponentList;
