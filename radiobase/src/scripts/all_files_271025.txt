1) Файл main/index.js
import { app, shell, BrowserWindow, ipcMain } from 'electron'
import { join } from 'path'
import { electronApp, optimizer, is } from '@electron-toolkit/utils'
import icon from '../../resources/icon.png?asset'
import ComponentsDatabase from './database'

let mainWindow
let db

function createWindow() {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    show: false,
    autoHideMenuBar: true,
    ...(process.platform === 'linux' ? { icon } : {}),
    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
      sandbox: false
    }
  })

  // Запуск в полноэкранном режиме
  mainWindow.maximize()

  mainWindow.on('ready-to-show', () => {
    mainWindow.show()
  })

  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url)
    return { action: 'deny' }
  })

  // HMR for renderer base on electron-vite cli.
  // Load the remote URL for development or the local html file for production.
  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))
  }

  return mainWindow
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  // Set app user model id for windows
  electronApp.setAppUserModelId('com.electron')

  // Default open or close DevTools by F12 in development
  // and ignore CommandOrControl + R in production.
  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils
  app.on('browser-window-created', (_, window) => {
    optimizer.watchWindowShortcuts(window)
  })

  // IPC test
  ipcMain.on('ping', () => console.log('pong'))

  // Initialize database and setup handlers with small delay
  initializeApp()
})

// Функция для инициализации приложения
async function initializeApp() {
  try {
    // Инициализируем базу данных
    db = new ComponentsDatabase()
    console.log('✅ Database initialized successfully')

    // Настраиваем обработчики IPC
    setupDatabaseHandlers()
    console.log('✅ Database IPC handlers registered')

    // Создаем окно после инициализации БД
    mainWindow = createWindow()

  } catch (error) {
    console.error('❌ Database initialization failed:', error)
    // Все равно создаем окно, но с ошибкой
    mainWindow = createWindow()
  }
}

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

// Close database when app quits
app.on('before-quit', () => {
  if (db) {
    db.close()
    console.log('✅ Database closed')
  }
})

// Database IPC handlers
function setupDatabaseHandlers() {
  if (!db) {
    console.error('❌ Database not initialized, cannot setup handlers')
    return
  }

  // Categories
  ipcMain.handle('database:getCategories', async () => {
    return db.getCategories()
  })

  ipcMain.handle('database:addCategory', async (_, name) => {
    return db.addCategory(name)
  })

  ipcMain.handle('database:deleteCategory', async (_, id) => {
    return db.deleteCategory(id)
  })

  // Components
  ipcMain.handle('database:getComponents', async (_, categoryId) => {
    return db.getComponents(categoryId)
  })

  ipcMain.handle('database:getComponent', async (_, id) => {
    return db.getComponent(id)
  })

  ipcMain.handle('database:addComponent', async (_, componentData) => {
    return db.addComponent(componentData)
  })

  ipcMain.handle('database:updateComponent', async (_, componentData) => {
    return db.updateComponent(componentData)
  })

  ipcMain.handle('database:deleteComponent', async (_, id) => {
    return db.deleteComponent(id)
  })

  // Search and utilities
  ipcMain.handle('database:searchComponents', async (_, query) => {
    return db.searchComponents(query)
  })

  ipcMain.handle('database:getDatabaseStats', async () => {
    return db.getDatabaseStats()
  })

  ipcMain.handle('database:checkIntegrity', async () => {
    return db.checkDatabaseIntegrity()
  })

  ipcMain.handle('database:updateCategory', async (_, id, name) => {
    return db.updateCategory(id, name)
  })

  ipcMain.handle('window:openBrowser', async (_, url) => {
    try {
      // Создаем новое браузерное окно
      const browserWindow = new BrowserWindow({
        width: 1200,
        height: 800,
        minWidth: 800,
        minHeight: 600,
        webPreferences: {
          nodeIntegration: false,
          contextIsolation: true,
          enableRemoteModule: false,
          webSecurity: true
        },
        title: 'Datasheet - ' + url,
        icon: icon // используем ту же иконку что и у основного приложения
      });
  
      // Загружаем URL
      await browserWindow.loadURL(url);
  
      // Обработчик для внешних ссылок (открывать в системном браузере)
      browserWindow.webContents.setWindowOpenHandler(({ url }) => {
        require('electron').shell.openExternal(url);
        return { action: 'deny' };
      });
  
      console.log('✅ Browser window opened for:', url);
      return { success: true };
    } catch (error) {
      console.error('❌ Failed to open browser window:', error);
      return { success: false, error: error.message };
    }
  });
}

app.on('activate', function () {
  // On macOS it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    mainWindow = createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and require them here.


























2) Файл main/database.js
const Database = require('better-sqlite3');
const path = require('path');
const { app } = require('electron');

class ComponentsDatabase {
  constructor() {
    // Используем userData папку Electron для хранения БД
    const userDataPath = app.getPath('userData');
    this.dbPath = path.join(userDataPath, 'components.db');
    
    // Создаем папку если не существует
    const dbDir = path.dirname(this.dbPath);
    require('fs').mkdirSync(dbDir, { recursive: true });
    
    this.db = new Database(this.dbPath);
    
    // Включаем оптимизации
    this.db.pragma('journal_mode = WAL');
    this.db.pragma('foreign_keys = ON');
    this.db.pragma('busy_timeout = 5000');
    
    this.init();
  }

  init() {
    try {
      this.createTables();
      this.insertInitialCategories();
      this.migrateDatabase();
      console.log('✅ Database initialized at:', this.dbPath);
    } catch (error) {
      console.error('❌ Database initialization error:', error);
      throw error;
    }
  }

  createTables() {
    // Создаем таблицы отдельными запросами для лучшей читаемости
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL UNIQUE,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP
      )
    `);

    this.db.exec(`
      CREATE TABLE IF NOT EXISTS components (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        category_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        storage_cell TEXT,
        datasheet_url TEXT,
        quantity INTEGER DEFAULT 0,
        updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
        parameters TEXT DEFAULT '{}',
        image_data TEXT,
        description TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
      )
    `);

    // Создаем индексы для улучшения производительности
    this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_category ON components(category_id)');
    this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_name ON components(name)');
    this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_storage ON components(storage_cell)');
    this.db.exec('CREATE INDEX IF NOT EXISTS idx_components_updated ON components(updated_at)');
  }

  insertInitialCategories() {
    const categories = ["Транзисторы", "Резисторы", "Конденсаторы", "Микросхемы", "Диоды"];
    
    const insertStmt = this.db.prepare('INSERT OR IGNORE INTO categories (name) VALUES (?)');
    
    // Используем транзакцию для лучшей производительности
    const insertMany = this.db.transaction((cats) => {
      for (const category of cats) {
        insertStmt.run(category);
      }
    });

    insertMany(categories);
  }

  migrateDatabase() {
    try {
      const columns = this.db.prepare("PRAGMA table_info(components)").all();
      const columnNames = columns.map(col => col.name);
      
      // Все необходимые колонки в одном месте
      const migrations = [
        { name: 'storage_cell', type: 'TEXT', default: 'NULL' },
        { name: 'datasheet_url', type: 'TEXT', default: 'NULL' },
        { name: 'quantity', type: 'INTEGER', default: '0' },
        { name: 'updated_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' },
        { name: 'parameters', type: 'TEXT', default: "'{}'" },
        { name: 'image_data', type: 'TEXT', default: 'NULL' },
        { name: 'description', type: 'TEXT', default: 'NULL' },
        { name: 'created_at', type: 'TEXT', default: 'CURRENT_TIMESTAMP' }
      ];

      // Выполняем миграции в транзакции
      const migrate = this.db.transaction(() => {
        for (const migration of migrations) {
          if (!columnNames.includes(migration.name)) {
            this.db.exec(`ALTER TABLE components ADD COLUMN ${migration.name} ${migration.type} DEFAULT ${migration.default}`);
            console.log(`✅ Added column: ${migration.name}`);
          }
        }
      });

      migrate();
      
    } catch (error) {
      console.error('❌ Migration error:', error);
    }
  }

  // ===== УНИВЕРСАЛЬНЫЕ МЕТОДЫ ДЛЯ РАБОТЫ С БД =====

  all(sql, params = []) {
    try {
      return this.db.prepare(sql).all(params);
    } catch (error) {
      console.error('❌ Query error (all):', error.message, sql, params);
      return [];
    }
  }

  get(sql, params = []) {
    try {
      return this.db.prepare(sql).get(params) || null;
    } catch (error) {
      console.error('❌ Query error (get):', error.message, sql, params);
      return null;
    }
  }

  run(sql, params = []) {
    try {
      const result = this.db.prepare(sql).run(params);
      return {
        success: true,
        changes: result.changes,
        lastInsertRowid: result.lastInsertRowid
      };
    } catch (error) {
      console.error('❌ Query error (run):', error.message, sql, params);
      return { 
        success: false, 
        changes: 0, 
        lastInsertRowid: 0,
        error: error.message 
      };
    }
  }

  // ===== API КАТЕГОРИЙ =====

  getCategories() {
    return this.all("SELECT * FROM categories ORDER BY name");
  }

  addCategory(name) {
    if (!name || !name.trim()) {
      return { success: false, error: "Название категории не может быть пустым" };
    }

    const result = this.run("INSERT INTO categories (name) VALUES (?)", [name.trim()]);
    
    if (result.success && result.changes > 0) {
      return { success: true, id: result.lastInsertRowid };
    }
    
    return { 
      success: false, 
      error: result.error?.includes('UNIQUE') 
        ? "Категория с таким названием уже существует" 
        : "Ошибка добавления категории" 
    };
  }

  updateCategory(id, name) {
    if (!name || !name.trim()) {
      return { success: false, error: "Название категории не может быть пустым" };
    }

    const result = this.run("UPDATE categories SET name = ? WHERE id = ?", [name.trim(), id]);
    
    if (result.success && result.changes > 0) {
      return { success: true };
    }
    
    return { 
      success: false, 
      error: result.changes === 0 ? "Категория не найдена" : "Ошибка обновления категории" 
    };
  }

  deleteCategory(id) {
    // Используем CASCADE для автоматического удаления компонентов
    const result = this.run("DELETE FROM categories WHERE id = ?", [id]);
    return { 
      success: result.success && result.changes > 0,
      error: result.success && result.changes === 0 ? "Категория не найдена" : null
    };
  }

  // ===== API КОМПОНЕНТОВ =====

  getComponents(categoryId = null) {
    if (categoryId) {
      return this.all(
        "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.category_id = ? ORDER BY c.name", 
        [categoryId]
      );
    }
    return this.all("SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id ORDER BY c.name");
  }

  getComponent(id) {
    const component = this.get(`
      SELECT c.*, cat.name as category_name 
      FROM components c 
      LEFT JOIN categories cat ON c.category_id = cat.id 
      WHERE c.id = ?
    `, [id]);
    
    console.log('🔍 Raw component data:', component);
    console.log('🔍 Parameters type:', typeof component?.parameters);
    console.log('🔍 Parameters value:', component?.parameters);
    
    if (component) {
      // Безопасный парсинг параметров
      if (component.parameters && typeof component.parameters === 'string') {
        try {
          component.parameters = JSON.parse(component.parameters);
          console.log('✅ Successfully parsed parameters:', component.parameters);
        } catch (error) {
          console.error('❌ JSON parse error:', error);
          component.parameters = {};
        }
      } else {
        component.parameters = component.parameters || {};
      }
    }
    
    return component;
  }

  addComponent(componentData) {
    // Валидация обязательных полей
    if (!componentData.category_id || !componentData.name?.trim()) {
      return { success: false, error: "Категория и название компонента обязательны" };
    }

    const result = this.run(`
      INSERT INTO components 
      (category_id, name, storage_cell, datasheet_url, quantity, updated_at, parameters, image_data, description)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      componentData.category_id,
      componentData.name.trim(),
      componentData.storage_cell?.trim() || null,
      componentData.datasheet_url?.trim() || null,
      Math.max(0, parseInt(componentData.quantity) || 0),
      componentData.updated_at || new Date().toISOString(),
      this.serializeParameters(componentData.parameters),
      componentData.image_data || null,
      componentData.description?.trim() || null
    ]);

    if (result.success && result.changes > 0) {
      return { success: true, id: result.lastInsertRowid };
    }
    
    return { success: false, error: "Ошибка добавления компонента" };
  }

  updateComponent(componentData) {
    if (!componentData.id) {
      return { success: false, error: "ID компонента обязателен для обновления" };
    }
  
    const result = this.run(`
      UPDATE components 
      SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, 
          quantity = ?, updated_at = ?, parameters = ?, image_data = ?, description = ?
      WHERE id = ?
    `, [
      componentData.category_id,
      componentData.name,
      componentData.storage_cell,
      componentData.datasheet_url,
      componentData.quantity,
      new Date().toISOString(),
      JSON.stringify(componentData.parameters),
      componentData.image_data,
      componentData.description,
      componentData.id
    ]);
  
    return { 
      success: result.success, 
      changes: result.changes,
      error: result.success && result.changes === 0 ? "Компонент не найден" : null
    };
  }
  

  deleteComponent(id) {
    const result = this.run("DELETE FROM components WHERE id = ?", [id]);
    return { 
      success: result.success && result.changes > 0,
      error: result.success && result.changes === 0 ? "Компонент не найден" : null
    };
  }

  // ===== ПОИСК И ФИЛЬТРАЦИЯ =====

  searchComponents(query) {
    if (!query?.trim()) return [];
    
    const searchTerm = `%${query.trim()}%`;
    return this.all(`
      SELECT c.*, cat.name as category_name 
      FROM components c 
      LEFT JOIN categories cat ON c.category_id = cat.id 
      WHERE c.name LIKE ? OR c.storage_cell LIKE ? OR cat.name LIKE ? OR c.description LIKE ?
      ORDER BY c.name
    `, [searchTerm, searchTerm, searchTerm, searchTerm]);
  }

  getComponentsByStorage(cell) {
    if (!cell?.trim()) return [];
    
    return this.all(
      "SELECT c.*, cat.name as category_name FROM components c LEFT JOIN categories cat ON c.category_id = cat.id WHERE c.storage_cell = ? ORDER BY c.name",
      [cell.trim()]
    );
  }

  // ===== УТИЛИТЫ =====

  serializeParameters(parameters) {
    if (!parameters) return '{}';
    if (typeof parameters === 'string') {
      try {
        // Если это уже JSON строка, проверяем валидность
        JSON.parse(parameters);
        return parameters;
      } catch {
        return '{}';
      }
    }
    return JSON.stringify(parameters);
  }

  getDatabaseStats() {
    const categoryCount = this.get("SELECT COUNT(*) as count FROM categories")?.count || 0;
    const componentCount = this.get("SELECT COUNT(*) as count FROM components")?.count || 0;
    const totalQuantity = this.get("SELECT SUM(quantity) as total FROM components")?.total || 0;

    return {
      categoryCount,
      componentCount,
      totalQuantity,
      dbPath: this.dbPath,
      lastUpdated: new Date().toISOString()
    };
  }

  checkDatabaseIntegrity() {
    try {
      const integrityCheck = this.get("PRAGMA integrity_check");
      const tables = this.all("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name");
      const componentCount = this.get("SELECT COUNT(*) as c FROM components")?.c || 0;
      
      console.log("✅ Database integrity:", integrityCheck);
      console.log("📊 Database contains tables:", tables.map(t => t.name));
      console.log("🔧 Total components:", componentCount);
      
      return {
        success: true,
        integrity: integrityCheck,
        tables: tables.map(t => t.name),
        componentCount
      };
    } catch (error) {
      console.error("❌ Database integrity error:", error);
      return { success: false, error: error.message };
    }
  }

  // ===== ОПТИМИЗАЦИЯ И ЗАКРЫТИЕ =====

  optimize() {
    try {
      this.db.exec('PRAGMA optimize');
      this.db.exec('VACUUM');
      console.log('✅ Database optimized');
    } catch (error) {
      console.error('❌ Database optimization error:', error);
    }
  }

  backup() {
    try {
      const backupPath = this.dbPath + '.backup_' + Date.now();
      this.db.backup(backupPath);
      console.log('✅ Database backup created:', backupPath);
      return backupPath;
    } catch (error) {
      console.error('❌ Database backup error:', error);
      return null;
    }
  }

  close() {
    if (this.db) {
      this.optimize();
      this.db.close();
      console.log('✅ Database closed');
    }
  }
}

export default ComponentsDatabase;






























3) Файл preload/index.js
import { contextBridge, ipcRenderer } from 'electron'
import { electronAPI } from '@electron-toolkit/preload'

// Custom APIs for renderer
const api = {
  database: {
    // Categories
    getCategories: () => ipcRenderer.invoke('database:getCategories'),
    addCategory: (name) => ipcRenderer.invoke('database:addCategory', name),
    deleteCategory: (id) => ipcRenderer.invoke('database:deleteCategory', id),
    
    // Components
    getComponents: (categoryId) => ipcRenderer.invoke('database:getComponents', categoryId),
    getComponent: (id) => ipcRenderer.invoke('database:getComponent', id),
    addComponent: (componentData) => ipcRenderer.invoke('database:addComponent', componentData),
    updateComponent: (componentData) => ipcRenderer.invoke('database:updateComponent', componentData),
    deleteComponent: (id) => ipcRenderer.invoke('database:deleteComponent', id),
    
    // Search and utilities
    searchComponents: (query) => ipcRenderer.invoke('database:searchComponents', query),
    getDatabaseStats: () => ipcRenderer.invoke('database:getDatabaseStats'),
    checkIntegrity: () => ipcRenderer.invoke('database:checkIntegrity')
  },

  window: {
    openBrowser: (url) => ipcRenderer.invoke('window:openBrowser', url)
  }
}

// Use `contextBridge` APIs to expose Electron APIs to
// renderer only if context isolation is enabled, otherwise
// just add to the DOM global.
if (process.contextIsolated) {
  try {
    contextBridge.exposeInMainWorld('electron', electronAPI)
    contextBridge.exposeInMainWorld('api', api)
  } catch (error) {
    console.error(error)
  }
} else {
  window.electron = electronAPI
  window.api = api
}
































4) Файл renderer/App.jsx
import React, { useState } from 'react';
import Sidebar from './components/Sidebar';
import ComponentList from './components/ComponentList';
import ModalAddComponent from './components/ModalAddComponent';
import SearchResults from './components/SearchResults';
import './styles/App.css';
import chipIcon from './assets/picto-chip.png';

function App() {
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedComponent, setSelectedComponent] = useState(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingComponent, setEditingComponent] = useState(null);
  const [searchResults, setSearchResults] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');

  // Функция для сброса поиска
  const handleClearSearch = () => {
    setSearchResults(null);
    setSearchQuery('');
  };

  // Обработчик выбора компонента
  const handleComponentSelect = (component) => {
    setSelectedComponent(component);
    handleClearSearch(); // Сбрасываем поиск при выборе компонента
  };

  // Обработчик выбора категории
  const handleCategorySelect = (category) => {
    setSelectedCategory(category);
    handleClearSearch(); // Сбрасываем поиск при выборе категории
  };

  // Обработчик редактирования компонента
  const handleEditComponent = (component) => {
    console.log('Редактирование компонента:', component);
    setEditingComponent(component);
    setIsEditModalOpen(true);
  };

  // Обработчик сохранения компонента
  const handleSaveComponent = async (componentData) => {
    try {
      console.log('💾 Saving component:', componentData);

      const result = await window.api.database.updateComponent(componentData);

      if (result.success) {
        console.log('✅ Component updated successfully');

        // Обновляем выбранный компонент
        if (selectedComponent && selectedComponent.id === componentData.id) {
          setSelectedComponent(componentData);
        }

        return { success: true };
      } else {
        console.error('❌ Failed to update component:', result.error);
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('❌ Error saving component:', error);
      throw error;
    }
  };

  // Закрытие модального окна редактирования
  const handleCloseEditModal = () => {
    setIsEditModalOpen(false);
    setEditingComponent(null);
  };

  // Обработчик обновления компонента
  const handleComponentUpdated = (updatedComponent) => {
    if (selectedComponent && selectedComponent.id === updatedComponent.id) {
      setSelectedComponent(updatedComponent);
    }
  };

  // Функция для обработки поиска
  const handleSearch = async (query) => {
    if (!query.trim()) {
      handleClearSearch();
      return;
    }

    try {
      console.log('🔍 Searching for:', query);
      const results = await window.api.database.searchComponents(query);
      console.log('🔍 Search results:', results);
      
      setSearchResults(results);
      setSearchQuery(query);
      setSelectedComponent(null); // Сбрасываем выбранный компонент
    } catch (error) {
      console.error('❌ Search error:', error);
      alert('Ошибка при выполнении поиска');
    }
  };

  // Функция для получения категорий
  const getCategories = () => {
    // TODO: Заменить на реальное получение категорий из базы данных
    return [
      { id: 1, name: 'Транзисторы' },
      { id: 2, name: 'Резисторы' },
      { id: 3, name: 'Конденсаторы' },
      { id: 4, name: 'Микросхемы' },
      { id: 5, name: 'Диоды' }
    ];
  };

  return (
    <div className="app">
      <Sidebar
        selectedCategory={selectedCategory}
        onCategorySelect={handleCategorySelect}
        onComponentSelect={handleComponentSelect}
        onComponentUpdated={handleComponentUpdated}
        onSearch={handleSearch}
      />

      <main className="main-content">
        <div className="content-wrapper">
          {searchResults ? (
            <SearchResults
              searchResults={searchResults}
              searchQuery={searchQuery}
              onComponentSelect={handleComponentSelect}
              onEdit={handleEditComponent}
              onClearSearch={handleClearSearch}
            />
          ) : selectedComponent ? (
            <ComponentList
              category={selectedCategory}
              component={selectedComponent}
              onEdit={handleEditComponent}
            />
          ) : selectedCategory ? (
            <div className="welcome-message">
              <img src={chipIcon} alt="Микросхема" className="welcome-icon" />
              <h1>Выберите компонент из категории "{selectedCategory.name}"</h1>
              <p>или создайте новый компонент</p>
              <div className="divider"></div>
            </div>
          ) : (
            <div className="welcome-message">
              <img src={chipIcon} alt="Микросхема" className="welcome-icon" />
              <h1>Выберите компонент для просмотра</h1>
              <p>или создайте новый компонент</p>
              <div className="divider"></div>
            </div>
          )}
        </div>
      </main>

      {/* Модальное окно редактирования компонента */}
      <ModalAddComponent
        isOpen={isEditModalOpen}
        onClose={handleCloseEditModal}
        onSave={handleSaveComponent}
        categories={getCategories()}
        editMode={true}
        componentData={editingComponent}
      />
    </div>
  );
}

export default App;
































5) Файл renderer/src/main.jsx
import './assets/main.css'

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>
)

































6) Файл renderer/src/components/ComponentList.jsx
import React, { useState, useMemo, useCallback } from 'react';
import { FaEdit } from 'react-icons/fa';
import '../styles/ComponentList.css';

const ComponentList = ({ category, component, onEdit }) => {
  const [isImageModalOpen, setIsImageModalOpen] = useState(false);
  const [imagePreview, setImagePreview] = useState(null);

  // Мемоизируем вычисляемые значения
  const componentName = useMemo(() => component?.name, [component?.name]);
  const categoryName = useMemo(() => 
    component?.category_name || category?.name || 'Неизвестно',
    [component?.category_name, category?.name]
  );

  // Мемоизируем форматирование даты
  const formattedDate = useMemo(() => {
    const formatDate = (dateString) => {
      if (!dateString) return 'Не обновлялся';
      try {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
      } catch {
        return dateString;
      }
    };
    return formatDate(component?.updated_at);
  }, [component?.updated_at]);

  // Мемоизируем параметры
  const parameters = useMemo(() => {
    const getParametersObject = (parameters) => {
      if (!parameters) return {};

      if (process.env.NODE_ENV !== 'production') {
        console.log('🔍 Raw parameters:', parameters);
      }

      if (typeof parameters === 'object') {
        const keys = Object.keys(parameters);
        if (keys.length > 0 && keys.every(key => !isNaN(key))) {
          const reconstructedString = keys.map(key => parameters[key]).join('');
          try {
            return JSON.parse(reconstructedString);
          } catch (error) {
            console.error('❌ Failed to parse reconstructed string:', error);
            return {};
          }
        }
        return parameters;
      }

      if (typeof parameters === 'string') {
        try {
          return JSON.parse(parameters);
        } catch {
          console.error('❌ Failed to parse parameters string');
          return {};
        }
      }

      return {};
    };

    return getParametersObject(component?.parameters);
  }, [component?.parameters]);

  // Оптимизированные обработчики с useCallback
  const handleEditClick = useCallback(() => {
    onEdit?.(component);
  }, [onEdit, component]);

  const handleUpdateImage = useCallback(() => {
    setIsImageModalOpen(true);
  }, []);

  const handleCloseImageModal = useCallback(() => {
    setIsImageModalOpen(false);
    setImagePreview(null);
  }, []);

  const handleImageChange = useCallback((e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  }, []);

  const handleSaveImage = useCallback(async () => {
    if (!imagePreview) return;

    try {
      const updatedComponent = {
        ...component,
        image_data: imagePreview,
        updated_at: new Date().toISOString()
      };

      const result = await window.api.database.updateComponent(updatedComponent);

      if (result.success) {
        onEdit?.(updatedComponent);
        handleCloseImageModal();
      } else {
        console.error('❌ Failed to update image:', result.error);
        alert('Не удалось обновить изображение');
      }
    } catch (error) {
      console.error('❌ Error updating image:', error);
      alert('Ошибка при обновлении изображения');
    }
  }, [imagePreview, component, onEdit, handleCloseImageModal]);

  const handleDatasheetClick = useCallback(async (e, url) => {
    e.preventDefault();

    if (!url) {
      alert('Ссылка на datasheet не указана');
      return;
    }

    let normalizedUrl = url.trim();
    if (!normalizedUrl.startsWith('http')) {
      normalizedUrl = 'https://' + normalizedUrl;
    }

    try {
      if (window.electron?.shell) {
        window.electron.shell.openExternal(normalizedUrl);
      } else if (window.api?.window?.openBrowser) {
        const result = await window.api.window.openBrowser(normalizedUrl);
        if (!result.success) {
          throw new Error(result.error);
        }
      } else {
        window.open(normalizedUrl, '_blank', 'noopener,noreferrer');
      }
    } catch (error) {
      console.error('❌ Error opening datasheet:', error);
      window.open(normalizedUrl, '_blank', 'noopener,noreferrer');
    }
  }, []);

  // Выносим условия рендеринга в переменные для читаемости
  const hasDescription = !!component?.description;
  const hasParameters = Object.keys(parameters).length > 0;
  const hasImage = !!component?.image_data;
  const hasDatasheet = !!component?.datasheet_url;

  // Если компонент не выбран, показываем placeholder
  if (!component || typeof component !== 'object') {
    return (
      <div className="component-view">
        <div className="text-center text-muted mt-5">
          <i className="fas fa-microchip fa-3x mb-3"></i>
          <h4>Выберите компонент для просмотра</h4>
          <p>или создайте новый компонент</p>
        </div>
      </div>
    );
  }

  return (
    <div className="component-view">
      {/* Карточка компонента */}
      <div className="component-card">
        {/* Заголовок с названием компонента и кнопкой редактирования */}
        <div className="component-header">
          <h1 className="component-title">{componentName}</h1>
          <button
            className="btn-edit-component"
            onClick={handleEditClick}
            title="Редактировать компонент"
          >
            <FaEdit size={14} />
            Редактировать
          </button>
        </div>

        <div className="component-content">
          {/* Верхний блок: основная информация + изображение */}
          <div className="top-section">
            {/* Левая колонка - основная информация */}
            <div className="info-section">
              <div className="info-row">
                <span className="info-label">Категория:</span>
                <span className="info-value">{categoryName}</span>
              </div>
              <div className="info-row">
                <span className="info-label">Ячейка:</span>
                <span className="info-value">{component.storage_cell || '-'}</span>
              </div>
              <div className="info-row">
                <span className="info-label">Datasheet:</span>
                <span className="info-value">
                  {hasDatasheet ? (
                    <a
                      href={component.datasheet_url}
                      onClick={(e) => handleDatasheetClick(e, component.datasheet_url)}
                      className="datasheet-link"
                    >
                      Открыть
                    </a>
                  ) : '-'}
                </span>
              </div>
              <div className="info-row">
                <span className="info-label">Количество:</span>
                <span className="info-value">{component.quantity || 0}</span>
              </div>
              <div className="info-row">
                <span className="info-label">Обновлён:</span>
                <span className="info-value">{formattedDate}</span>
              </div>
            </div>

            {/* Правая колонка - изображение */}
            <div className="image-section-right">
              {hasImage ? (
                <div className="image-container">
                  <img
                    src={component.image_data}
                    className="component-image"
                    alt={componentName}
                  />
                  <div>
                    <button
                      // className="btn btn-outline-primary btn-sm mt-2"
                      className="button-update-image"
                      onClick={handleUpdateImage}
                    >
                      <FaEdit size={14} />
                      Обновить изображение
                    </button>
                  </div>
                </div>
              ) : (
                <div className="image-placeholder">
                  <i className="fas fa-image fa-3x mb-2"></i>
                  <p className="text-muted mb-2">Нет изображения</p>
                  <button
                    className="btn btn-primary btn-sm"
                    onClick={handleUpdateImage}
                  >
                    <i className="fas fa-plus me-1"></i>Добавить
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Описание */}
          {hasDescription && (
            <>
              <div className="description-section">
                <h2 className="section-title">Описание</h2>
                <div className="description-content">
                  {component.description}
                </div>
              </div>
              <div className="divider"></div>
            </>
          )}

          {/* Раздел "Параметры" */}
          <div className="parameters-section-full">
            <h2 className="section-title">Параметры</h2>
            {hasParameters ? (
              <div className="new-parameters-container">
                <table className="new-parameters-table">
                  <thead>
                    <tr>
                      <th className="new-param-name-header">Параметр</th>
                      <th className="new-param-value-header">Значение</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Object.entries(parameters).map(([key, value]) => (
                      <tr key={key}>
                        <td className="new-param-name-cell">{key}</td>
                        <td className="new-param-value-cell">
                          {typeof value === 'object' ? JSON.stringify(value) : String(value)}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="no-parameters">
                <i className="fas fa-info-circle me-2"></i>
                Параметры не указаны
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Модальное окно для обновления изображения */}
      {isImageModalOpen && (
        <div className="modal-overlay" onClick={handleCloseImageModal}>
          <div className="modal-content image-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2 className="modal-title">
                {hasImage ? 'Обновить изображение' : 'Добавить изображение'}
              </h2>
              <button
                type="button"
                className="modal-close-btn"
                onClick={handleCloseImageModal}
              >
                ×
              </button>
            </div>

            <div className="modal-body">
              <div className="image-upload-section">
                <div className="image-preview">
                  {imagePreview ? (
                    <img src={imagePreview} alt="Предпросмотр" className="image-preview-img" />
                  ) : hasImage ? (
                    <img src={component.image_data} alt="Текущее" className="image-preview-img" />
                  ) : (
                    <div className="image-placeholder">
                      <span>Изображение не загружено</span>
                    </div>
                  )}
                </div>

                <div className="file-input-wrapper">
                  <input
                    type="file"
                    id="update-component-image"
                    accept="image/*"
                    onChange={handleImageChange}
                    className="file-input"
                  />
                  <label htmlFor="update-component-image" className="file-input-label">
                    {imagePreview ? 'Выбрать другое изображение' : 'Выбрать изображение'}
                  </label>
                </div>
              </div>
            </div>

            <div className="modal-footer">
              <button
                type="button"
                className="btn btn-secondary"
                onClick={handleCloseImageModal}
              >
                Отмена
              </button>
              <button
                type="button"
                className="btn btn-primary"
                onClick={handleSaveImage}
                disabled={!imagePreview && !hasImage}
              >
                Сохранить
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default React.memo(ComponentList);



































7) Файл renderer/src/components/ConfirmationDialog.jsx
import React from 'react';
import '../styles/ConfirmationDialog.css';

const ConfirmationDialog = ({ 
  isOpen, 
  onClose, 
  onConfirm, 
  title = "Подтверждение", 
  message = "Вы уверены?" 
}) => {
  if (!isOpen) return null;

  const handleConfirm = () => {
    onConfirm();
    onClose();
  };

  return (
    <div className="confirmation-overlay" onClick={onClose}>
      <div className="confirmation-dialog" onClick={(e) => e.stopPropagation()}>
        <div className="confirmation-header">
          <h3 className="confirmation-title">{title}</h3>
        </div>
        <div className="confirmation-body">
          <p>{message}</p>
        </div>
        <div className="confirmation-footer">
          <button 
            className="confirmation-btn confirmation-btn-cancel" 
            onClick={onClose}
          >
            Отмена
          </button>
          <button 
            className="confirmation-btn confirmation-btn-confirm" 
            onClick={handleConfirm}
          >
            Да, удалить
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConfirmationDialog;




































8) Файл renderer/src/components/ContextMenu.jsx
import React from 'react';
import '../styles/ContextMenu.css';

const ContextMenu = ({ x, y, isOpen, onClose, onRename, onDelete }) => {
  if (!isOpen) return null;

  const handleRename = () => {
    onRename();
    onClose();
  };

  const handleDelete = () => {
    onDelete();
    onClose();
  };

  return (
    <>
      <div className="context-menu-overlay" onClick={onClose} />
      <div 
        className="context-menu" 
        style={{ top: y, left: x }}
        onClick={(e) => e.stopPropagation()}
      >
        <button className="context-menu-item" onClick={handleRename}>
          Переименовать
        </button>
        <button className="context-menu-item context-menu-item-delete" onClick={handleDelete}>
          Удалить
        </button>
      </div>
    </>
  );
};

export default ContextMenu;











































9) Файл renderer/src/components/ModalAddCategory.jsx
import React, { useState, useEffect } from 'react';
import '../styles/ModalAddCategory.css';

const ModalAddCategory = ({ isOpen, onClose, onSave, editMode = false, initialName = '' }) => {
  const [categoryName, setCategoryName] = useState('');
  const [error, setError] = useState('');

  // Сбрасываем состояние при открытии/закрытии модального окна
  useEffect(() => {
    if (isOpen) {
      setCategoryName(initialName);
      setError('');
    }
  }, [isOpen, initialName]);

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!categoryName.trim()) {
      setError('Введите название категории');
      return;
    }

    onSave(categoryName.trim());
    setCategoryName('');
    setError('');
  };

  const handleClose = () => {
    setCategoryName('');
    setError('');
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={handleClose}>
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2 className="modal-title">
            {editMode ? 'Переименовать категорию' : 'Добавить категорию'}
          </h2>
          <button 
            type="button" 
            className="modal-close-btn"
            onClick={handleClose}
          >
            ×
          </button>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="modal-body">
            <div className="form-group">
              <label htmlFor="categoryName" className="form-label">
                Название категории
              </label>
              <input
                type="text"
                className={`form-control ${error ? 'form-control-error' : ''}`}
                id="categoryName"
                value={categoryName}
                onChange={(e) => {
                  setCategoryName(e.target.value);
                  setError('');
                }}
                placeholder="Введите название категории"
                autoFocus
              />
              {error && <div className="form-error">{error}</div>}
            </div>
          </div>

          <div className="modal-footer">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={handleClose}
            >
              Отмена
            </button>
            <button
              type="submit"
              className="btn btn-primary"
            >
              {editMode ? 'Сохранить' : 'Добавить'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ModalAddCategory;




































10) Файл renderer/src/components/Sidebar.jsx
import React, { useState, useEffect } from 'react';
import ModalAddCategory from './ModalAddCategory.jsx';
import ContextMenu from './ContextMenu.jsx';
import ConfirmationDialog from './ConfirmationDialog.jsx';
import ModalAddComponent from './ModalAddComponent.jsx';
import ContextMenuComponent from './ContextMenuComponent.jsx';
import SearchResults from './SearchResults.jsx';
import '../styles/Sidebar.css';

// Импортируем иконки
import folderIcon from '../assets/picto-directory.jpg';
import addCategoryIcon from '../assets/picto-dir-plus.jpg';
import addComponentIcon from '../assets/picto-comp-plus.jpg';
import pictoComponentIcon from '../assets/picto-elem.jpg';

const Sidebar = ({ selectedCategory, onCategorySelect, onComponentSelect, onComponentUpdated, onSearch }) => {
  const [expandedCategories, setExpandedCategories] = useState({});
  const [categories, setCategories] = useState([]);
  const [components, setComponents] = useState({});
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isComponentModalOpen, setIsComponentModalOpen] = useState(false);

  const [searchQuery, setSearchQuery] = useState('');

  // Состояния для контекстного меню
  const [contextMenu, setContextMenu] = useState({
    isOpen: false,
    x: 0,
    y: 0,
    category: null
  });

  // Состояния для диалога подтверждения
  const [confirmationDialog, setConfirmationDialog] = useState({
    isOpen: false,
    category: null
  });

  // Состояния для редактирования категории
  const [editModal, setEditModal] = useState({
    isOpen: false,
    category: null
  });

  // Загружаем категории при монтировании компонента
  useEffect(() => {
    loadCategories();
  }, []);

  // Загружаем категории из базы данных
  const loadCategories = async () => {
    try {
      setLoading(true);
      const categoriesData = await window.api.database.getCategories();
      setCategories(categoriesData);
    } catch (error) {
      console.error('❌ Ошибка загрузки категорий:', error);
      alert('Не удалось загрузить категории');
    } finally {
      setLoading(false);
    }
  };

  // Загружаем компоненты для конкретной категории
  const loadComponents = async (categoryId) => {
    try {
      const componentsData = await window.api.database.getComponents(categoryId);
      setComponents(prev => ({
        ...prev,
        [categoryId]: componentsData
      }));
    } catch (error) {
      console.error('❌ Ошибка загрузки компонентов:', error);
    }
  };

  const toggleCategory = async (category) => {
    const isExpanding = !expandedCategories[category.id];

    setExpandedCategories(prev => ({
      ...prev,
      [category.id]: isExpanding
    }));

    // Загружаем компоненты при первом раскрытии категории
    if (isExpanding && !components[category.id]) {
      await loadComponents(category.id);
    }
  };

  const handleComponentSelect = (component) => {
    console.log('Выбран компонент:', component);
    if (onComponentSelect) {
      onComponentSelect(component);
    }
  };

  // Обработчик правого клика на категорию
  const handleCategoryContextMenu = (e, category) => {
    e.preventDefault();
    e.stopPropagation();

    setContextMenu({
      isOpen: true,
      x: e.clientX,
      y: e.clientY,
      category: category
    });
  };

  // Закрытие контекстного меню
  const handleCloseContextMenu = () => {
    setContextMenu({
      isOpen: false,
      x: 0,
      y: 0,
      category: null
    });
  };

  // Обработчик переименования категории
  const handleRenameCategory = () => {
    if (contextMenu.category) {
      setEditModal({
        isOpen: true,
        category: contextMenu.category
      });
    }
  };

  // Обработчик удаления категории
  const handleDeleteCategory = () => {
    if (contextMenu.category) {
      setConfirmationDialog({
        isOpen: true,
        category: contextMenu.category
      });
    }
  };

  // Подтверждение удаления категории
  const handleConfirmDelete = async () => {
    if (confirmationDialog.category) {
      try {
        const result = await window.api.database.deleteCategory(confirmationDialog.category.id);
        if (result.success) {
          console.log('✅ Категория удалена:', confirmationDialog.category.id);
          await loadCategories(); // Перезагружаем список категорий

          // Если удаленная категория была выбрана, сбрасываем выбор
          if (selectedCategory?.id === confirmationDialog.category.id) {
            onCategorySelect(null);
          }
        } else {
          alert(`❌ Ошибка: ${result.error}`);
        }
      } catch (error) {
        console.error('❌ Ошибка удаления категории:', error);
        alert('Не удалось удалить категорию');
      }
    }
  };

  // Сохранение переименованной категории
  const handleSaveRenamedCategory = async (newName) => {
    if (editModal.category) {
      try {
        const result = await window.api.database.updateCategory(editModal.category.id, newName);
        if (result.success) {
          console.log('✅ Категория переименована');
          await loadCategories();
          setEditModal({ isOpen: false, category: null });
        } else {
          alert(`❌ Ошибка: ${result.error}`);
        }
      } catch (error) {
        console.error('❌ Ошибка переименования категории:', error);
        alert('Не удалось переименовать категорию');
      }
    }
  };

  // Функции для добавления категории (существующие)
  const handleAddCategory = () => {
    setIsModalOpen(true);
  };

  const handleSaveCategory = async (categoryName) => {
    try {
      const result = await window.api.database.addCategory(categoryName.trim());
      if (result.success) {
        console.log('✅ Категория добавлена:', result.id);
        await loadCategories();
        setIsModalOpen(false);
      } else {
        alert(`❌ Ошибка: ${result.error}`);
      }
    } catch (error) {
      console.error('❌ Ошибка добавления категории:', error);
      alert('Не удалось добавить категорию');
    }
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };




  const handleAddComponent = () => {
    setIsComponentModalOpen(true);
  };


  const handleSaveComponent = async (componentData) => {
    try {
      const result = await window.api.database.addComponent(componentData);
      if (result.success) {
        console.log('✅ Компонент добавлен:', result.id);

        // Безопасная проверка: перезагружаем компоненты только если категория выбрана и совпадает
        if (selectedCategory?.id === componentData.category_id) {
          await loadComponents(componentData.category_id);
        }

        // Всегда перезагружаем категории для обновления счетчиков
        await loadCategories();

        // ВЫЗОВ НОВОГО ПРОПСА - УВЕДОМЛЕНИЕ О СОЗДАНИИ НОВОГО КОМПОНЕНТА
        if (onComponentUpdated && result.id) {
          const newComponent = await window.api.database.getComponent(result.id);
          onComponentUpdated(newComponent);
        }

      } else {
        alert(`❌ Ошибка: ${result.error}`);
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('❌ Ошибка добавления компонента:', error);
      throw error;
    }
  };


  const handleCategoryClick = (category) => {
    if (onCategorySelect) {
      onCategorySelect(category);
    }
  };

  const [componentContextMenu, setComponentContextMenu] = useState({
    isOpen: false,
    x: 0,
    y: 0,
    component: null
  });

  const [deleteConfirmation, setDeleteConfirmation] = useState({
    isOpen: false,
    component: null
  });

  const [editComponentModal, setEditComponentModal] = useState({
    isOpen: false,
    component: null
  });

  // Функции для работы с контекстным меню компонентов
  const handleComponentContextMenu = (e, component) => {
    e.preventDefault();
    e.stopPropagation();

    setComponentContextMenu({
      isOpen: true,
      x: e.clientX,
      y: e.clientY,
      component: component
    });
  };

  const handleCloseComponentContextMenu = () => {
    setComponentContextMenu({
      isOpen: false,
      x: 0,
      y: 0,
      component: null
    });
  };

  const handleEditComponent = () => {
    if (componentContextMenu.component) {
      setEditComponentModal({
        isOpen: true,
        component: componentContextMenu.component
      });
    }
  };

  const handleDeleteComponent = () => {
    if (componentContextMenu.component) {
      setDeleteConfirmation({
        isOpen: true,
        component: componentContextMenu.component
      });
    }
  };


  const handleConfirmDeleteComponent = async () => {
    if (deleteConfirmation.component) {
      try {
        const result = await window.api.database.deleteComponent(deleteConfirmation.component.id);
        if (result.success) {
          console.log('✅ Компонент удален:', deleteConfirmation.component.id);

          // Перезагружаем компоненты текущей категории
          if (selectedCategory) {
            await loadComponents(selectedCategory.id);
          }

          // Сбрасываем выбор компонента через onComponentSelect
          if (onComponentSelect) {
            onComponentSelect(null);
          }

          // ВЫЗОВ НОВОГО ПРОПСА - УВЕДОМЛЕНИЕ ОБ УДАЛЕНИИ
          if (onComponentUpdated) {
            onComponentUpdated(null); // Передаем null, так как компонент удален
          }
        } else {
          alert(`❌ Ошибка: ${result.error}`);
        }
      } catch (error) {
        console.error('❌ Ошибка удаления компонента:', error);
        alert('Не удалось удалить компонент');
      }
    }

    setDeleteConfirmation({ isOpen: false, component: null });
  };


  const handleUpdateComponent = async (componentData) => {
    try {
      console.log('🔄 Updating component:', componentData);

      const result = await window.api.database.updateComponent(componentData);
      if (result.success) {
        console.log('✅ Компонент обновлен:', componentData.id);

        // Перезагружаем компоненты текущей категории
        if (selectedCategory) {
          await loadComponents(selectedCategory.id);
        }

        // Обновляем выбранный компонент
        if (onComponentSelect) {
          const updatedComponent = await window.api.database.getComponent(componentData.id);
          onComponentSelect(updatedComponent);
        }

        // Уведомляем родительский компонент об обновлении
        if (onComponentUpdated) {
          const updatedComponent = await window.api.database.getComponent(componentData.id);
          onComponentUpdated(updatedComponent);
        }

        return { success: true };
      } else {
        alert(`❌ Ошибка: ${result.error}`);
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('❌ Ошибка обновления компонента:', error);
      throw error;
    }
  };


  // Функция для выполнения поиска
  const handleSearch = async () => {
    if (!searchQuery.trim()) return;

    if (onSearch) {
      await onSearch(searchQuery);
    }
  };

  // Обработчик нажатия Enter
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  // Функция для сброса поиска (если нужна кнопка очистки)
  const handleClearSearch = () => {
    setSearchQuery('');
    // Если нужен сброс результатов в App, можно вызвать onSearch('')
    if (onSearch) {
      onSearch('');
    }
  };


  return (
    <aside className="sidebar">
      {/* Заголовок с кнопками */}
      <div className="sidebar__header">
        <div className="sidebar__title-wrapper">
          <h2 className="sidebar__title">Каталог</h2>
          <h2 className="sidebar__title">компонентов</h2>
        </div>
        <div className="sidebar__actions">
          <button
            className="sidebar__action-btn"
            onClick={handleAddCategory}
            title="Добавить категорию"
            disabled={loading}
          >
            <img src={addCategoryIcon} alt="Добавить категорию" />
          </button>
          <button
            className="sidebar__action-btn"
            onClick={handleAddComponent}
            title="Добавить компонент"
          // disabled={!selectedCategory || loading}
          >
            <img src={addComponentIcon} alt="Добавить компонент" />
          </button>
        </div>
      </div>



      {/* Форма поиска */}
      <div className="sidebar__search">
        <div className="search-input-container">
          <input
            type="text"
            className="search-input"
            placeholder="Поиск компонентов..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            onKeyPress={handleKeyPress}
          />
          <div className="search-buttons-container">
            <button
              className="search-btn"
              onClick={handleSearch}
              disabled={!searchQuery.trim()}
            >
              <span>Поиск</span>
            </button>
            <button
              className="clear-search-btn"
              onClick={handleClearSearch}
              disabled={!searchQuery}
            >
              <span>Сброс</span>
            </button>
          </div>
        </div>
      </div>




      {/* Модальное окно добавления категории */}
      <ModalAddCategory
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onSave={handleSaveCategory}
      />

      {/* Модальное окно редактирования категории */}
      <ModalAddCategory
        isOpen={editModal.isOpen}
        onClose={() => setEditModal({ isOpen: false, category: null })}
        onSave={handleSaveRenamedCategory}
        editMode={true}
        initialName={editModal.category?.name || ''}
      />

      <ModalAddComponent
        isOpen={isComponentModalOpen}
        onClose={() => setIsComponentModalOpen(false)}
        onSave={handleSaveComponent}
        categories={categories}
        selectedCategory={selectedCategory}
      />

      {/* Контекстное меню */}
      <ContextMenu
        x={contextMenu.x}
        y={contextMenu.y}
        isOpen={contextMenu.isOpen}
        onClose={handleCloseContextMenu}
        onRename={handleRenameCategory}
        onDelete={handleDeleteCategory}
      />

      {/* Диалог подтверждения удаления */}
      <ConfirmationDialog
        isOpen={confirmationDialog.isOpen}
        onClose={() => setConfirmationDialog({ isOpen: false, category: null })}
        onConfirm={handleConfirmDelete}
        title="Удалить категорию"
        message={`Вы уверены, что хотите удалить категорию "${confirmationDialog.category?.name}"? Все компоненты в этой категории также будут удалены.`}
      />

      {/* Контекстное меню для компонентов */}
      <ContextMenuComponent
        x={componentContextMenu.x}
        y={componentContextMenu.y}
        isOpen={componentContextMenu.isOpen}
        onClose={handleCloseComponentContextMenu}
        onEdit={handleEditComponent}
        onDelete={handleDeleteComponent}
      />

      {/* Диалог подтверждения удаления компонента */}
      <ConfirmationDialog
        isOpen={deleteConfirmation.isOpen}
        onClose={() => setDeleteConfirmation({ isOpen: false, component: null })}
        onConfirm={handleConfirmDeleteComponent}
        title="Удалить компонент"
        message={`Вы уверены, что хотите удалить компонент "${deleteConfirmation.component?.name}"?`}
      />

      {/* Модальное окно редактирования компонента */}
      <ModalAddComponent
        isOpen={editComponentModal.isOpen}
        onClose={() => setEditComponentModal({ isOpen: false, component: null })}
        onSave={handleUpdateComponent}
        categories={categories}
        selectedCategory={selectedCategory}
        editMode={true}
        componentData={editComponentModal.component}
      />

      <nav className="sidebar__nav">
        {loading ? (
          <div className="sidebar__loading">Загрузка...</div>
        ) : (
          <ul className="sidebar__category-list">
            {categories.map((category) => (
              <li key={category.id} className="sidebar__category-item">
                <div className="sidebar__category-header">
                  <button
                    className={`sidebar__category-button ${selectedCategory?.id === category.id ? 'sidebar__category-button--active' : ''
                      }`}
                    onClick={() => {
                      toggleCategory(category);
                      handleCategoryClick(category);
                    }}
                    onContextMenu={(e) => handleCategoryContextMenu(e, category)}
                  >
                    <div className="sidebar__category-content">
                      <img
                        src={folderIcon}
                        alt="Папка"
                        className="sidebar__folder-icon"
                      />
                      <span className="sidebar__category-name">{category.name}</span>
                    </div>
                    <span className={`sidebar__triangle ${expandedCategories[category.id] ? 'sidebar__triangle--expanded' : ''
                      }`}>
                      ▼
                    </span>
                  </button>
                </div>

                {expandedCategories[category.id] && components[category.id] && (
                  <ul className="sidebar__components-list">






                    {components[category.id]
                      .sort((a, b) => a.name.localeCompare(b.name))
                      .map((component) => (
                        <li key={component.id} className="sidebar__component-item">
                          <div className="sidebar__component-wrapper">
                            <button
                              className="sidebar__component-button"
                              onClick={() => handleComponentSelect(component)}
                              title={`Количество: ${component.quantity || 0}`}
                            >

                              <img
                                src={pictoComponentIcon}
                                alt="Компонент"
                                className="sidebar__component-icon"
                              />
                              <span className="sidebar__component-name">{component.name}</span>
                            </button>
                            <button
                              className="sidebar__component-menu-btn"
                              onClick={(e) => {
                                e.stopPropagation();
                                handleComponentContextMenu(e, component);
                              }}
                              title="Действия с компонентом"
                            >
                              ⋮
                            </button>
                          </div>
                        </li>
                      ))
                    }




                    {components[category.id]?.length === 0 && (
                      <li className="sidebar__component-item">
                        <div className="sidebar__component-empty">
                          Нет компонентов
                        </div>
                      </li>
                    )}
                  </ul>
                )}
              </li>
            ))}
          </ul>
        )}

        {!loading && categories.length === 0 && (
          <div className="sidebar__empty">
            Категории не найдены
          </div>
        )}
      </nav>



    </aside>
  );
};

export default Sidebar;














































11) Файл renderer/src/styles/App.css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background-color: #f5f5f5;
  overflow: hidden;
}

.app {
  display: flex;
  width: 100vw;
  height: 100vh;
  background-color: white;
  min-width: 1200px;
  min-height: 800px;
}

.main-content {
  flex: 1;
  min-width: 900px;
  padding: 40px;
  overflow-y: auto;
  overflow-x: hidden;
  height: 100vh;
  background-color: white;
}

.content-wrapper {
  width: 100%;
  max-width: 100%;
  min-width: 0;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.welcome-message {
  text-align: center;
  max-width: 500px;
  width: 100%;
}

.welcome-icon {
  width: 80px;
  height: 80px;
  object-fit: contain;
  margin-bottom: 24px;
  opacity: 0.7;
}

.welcome-message h1 {
  font-size: 24px;
  font-weight: 600;
  color: #1a202c;
  margin-bottom: 12px;
  white-space: normal;
  line-height: 1.4;
}

.welcome-message p {
  color: #718096;
  margin-bottom: 24px;
  white-space: normal;
  line-height: 1.5;
}

.divider {
  height: 1px;
  background-color: #e2e8f0;
  margin: 24px auto;
  width: 100%;
  max-width: 300px;
}

@media (min-width: 1200px) {
  .app {
    min-width: 100vw;
  }
  
  .main-content {
    /* min-width: calc(100vw - 300px); */
    width: 100%;
  }
}

@media (max-width: 1199px) {
  .app {
    min-width: 1200px;
    overflow-x: auto;
  }
}





































12) Файл renderer/src/styles/ComponentList.css
.component-view {
  padding: 20px;
  height: 100%;
  overflow-y: auto;
  background-color: #f8f9fa;
  font-family: 'Segoe UI', Arial, sans-serif;
  width: 1200px;
}

.component-card {
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  max-width: 100%;
  margin: 0 auto;
  border: 1px solid #e5e7eb;
}

.component-header {
  background: #f5f5f5;
  padding: 20px;
  border-bottom: 1px solid #e0e0e0;
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 15px;
}

.component-title {
  margin: 0;
  font-size: 24px;
  font-weight: bold;
  color: #333;
  flex: 1;
  min-width: 0;
}

.btn-edit-component {
  background: #4299e1;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 8px 12px;
  cursor: pointer;
  transition: all 0.2s;
  display: flex; /* РАЗКОММЕНТИРОВАТЬ! */
  align-items: center;
  justify-content: center;
  gap: 8px; /* Добавить отступ между иконкой и текстом */
  width: 150px;
  height: 30px;
  font-size: 14px;
  font-weight: 500;
}

.btn-edit-component svg {
  flex-shrink: 0;
}

.btn-edit-component:hover {
  background: #3182ce;
  transform: scale(1.05);
}


.btn-edit-component .fas {
  font-size: 14px;
  color: white;
}


.component-content {
  padding: 20px;
}

.top-section {
  display: flex;
  gap: 30px;
  align-items: flex-start;
  margin-bottom: 20px;
}

.info-section {
  width: 300px;
}

.info-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 0;
  border-bottom: 1px solid #f0f0f0;
}

.info-row:last-child {
  border-bottom: none;
}

.info-label {
  font-weight: 600;
  color: #666;
  min-width: 120px;
}

.info-value {
  color: #333;
}

.image-section-right {
  width: 500px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin: 0 auto;
}

.image-container {
  text-align: center;
  background: #f8f9fa;
  padding: 15px;
  border-radius: 6px;
  border: 1px solid #e0e0e0;
  width: 100%;
}

.image-container > div {
  display: flex;
  justify-content: center; /* Центрируем кнопку по горизонтали */
  margin-top: 15px;
}

.component-image {
  max-width: 100%;
  max-height: 300px;
  border-radius: 4px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.image-placeholder {
  text-align: center;
  background: #f8f9fa;
  padding: 30px 20px;
  border-radius: 6px;
  border: 2px dashed #dee2e6;
  width: 100%;
  color: #6c757d;
}

.btn {
  border-radius: 4px;
  font-weight: 500;
  transition: all 0.3s ease;
  border: none;
  padding: 6px 12px;
  font-size: 0.875rem;
  cursor: pointer;
}

.btn-primary {
  background: #007bff;
  color: white;
}

.btn-primary:hover {
  background: #0056b3;
}

.btn-outline-primary {
  background: transparent;
  border: 1px solid #007bff;
  color: #007bff;
}

.btn-outline-primary:hover {
  background: #007bff;
  color: white;
}

.btn-sm {
  padding: 4px 8px;
  font-size: 0.8rem;
}

.datasheet-link {
  color: #007bff;
  text-decoration: none;
  font-weight: 500;
  padding: 4px 8px;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.datasheet-link:hover {
  background-color: #f0f7ff;
  text-decoration: underline;
}

.divider {
  height: 1px;
  background: #e0e0e0;
  margin: 20px 0;
}

.section-title {
  font-size: 18px;
  font-weight: bold;
  color: #333;
  margin-bottom: 15px;
}

.description-section {
  margin-bottom: 20px;
}

.description-content {
  background: #f8f9fa;
  padding: 15px;
  border-radius: 4px;
  border-left: 4px solid #007bff;
  color: #555;
  line-height: 1.5;
}

.parameters-section-full {
  width: 100%;
}

.no-parameters {
  text-align: center;
  color: #999;
  padding: 40px 20px;
  background: #f8f9fa;
  border-radius: 6px;
  border: 2px dashed #dee2e6;
}

.text-center.text-muted {
  padding: 4rem 1rem;
  background: white;
  border-radius: 8px;
  border: 2px dashed #dee2e6;
  text-align: center;
}

.text-center.text-muted .fa-microchip {
  color: #bdc3c7;
  margin-bottom: 1rem;
}

.text-center.text-muted h4 {
  color: #7f8c8d;
  font-weight: 500;
}

.text-center.text-muted p {
  color: #95a5a6;
  margin: 0;
}

.fas {
  margin-right: 0.5rem;
}



/* Стили для модального окна изображения */
.image-modal {
  max-width: 500px;
}

.image-modal .image-preview {
  height: 300px;
  margin-bottom: 20px;
}

.image-modal .image-preview-img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

/* Медиа-запросы */
@media (max-width: 768px) {
  .component-view {
    padding: 15px;
  }
  
  .component-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }
  
  .component-title {
    font-size: 20px;
  }
  
  /* .btn-edit-component {
    align-self: stretch;
    justify-content: center;
  } */
  
  .top-section {
    flex-direction: column;
    gap: 20px;
  }
  
  .image-section-right {
    width: 100%;
    max-width: 300px;
  }
  
  .info-section {
    width: 100%;
  }
  
  .parameters-table-container {
    max-height: 300px;
  }
  
  .parameters-table-full th,
  .parameters-table-full td {
    padding: 10px 12px;
    font-size: 13px;
  }
  
  .parameters-table-full .parameter-name-header {
    width: 40%;
  }
  
  .parameters-table-full .parameter-value-header {
    width: 60%;
  }
  
  .image-modal {
    margin: 20px;
    max-width: calc(100vw - 40px);
  }
  
  .image-modal .image-preview {
    height: 250px;
  }
}

@media (max-width: 576px) {
  .component-header {
    padding: 15px;
  }
  
  .component-title {
    font-size: 18px;
  }
  
  /* .btn-edit-component {
    padding: 10px 16px;
    font-size: 13px;
  } */
  
  .component-content {
    padding: 15px;
  }
  
  .info-row {
    flex-direction: column;
    align-items: flex-start;
    gap: 4px;
  }
  
  .parameters-table-container {
    max-height: 250px;
  }
  
  .parameters-table-full th,
  .parameters-table-full td {
    padding: 8px 10px;
    font-size: 12px;
  }
  
  .parameters-table-full .parameter-name-header {
    width: 45%;
  }
  
  .parameters-table-full .parameter-value-header {
    width: 55%;
  }
  
  .image-modal .image-preview {
    height: 200px;
  }
}





.new-parameters-container {
  max-height: 400px;
  overflow-y: auto;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  background: white;
}

.new-parameters-table {
  width: 100%;
  border-collapse: collapse;
  margin: 0;
}

.new-parameters-table thead {
  position: sticky;
  top: 0;
  z-index: 10;
}

.new-parameters-table th {
  background: #f8f9fa;
  border-bottom: 2px solid #e0e0e0;
  padding: 12px 15px;
  text-align: left;
  font-weight: 600;
  color: #333;
  font-size: 14px;
}

.new-parameters-table .new-param-name-header {
  width: 35%;
  border-right: 1px solid #e0e0e0;
}

.new-parameters-table .new-param-value-header {
  width: 65%;
}

.new-parameters-table td {
  padding: 12px 15px;
  border-bottom: 1px solid #f0f0f0;
  vertical-align: top;
}

.new-parameters-table .new-param-name-cell {
  border-right: 1px solid #f0f0f0;
  font-weight: 600;
  color: #555;
  background: #fafbfc;
}

.new-parameters-table .new-param-value-cell {
  color: #333;
  background: white;
}

.new-parameters-table tbody tr:hover {
  background-color: #f8f9fa;
}

.new-parameters-table tbody tr:last-child td {
  border-bottom: none;
}

/* Медиа-запросы для новой таблицы */
@media (max-width: 768px) {
  .new-parameters-container {
    max-height: 300px;
  }
  
  .new-parameters-table th,
  .new-parameters-table td {
    padding: 10px 12px;
    font-size: 13px;
  }
}

@media (max-width: 576px) {
  .new-parameters-container {
    max-height: 250px;
  }
  
  .new-parameters-table th,
  .new-parameters-table td {
    padding: 8px 10px;
    font-size: 12px;
  }
}

/* Принудительно разрешить выделение для всей таблицы параметров */
.parameters-section-full * {
  user-select: text !important;
  -webkit-user-select: text !important;
  -moz-user-select: text !important;
  -ms-user-select: text !important;
  cursor: text !important;
}

.button-update-image {
  background: #4299e1;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 8px 12px;
  cursor: pointer;
  transition: all 0.2s;
  display: flex; /* РАЗКОММЕНТИРОВАТЬ! */
  align-items: center;
  justify-content: center;
  gap: 8px; /* Добавить отступ между иконкой и текстом */
  width: 200px;
  height: 30px;
  font-size: 14px;
  font-weight: 500;
}

.button-update-image svg {
  flex-shrink: 0;
}

.button-update-image:hover {
  background: #3182ce;
  transform: scale(1.05);
}

/* Стили для иконки внутри кнопки */
.button-update-image .fas {
  font-size: 14px;
  color: white;
}






































13) Файл renderer/src/styles/ConfirmationDialog.css
.confirmation-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1001;
  animation: fadeIn 0.2s ease-out;
}

.confirmation-dialog {
  background: white;
  border-radius: 8px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  width: 90%;
  max-width: 400px;
  animation: slideIn 0.2s ease-out;
}

.confirmation-header {
  padding: 20px 24px 0;
}

.confirmation-title {
  margin: 0;
  font-size: 18px;
  font-weight: 600;
  color: #2d3748;
}

.confirmation-body {
  padding: 20px 24px;
  color: #4a5568;
}

.confirmation-footer {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  padding: 0 24px 20px;
}

.confirmation-btn {
  padding: 10px 16px;
  border: none;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  min-width: 80px;
}

.confirmation-btn-cancel {
  background-color: #f7fafc;
  color: #4a5568;
  border: 1px solid #e2e8f0;
}

.confirmation-btn-cancel:hover {
  background-color: #edf2f7;
  border-color: #cbd5e0;
}

.confirmation-btn-confirm {
  background-color: #e53e3e;
  color: white;
}

.confirmation-btn-confirm:hover {
  background-color: #c53030;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(-20px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}









































14) Файл renderer/src/styles/ContextMenu.css
.context-menu-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 999;
}

.context-menu {
  position: fixed;
  background: white;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
  padding: 4px;
  z-index: 1000;
  min-width: 150px;
  animation: contextMenuAppear 0.15s ease-out;
}

.context-menu-item {
  display: block;
  width: 100%;
  padding: 8px 12px;
  background: none;
  border: none;
  text-align: left;
  cursor: pointer;
  font-size: 14px;
  color: #4a5568;
  border-radius: 4px;
  transition: all 0.2s;
}

.context-menu-item:hover {
  background-color: #f7fafc;
  color: #2d3748;
}

.context-menu-item-delete {
  color: #e53e3e;
}

.context-menu-item-delete:hover {
  background-color: #fed7d7;
  color: #c53030;
}

@keyframes contextMenuAppear {
  from {
    opacity: 0;
    transform: scale(0.95) translateY(-5px);
  }
  to {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
}



































15) Файл renderer/src/styles/ModalAddCategory.css
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  animation: fadeIn 0.2s ease-out;
}

.modal-content {
  background: white;
  border-radius: 8px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  width: 90%;
  max-width: 500px;
  animation: slideIn 0.2s ease-out;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 24px 0;
  border-bottom: none;
}

.modal-title {
  margin: 0;
  font-size: 18px;
  font-weight: 600;
  color: #2d3748;
}

.modal-close-btn {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #718096;
  padding: 0;
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  transition: all 0.2s;
}

.modal-close-btn:hover {
  background-color: #f7fafc;
  color: #4a5568;
}

.modal-body {
  padding: 20px 24px;
}

.form-group {
  margin-bottom: 0;
}

.form-label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: #4a5568;
  font-size: 14px;
}

.form-control {
  width: 100%;
  padding: 10px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 14px;
  transition: all 0.2s;
  box-sizing: border-box;
}

.form-control:focus {
  outline: none;
  border-color: #4299e1;
  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
}

.form-control-error {
  border-color: #e53e3e;
}

.form-control-error:focus {
  border-color: #e53e3e;
  box-shadow: 0 0 0 3px rgba(229, 62, 62, 0.1);
}

.form-error {
  color: #e53e3e;
  font-size: 12px;
  margin-top: 6px;
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  padding: 0 24px 20px;
  border-top: none;
}

.btn {
  padding: 10px 16px;
  border: none;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  min-width: 80px;
}

.btn-secondary {
  background-color: #f7fafc;
  color: #4a5568;
  border: 1px solid #e2e8f0;
}

.btn-secondary:hover {
  background-color: #edf2f7;
  border-color: #cbd5e0;
}

.btn-primary {
  background-color: #4299e1;
  color: white;
}

.btn-primary:hover {
  background-color: #3182ce;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}


@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(-20px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}


@media (max-width: 600px) {
  .modal-content {
    width: 95%;
    margin: 20px;
  }
  
  .modal-header,
  .modal-body,
  .modal-footer {
    padding-left: 20px;
    padding-right: 20px;
  }
}




































16) Файл renderer/src/styles/Sidebar.css
.sidebar {
  width: 300px;
  min-width: 300px;
  max-width: 300px;
  background-color: #f8f9fa;
  border-right: 1px solid #e1e5e9;
  padding: 20px;
  overflow-y: auto;
  flex-shrink: 0;
  height: 100vh;
}

/* Новый заголовок с кнопками */
.sidebar__header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 20px;
  gap: 12px;
}

.sidebar__title-wrapper {
  flex: 1;
  min-width: 0;
}

.sidebar__title {
  font-size: 16px;
  font-weight: 600;
  color: #2d3748;
  line-height: 1.3;
  margin: 0;
  white-space: normal;
}

.sidebar__title:first-child {
  margin-bottom: 2px;
}

.sidebar__actions {
  display: flex;
  gap: 6px;
  flex-shrink: 0;
  margin-top: 2px;
}

.sidebar__action-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 50px;
  height: 50px;
  background: none;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  cursor: pointer;
  color: #718096;
  transition: all 0.2s;
  padding: 0;
}

.sidebar__action-btn:hover {
  background-color: #edf2f7;
  border-color: #cbd5e0;
  color: #4a5568;
}

.sidebar__action-btn:active {
  background-color: #e2e8f0;
}

.sidebar__nav {
  width: 100%;
}

.sidebar__category-list {
  list-style: none;
}

.sidebar__category-item {
  margin-bottom: 4px;
}

.sidebar__category-header {
  position: relative;
}

.sidebar__category-button {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  padding: 12px 16px;
  text-align: left;
  background: none;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 16px;
  color: #4a5568;
  transition: all 0.2s;
}

.sidebar__category-content {
  display: flex;
  align-items: center;
  flex: 1;
  gap: 8px;
}

.sidebar__folder-icon {
  width: 30px;
  height: 30px;
  object-fit: contain;
  opacity: 0.7;
  transition: opacity 0.2s;
}

.sidebar__category-name {
  flex: 1;
  font-weight: 700;
}

.sidebar__triangle {
  font-size: 10px;
  color: #000;
  transition: transform 0.2s ease;
  margin-left: 8px;
}

.sidebar__triangle--expanded {
  transform: rotate(180deg);
}

.sidebar__category-button:hover {
  background-color: #edf2f7;
  color: #2d3748;
}

.sidebar__category-button:hover .sidebar__folder-icon {
  opacity: 0.9;
}

.sidebar__category-button--active {
  background-color: #e2e8f0;
  color: #2d3748;
  font-weight: 500;
}

.sidebar__category-button--active .sidebar__folder-icon {
  opacity: 0.9;
}

.sidebar__category-button--active::before {
  content: '';
  position: absolute;
  left: -8px;
  top: 50%;
  transform: translateY(-50%);
  width: 3px;
  height: 20px;
  background-color: #4299e1;
  border-radius: 2px;
}

.sidebar__components-list {
  list-style: none;
  margin: 4px 0 8px 0;
  padding-left: 24px;
  border-left: 2px solid #e2e8f0;
  animation: sidebarSlideDown 0.2s ease-out;
  overflow: hidden;
  max-height: 0;
  animation: sidebarSlideDown 0.3s ease-out forwards;
}

.sidebar__component-item {
  margin-bottom: 2px;
}

.sidebar__component-button {
  width: 100%;
  padding: 8px 12px 8px 0;
  text-align: left;
  background: none;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 13px;
  color: #718096;
  transition: all 0.2s;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.sidebar__component-button:hover {
  background-color: #f7fafc;
  color: #4a5568;
}

.sidebar__component-button:active {
  background-color: #edf2f7;
}

@keyframes sidebarSlideDown {
  from {
    opacity: 0;
    max-height: 0;
  }
  to {
    opacity: 1;
    max-height: 500px;
  }
}

.sidebar__action-btn img {
  width: 40px;
  height: 40px;
  object-fit: contain;
  opacity: 0.8;
}

/* Добавьте эти стили в конец вашего Sidebar.css файла */

/* Стили для пустого состояния компонентов */
.sidebar__component-empty {
  padding: 8px 12px 8px 16px;
  color: #a0aec0;
  font-size: 13px;
  font-style: italic;
  text-align: center;
  background-color: #f7fafc;
  border-radius: 4px;
  margin: 4px 0;
}

/* Стили для количества компонентов */
.sidebar__component-quantity {
  font-size: 11px;
  color: #718096;
  margin-left: 6px;
  font-weight: normal;
}

/* Стили для состояния загрузки */
.sidebar__loading {
  text-align: center;
  padding: 20px;
  color: #718096;
  font-style: italic;
}

/* Стили для пустого состояния категорий */
.sidebar__empty {
  text-align: center;
  padding: 40px 20px;
  color: #a0aec0;
  font-style: italic;
  background-color: #f7fafc;
  border-radius: 8px;
  margin: 10px 0;
}

/* Улучшаем внешний вид кнопок компонентов с количеством */
.sidebar__component-button {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  padding: 8px 12px 8px 0;
  text-align: left;
  background: none;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 13px;
  color: #718096;
  transition: all 0.2s;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.sidebar__component-button:hover {
  background-color: #f7fafc;
  color: #4a5568;
}

.sidebar__component-wrapper {
  display: flex;
  align-items: center;
  gap: 8px;
  width: 100%;
}

.sidebar__component-button {
  flex: 1;
  padding: 8px 12px 8px 0;
  text-align: left;
  background: none;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 13px;
  color: #718096;
  transition: all 0.2s;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.sidebar__component-button:hover {
  background-color: #f7fafc;
  color: #4a5568;
}

.sidebar__component-menu-btn {
  background: none;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  color: #a0aec0;
  padding: 4px 8px;
  transition: all 0.2s;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
}

.sidebar__component-menu-btn:hover {
  background-color: #f7fafc;
  color: #4a5568;
}

/* Стили для пиктограмм компонентов */
.sidebar__component-button {
  display: flex;
  align-items: center;
  gap: 8px;
  width: 100%;
  padding: 8px 12px 8px 0;
  text-align: left;
  background: none;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 13px;
  color: #718096;
  transition: all 0.2s;
  white-space: nowrap;
  overflow: hidden;
}

.sidebar__component-icon {
  width: 30px;
  height: 30px;
  object-fit: contain;
  opacity: 0.7;
  flex-shrink: 0;
}

.sidebar__component-name {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.sidebar__component-button:hover {
  background-color: #f7fafc;
  color: #4a5568;
}

.sidebar__component-button:hover .sidebar__component-icon {
  opacity: 0.9;
}








/* Стили для поиска */

/* Стили для поиска */
.sidebar__search {
  padding: 0 0 16px 0;
  border-bottom: 1px solid #e2e8f0;
  margin-bottom: 16px;
}

.search-input-container {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.search-input {
  width: 100%;
  padding: 10px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 14px;
  transition: all 0.2s;
  box-sizing: border-box;
}

.search-input:focus {
  outline: none;
  border-color: #4299e1;
  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
}

/* Контейнер для кнопок */
.search-buttons-container {
  display: flex;
  gap: 8px;
  width: 100%;
}

.search-btn {
  background: #4299e1;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 10px 16px;
  cursor: pointer;
  transition: all 0.2s;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  font-size: 14px;
  font-weight: 500;
  white-space: nowrap;
  height: 40px;
  flex: 1; /* Равномерное распределение пространства */
  box-sizing: border-box;
}

.search-btn:hover {
  background: #3182ce;
}

.search-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.clear-search-btn {
  background: #f7fafc;
  border: 1px solid #e2e8f0;
  color: #718096;
  border-radius: 6px;
  padding: 10px 16px;
  cursor: pointer;
  transition: all 0.2s;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  font-size: 14px;
  font-weight: 500;
  white-space: nowrap;
  height: 40px;
  flex: 1; /* Равномерное распределение пространства */
  box-sizing: border-box;
}

.clear-search-btn:hover {
  background: #edf2f7;
  border-color: #cbd5e0;
  color: #4a5568;
}



/* Стили для результатов поиска в сайдбаре */
.search-results-sidebar {
  padding: 8px 0;
}

.search-results-info {
  margin-bottom: 16px;
  padding: 0 8px;
}

.search-results-info h3 {
  margin: 0 0 8px 0;
  font-size: 16px;
  font-weight: 600;
  color: #2d3748;
}

.back-to-categories-btn {
  background: none;
  border: none;
  color: #4299e1;
  cursor: pointer;
  font-size: 13px;
  padding: 4px 8px;
  border-radius: 4px;
  transition: all 0.2s;
}

.back-to-categories-btn:hover {
  background: #f0f7ff;
  text-decoration: underline;
}

.search-results-sidebar-list {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.search-result-sidebar-item {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s;
  border: 1px solid transparent;
}

.search-result-sidebar-item:hover {
  background: #f7fafc;
  border-color: #e2e8f0;
}

.search-result-sidebar-name {
  flex: 1;
  font-size: 13px;
  color: #4a5568;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.search-result-sidebar-category {
  font-size: 11px;
  color: #a0aec0;
  background: #f7fafc;
  padding: 2px 6px;
  border-radius: 10px;
  white-space: nowrap;
}








































17) Файл renderer/src/styles/ContextMenuComponent.css
.context-menu-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 999;
}

.context-menu-component {
  position: fixed;
  background: white;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
  padding: 4px;
  z-index: 1000;
  min-width: 150px;
  animation: contextMenuAppear 0.15s ease-out;
}

.context-menu-item {
  display: block;
  width: 100%;
  padding: 8px 12px;
  background: none;
  border: none;
  text-align: left;
  cursor: pointer;
  font-size: 14px;
  color: #4a5568;
  border-radius: 4px;
  transition: all 0.2s;
}

.context-menu-item:hover {
  background-color: #f7fafc;
  color: #2d3748;
}

.context-menu-item-delete {
  color: #e53e3e;
}

.context-menu-item-delete:hover {
  background-color: #fed7d7;
  color: #c53030;
}

@keyframes contextMenuAppear {
  from {
    opacity: 0;
    transform: scale(0.95) translateY(-5px);
  }
  to {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
}





























18) Файл renderer/src/components/ContextMenuComponent.jsx
import React from 'react';
import '../styles/ContextMenuComponent.css';

const ContextMenuComponent = ({ 
  x, 
  y, 
  isOpen, 
  onClose, 
  onEdit, 
  onDelete 
}) => {
  if (!isOpen) return null;

  const handleEdit = () => {
    onEdit();
    onClose();
  };

  const handleDelete = () => {
    onDelete();
    onClose();
  };

  return (
    <>
      <div className="context-menu-overlay" onClick={onClose} />
      <div 
        className="context-menu-component" 
        style={{ top: y, left: x }}
        onClick={(e) => e.stopPropagation()}
      >
        <button className="context-menu-item" onClick={handleEdit}>
          Редактировать
        </button>
        <button className="context-menu-item context-menu-item-delete" onClick={handleDelete}>
          Удалить
        </button>
      </div>
    </>
  );
};

export default ContextMenuComponent;






























19) Файл renderer/src/components/ModalAddComponent.jsx
import React, { useState, useEffect, useCallback } from 'react';
import '../styles/ModalAddComponent.css';
import {
  FaEdit,
  FaSave,
  FaUpload,        // Стрелка вверх (загрузка)
  FaDownload,      // Стрелка вниз (скачивание)
  FaFileUpload,    // Файл со стрелкой вверх
  FaCloudUploadAlt, // Облако со стрелкой вверх
  FaImage,         // Изображение
  FaPhotoVideo,    // Фото/видео
  FaCamera         // Камера
} from 'react-icons/fa';

const ModalAddComponent = ({
  isOpen,
  onClose,
  onSave,
  categories = [],
  selectedCategory = null,
  editMode = false,
  componentData: initialComponentData = null
}) => {
  const [formData, setFormData] = useState({
    category_id: '',
    name: '',
    storage_cell: '',
    datasheet_url: '',
    quantity: 0,
    parameters: {},
    description: ''
  });

  const [newParameters, setNewParameters] = useState([{ key: '', value: '' }]);
  const [imageFile, setImageFile] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);
  const [currentDateTime, setCurrentDateTime] = useState('');
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [originalData, setOriginalData] = useState(null);

  // Функция для получения текущей даты и времени в нужном формате
  const getCurrentDateTime = () => {
    const now = new Date();
    return now.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Функция для корректного парсинга параметров
  const parseParameters = (parameters) => {
    if (!parameters) return [];

    console.log('🔍 Parsing parameters:', parameters);
    console.log('🔍 Parameters type:', typeof parameters);

    // Если parameters уже массив, возвращаем его
    if (Array.isArray(parameters)) {
      return parameters;
    }

    // Если parameters - объект с числовыми ключами (0,1,2...) - это разобранная строка
    if (typeof parameters === 'object' && parameters !== null) {
      const keys = Object.keys(parameters);

      // Проверяем, являются ли ключи числовыми (разобранная строка)
      if (keys.length > 0 && keys.every(key => !isNaN(key))) {
        console.log('⚠️ Parameters appear to be a parsed string, trying to reconstruct...');

        // Восстанавливаем исходную строку из символов
        const reconstructedString = keys.map(key => parameters[key]).join('');
        console.log('🔍 Reconstructed string:', reconstructedString);

        try {
          // Пытаемся распарсить восстановленную строку
          const parsed = JSON.parse(reconstructedString);
          console.log('✅ Successfully parsed reconstructed parameters:', parsed);

          // Преобразуем в массив для формы
          return Object.entries(parsed).map(([key, value]) => ({
            key,
            value: String(value)
          }));
        } catch (error) {
          console.error('❌ Failed to parse reconstructed string:', error);
          return [{ key: '', value: '' }];
        }
      }

      // Если это нормальный объект с строковыми ключами
      console.log('✅ Normal parameters object:', parameters);
      return Object.entries(parameters).map(([key, value]) => ({
        key,
        value: String(value)
      }));
    }

    // Если parameters - строка, пытаемся распарсить
    if (typeof parameters === 'string') {
      try {
        const parsed = JSON.parse(parameters);
        return Object.entries(parsed).map(([key, value]) => ({
          key,
          value: String(value)
        }));
      } catch (error) {
        console.error('❌ Failed to parse parameters string:', error);
        return [{ key: '', value: '' }];
      }
    }

    return [{ key: '', value: '' }];
  };

  // Функция для проверки наличия несохраненных изменений
  const hasChanges = useCallback(() => {
    if (!editMode || !originalData) return false;

    const currentData = {
      ...formData,
      parameters: Object.fromEntries(
        newParameters
          .filter(param => param.key.trim() && param.value.trim())
          .map(param => [param.key.trim(), param.value.trim()])
      ),
      image_data: imagePreview
    };

    return JSON.stringify(currentData) !== JSON.stringify(originalData);
  }, [formData, newParameters, imagePreview, editMode, originalData]);

  // Обработчик закрытия модального окна с подтверждением
  const handleCloseWithConfirmation = useCallback(() => {
    if (hasUnsavedChanges && hasChanges()) {
      const shouldSave = window.confirm(
        'У вас есть несохраненные изменения. Хотите сохранить перед закрытием?'
      );

      if (shouldSave) {
        // Сохраняем изменения
        handleSubmit(new Event('submit'));
      } else {
        // Закрываем без сохранения
        onClose();
      }
    } else {
      // Нет изменений, просто закрываем
      onClose();
    }
  }, [hasUnsavedChanges, hasChanges, onClose]);

  // Обработчик клика по оверлею
  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      handleCloseWithConfirmation();
    }
  };

  // Обработчик нажатия ESC
  useEffect(() => {
    const handleEscKey = (e) => {
      if (e.keyCode === 27 && isOpen) {
        handleCloseWithConfirmation();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscKey);
      return () => {
        document.removeEventListener('keydown', handleEscKey);
      };
    }
  }, [isOpen, handleCloseWithConfirmation]);

  // Обновляем время каждую секунду
  useEffect(() => {
    if (isOpen) {
      setCurrentDateTime(getCurrentDateTime());
      const interval = setInterval(() => {
        setCurrentDateTime(getCurrentDateTime());
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [isOpen]);

  // Сбрасываем форму при открытии/закрытии
  useEffect(() => {
    if (isOpen) {
      if (editMode && initialComponentData) {
        console.log('📝 Edit mode - initial data:', initialComponentData);

        // Сохраняем оригинальные данные для сравнения
        const original = {
          category_id: initialComponentData.category_id || '',
          name: initialComponentData.name || '',
          storage_cell: initialComponentData.storage_cell || '',
          datasheet_url: initialComponentData.datasheet_url || '',
          quantity: initialComponentData.quantity || 0,
          parameters: initialComponentData.parameters || {},
          description: initialComponentData.description || '',
          image_data: initialComponentData.image_data || null
        };
        setOriginalData(original);

        setFormData({
          category_id: initialComponentData.category_id || '',
          name: initialComponentData.name || '',
          storage_cell: initialComponentData.storage_cell || '',
          datasheet_url: initialComponentData.datasheet_url || '',
          quantity: initialComponentData.quantity || 0,
          parameters: initialComponentData.parameters || {},
          description: initialComponentData.description || ''
        });

        // Используем функцию корректного парсинга параметров
        const parametersArray = parseParameters(initialComponentData.parameters);
        console.log('✅ Parsed parameters for form:', parametersArray);

        setNewParameters(parametersArray.length > 0 ? parametersArray : [{ key: '', value: '' }]);
        setImagePreview(initialComponentData.image_data || null);
        setHasUnsavedChanges(false);
      } else {
        // Режим добавления - сбрасываем форму
        const initialCategoryId = selectedCategory?.id || (categories[0]?.id || '');

        setFormData({
          category_id: initialCategoryId,
          name: '',
          storage_cell: '',
          datasheet_url: '',
          quantity: 0,
          parameters: {},
          description: ''
        });

        setNewParameters([{ key: '', value: '' }]);
        setImageFile(null);
        setImagePreview(null);
        setOriginalData(null);
        setHasUnsavedChanges(false);
      }
    }
  }, [isOpen, selectedCategory, categories, editMode, initialComponentData]);

  // Отслеживаем изменения в форме
  useEffect(() => {
    if (isOpen && editMode) {
      const changesExist = hasChanges();
      setHasUnsavedChanges(changesExist);
    }
  }, [formData, newParameters, imagePreview, isOpen, editMode, hasChanges]);

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleParameterChange = (index, field, value) => {
    const updated = [...newParameters];
    updated[index][field] = value;
    setNewParameters(updated);
  };

  const addParameterField = () => {
    setNewParameters(prev => [...prev, { key: '', value: '' }]);
  };

  const removeParameterField = (index) => {
    if (newParameters.length > 1) {
      setNewParameters(prev => prev.filter((_, i) => i !== index));
    }
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImageFile(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();


    console.log('📝 Form submitted with data:', {
      formData,
      newParameters,
      imagePreview: !!imagePreview,
      editMode,
      initialComponentData
    });


    // Валидация
    if (!formData.category_id) {
      alert('Выберите категорию');
      return;
    }

    if (!formData.name.trim()) {
      alert('Введите название компонента');
      return;
    }

    // Собираем параметры в объект
    const parameters = {};
    newParameters.forEach(param => {
      if (param.key.trim() && param.value.trim()) {
        parameters[param.key.trim()] = param.value.trim();
      }
    });

    console.log('💾 Saving parameters:', parameters);

    const componentData = {
      ...formData,
      parameters,
      updated_at: new Date().toISOString(),
      image_data: imagePreview
    };

    // Добавляем ID компонента в режиме редактирования
    if (editMode && initialComponentData) {
      componentData.id = initialComponentData.id;
    }

    console.log('💾 Final component data to save:', componentData);

    try {
      await onSave(componentData);
      console.log('✅ Save successful');
      setHasUnsavedChanges(false);
      onClose();
    } catch (error) {
      console.error('Ошибка при сохранении компонента:', error);
      console.error('❌ Error saving component:', error);
      alert('Не удалось сохранить компонент');
    }
  };

  const handleCancel = () => {
    handleCloseWithConfirmation();
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={handleOverlayClick}>
      <div className="modal-content modal-add-component" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2 className="modal-title">
            {editMode ? 'Редактировать компонент' : 'Добавить компонент'}
            {hasUnsavedChanges && <span className="unsaved-changes-indicator"> •</span>}
          </h2>
          <button
            type="button"
            className="modal-close-btn"
            onClick={handleCancel}
          >
            ×
          </button>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="modal-body">
            {/* Категория */}
            <div className="form-section">
              <h3 className="section-title">Категория</h3>
              <div className="form-row">
                <div className="form-group full-width">
                  <select
                    className="form-control"
                    value={formData.category_id}
                    onChange={(e) => handleInputChange('category_id', e.target.value)}
                    required
                  >
                    <option value="">Выберите категорию</option>
                    {categories.map(category => (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
            </div>

            {/* Название компонента */}
            <div className="form-section">
              <h3 className="section-title">Название</h3>
              <div className="form-row">
                <div className="form-group full-width">
                  <input
                    type="text"
                    className="form-control"
                    placeholder="Введите название компонента"
                    value={formData.name}
                    onChange={(e) => handleInputChange('name', e.target.value)}
                    required
                  />
                </div>
              </div>
            </div>

            {/* Ячейка хранения */}
            <div className="form-section">
              <h3 className="section-title">Ячейка хранения</h3>
              <div className="form-row">
                <div className="form-group full-width">
                  <input
                    type="text"
                    className="form-control"
                    placeholder="Например: A-12-5"
                    value={formData.storage_cell}
                    onChange={(e) => handleInputChange('storage_cell', e.target.value)}
                  />
                </div>
              </div>
            </div>

            {/* Ссылка на datasheet */}
            <div className="form-section">
              <h3 className="section-title">Ссылка на datasheet</h3>
              <div className="form-row">
                <div className="form-group full-width">
                  <input
                    type="url"
                    className="form-control"
                    placeholder="https://example.com/datasheet.pdf"
                    value={formData.datasheet_url}
                    onChange={(e) => handleInputChange('datasheet_url', e.target.value)}
                  />
                </div>
              </div>
            </div>



            {/* Количество */}
            {/*
            <div className="form-section">
              <h3 className="section-title">Количество</h3>
              <div className="form-row">
                <div className="form-group full-width">
                  <input
                    type="number"
                    className="form-control"
                    // placeholder="0"
                    value={formData.quantity}
                    onChange={(e) => {
                      const value = e.target.value;
                      console.log('🔢 Raw input value:', value, 'Type:', typeof value);
                      let numericValue;
                      if (value === '' || value === null || value === undefined) {
                        numericValue = 0;
                      } else {
                        numericValue = Number(value);
                        if (isNaN(numericValue)) {
                          numericValue = 0;
                        }
                      }

                      console.log('🔢 Converted value:', numericValue);
                      handleInputChange('quantity', numericValue);
                    }}
                    onFocus={(e) => {
                      e.target.select();
                    }}
                    min="0"
                    step="1"
                  />
                </div>
              </div>
            </div> */}
            {/* Количество */}
            <div className="form-section">
              <h3 className="section-title">Количество</h3>
              <div className="form-row">
                <div className="form-group full-width">
                  <input
                    type="number"
                    className="form-control"
                    value={formData.quantity === 0 ? "" : formData.quantity} // Показываем пустую строку вместо 0
                    onChange={(e) => {
                      const value = e.target.value;
                      
                      if (value === '') {
                        handleInputChange('quantity', 0);
                      } else {
                        const numericValue = parseInt(value, 10);
                        if (!isNaN(numericValue) && numericValue >= 0) {
                          handleInputChange('quantity', numericValue);
                        }
                      }
                    }}
                    onFocus={(e) => {
                      // Если значение 0, очищаем поле при фокусе
                      if (formData.quantity === 0) {
                        e.target.value = "";
                      }
                      e.target.select();
                    }}
                    onBlur={(e) => {
                      // Если поле пустое при потере фокуса, устанавливаем 0
                      if (e.target.value === '') {
                        handleInputChange('quantity', 0);
                      }
                    }}
                    min="0"
                    step="1"
                  />
                </div>
              </div>
            </div>


            {/* Дата последнего обновления */}
            <div className="form-section">
              <h3 className="section-title">Дата последнего обновления</h3>
              <div className="form-row">
                <div className="form-group full-width">
                  <div className="datetime-display-container">
                    <div className="datetime-display">
                      {currentDateTime || getCurrentDateTime()}
                    </div>
                    <div className="datetime-hint">
                      Время будет установлено автоматически при сохранении
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Описание */}
            <div className="form-section">
              <h3 className="section-title">Описание</h3>
              <div className="form-row">
                <div className="form-group full-width">
                  <textarea
                    className="form-control textarea-description"
                    placeholder="Введите описание компонента и его применение..."
                    value={formData.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    rows="4"
                  />
                </div>
              </div>
            </div>

            {/* Параметры - ТАБЛИЧНЫЙ ВИД */}
            <div className="form-section">
              <h3 className="section-title">Параметры</h3>

              <div className="parameters-table-container">
                {/* Заголовок таблицы */}
                <div className="parameters-table-header">
                  <div className="parameter-name-header">Параметр</div>
                  <div className="parameter-value-header">Значение</div>
                  <div className="parameter-actions-header">Действия</div>
                </div>

                {/* Тело таблицы */}
                <div className="parameters-table-body">
                  {newParameters.map((param, index) => (
                    <div key={index} className="parameter-table-row">
                      <div className="parameter-name-cell">
                        <input
                          type="text"
                          className="form-control parameter-input"
                          placeholder="Например: Напряжение питания"
                          value={param.key}
                          onChange={(e) => handleParameterChange(index, 'key', e.target.value)}
                        />
                      </div>
                      <div className="parameter-value-cell">
                        <input
                          type="text"
                          className="form-control parameter-input"
                          placeholder="Например: 5 В"
                          value={param.value}
                          onChange={(e) => handleParameterChange(index, 'value', e.target.value)}
                        />
                      </div>
                      <div className="parameter-actions-cell">
                        {newParameters.length > 1 && (
                          <button
                            type="button"
                            className="parameter-remove-btn table-remove-btn"
                            onClick={() => removeParameterField(index)}
                            title="Удалить параметр"
                          >
                            ×
                          </button>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <button
                type="button"
                className="add-param-btn table-add-btn"
                onClick={addParameterField}
              >
                + Добавить параметр
              </button>
            </div>

            <div className="divider"></div>

            {/* Изображение компонента */}
            <div className="form-section">
              <h3 className="section-title">Изображение компонента</h3>
              <div className="image-upload-section">
                <div className="image-preview">
                  {imagePreview ? (
                    <img src={imagePreview} alt="Предпросмотр" className="image-preview-img" />
                  ) : (
                    <div className="image-placeholder">
                      <span>Изображение не загружено</span>
                    </div>
                  )}
                </div>

                <div className="file-input-wrapper">
                  <input
                    type="file"
                    id="component-image"
                    accept="image/*"
                    onChange={handleImageChange}
                    className="file-input"
                  />
                  
                  <label htmlFor="component-image" className="file-input-label">
                  <FaFileUpload size={14} />                 
                    Загрузить изображение
                  </label>
                </div>
              </div>
            </div>
          </div>

          <div className="modal-footer">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={handleCancel}
            >
              Отмена
            </button>
            <button
              type="submit"
              // className="btn btn-primary"
              className="button-save-change"
            >
              <FaSave size={14} />
              {editMode ? 'Сохранить изменения' : 'Сохранить'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ModalAddComponent;
































20) Файл ModalAddComponent.css
/* renderer/src/styles/ModalAddComponent.css */
.modal-add-component {
  max-width: 700px;
  max-height: 90vh;
  overflow-y: auto;
}

.modal-add-component .modal-body {
  padding: 20px 24px;
}

.form-section {
  margin-bottom: 24px;
}

.section-title {
  font-weight: 600;
  margin-bottom: 12px;
  font-size: 16px;
  color: #2d3748;
  display: flex;
  align-items: center;
}

.section-title::before {
  content: '';
  display: inline-block;
  width: 4px;
  height: 16px;
  background-color: #4299e1;
  margin-right: 8px;
  border-radius: 2px;
}

.form-row {
  display: flex;
  gap: 12px;
  margin-bottom: 12px;
}

.form-group {
  flex: 1;
}

.form-group.full-width {
  width: 100%;
}

.form-control {
  width: 100%;
  padding: 10px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 14px;
  transition: all 0.2s;
  box-sizing: border-box;
}

.form-control:focus {
  outline: none;
  border-color: #4299e1;
  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
}

/* Стили для datetime */
.datetime-display-container {
  padding: 12px;
  background-color: #f7fafc;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
}

.datetime-display {
  font-size: 16px;
  font-weight: 600;
  color: #2d3748;
  text-align: center;
  margin-bottom: 8px;
}

.datetime-hint {
  font-size: 12px;
  color: #718096;
  text-align: center;
  font-style: italic;
}

/* СТИЛИ ДЛЯ ТАБЛИЧНОГО ОТОБРАЖЕНИЯ ПАРАМЕТРОВ */
.parameters-table-container {
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  overflow: hidden;
  background: white;
  margin-bottom: 15px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.parameters-table-header {
  display: flex;
  background: #f8fafc;
  border-bottom: 2px solid #e2e8f0;
  font-weight: 600;
  color: #2d3748;
  font-size: 14px;
}

.parameter-name-header,
.parameter-value-header,
.parameter-actions-header {
  padding: 12px 16px;
  font-weight: 600;
}

.parameter-name-header {
  flex: 2;
  border-right: 1px solid #e2e8f0;
  background: #f1f5f9;
}

.parameter-value-header {
  flex: 3;
  border-right: 1px solid #e2e8f0;
}

.parameter-actions-header {
  flex: 0.5;
  text-align: center;
  background: #f1f5f9;
}

.parameters-table-body {
  max-height: 300px;
  overflow-y: auto;
}

.parameter-table-row {
  display: flex;
  border-bottom: 1px solid #f1f5f9;
  transition: background-color 0.2s;
  align-items: stretch;
  background: white;
}

.parameter-table-row:hover {
  background-color: #f8fafc;
}

.parameter-table-row:last-child {
  border-bottom: none;
}

.parameter-name-cell,
.parameter-value-cell,
.parameter-actions-cell {
  padding: 8px 16px;
  display: flex;
  align-items: center;
}

.parameter-name-cell {
  flex: 2;
  border-right: 1px solid #f1f5f9;
  background: #fafbfc;
}

.parameter-value-cell {
  flex: 3;
  border-right: 1px solid #f1f5f9;
}

.parameter-actions-cell {
  flex: 0.5;
  display: flex;
  justify-content: center;
  align-items: center;
  background: #fafbfc;
}

.parameter-input {
  width: 100%;
  border: 1px solid #e2e8f0;
  border-radius: 4px;
  padding: 8px 12px;
  font-size: 14px;
  transition: all 0.2s;
  background: white;
  box-sizing: border-box;
}

.parameter-input:focus {
  border-color: #4299e1;
  outline: none;
  box-shadow: 0 0 0 2px rgba(66, 153, 225, 0.1);
}

.parameter-input::placeholder {
  color: #a0aec0;
  font-size: 13px;
}

.table-remove-btn {
  background: #e53e3e;
  color: white;
  border: none;
  border-radius: 4px;
  width: 28px;
  height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
  transition: all 0.2s;
  flex-shrink: 0;
}

.table-remove-btn:hover {
  background: #c53030;
  transform: scale(1.05);
}

.table-add-btn {
  background: #38a169;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 10px 20px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s;
  display: block;
  width: 100%;
  text-align: center;
  margin-top: 0;
}

.table-add-btn:hover {
  background: #2f855a;
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Старые стили параметров (можно удалить после тестирования) */
.parameter-row {
  display: none; /* Скрываем старый стиль */
}

.parameter-key,
.parameter-value {
  display: none; /* Скрываем старый стиль */
}

.parameter-remove-btn.old {
  display: none; /* Скрываем старый стиль */
}

.add-param-btn.old {
  display: none; /* Скрываем старый стиль */
}

.divider {
  height: 1px;
  background-color: #e2e8f0;
  margin: 20px 0;
}

/* Загрузка изображения */
.image-upload-section {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.image-preview {
  width: 100%;
  height: 200px;
  border: 2px dashed #e2e8f0;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  background-color: #f7fafc;
}

.image-preview-img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

.image-placeholder {
  color: #a0aec0;
  text-align: center;
  padding: 20px;
}

.file-input-wrapper {
  display: flex;
  justify-content: center;
}

.file-input {
  display: none;
}





.file-input-label {
  background: #4299e1;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 8px 12px;
  cursor: pointer;
  transition: all 0.2s;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  width: 200px;
  height: 30px;
  font-size: 14px;
  font-weight: 500;
}

.file-input-label svg {
  flex-shrink: 0;
}

.file-input-label:hover {
  background: #3182ce;
  transform: scale(1.05);
}

/* Стили для иконки внутри кнопки */
.file-input-label .fas {
  font-size: 14px;
  color: white;
}











/* Адаптивность */
@media (max-width: 768px) {
  .modal-add-component {
    margin: 20px;
    max-height: calc(100vh - 40px);
    max-width: calc(100vw - 40px);
  }
  
  /* Адаптивность для таблицы параметров */
  .parameters-table-header {
    display: none;
  }
  
  .parameter-table-row {
    flex-direction: column;
    padding: 16px;
    border-bottom: 2px solid #e2e8f0;
    background: #f8fafc;
    border-radius: 6px;
    margin-bottom: 8px;
  }
  
  .parameter-name-cell,
  .parameter-value-cell,
  .parameter-actions-cell {
    width: 100%;
    border-right: none;
    padding: 8px 0;
    background: transparent;
  }
  
  .parameter-name-cell {
    border-bottom: 1px solid #e2e8f0;
    padding-bottom: 12px;
    margin-bottom: 8px;
  }
  
  .parameter-name-cell::before {
    content: "Параметр:";
    font-weight: 600;
    color: #4a5568;
    display: block;
    margin-bottom: 4px;
    font-size: 13px;
  }
  
  .parameter-value-cell::before {
    content: "Значение:";
    font-weight: 600;
    color: #4a5568;
    display: block;
    margin-bottom: 4px;
    font-size: 13px;
  }
  
  .parameter-actions-cell {
    justify-content: flex-start;
    margin-top: 12px;
    padding-top: 12px;
    border-top: 1px solid #e2e8f0;
  }
  
  .table-remove-btn {
    width: 100%;
    height: 36px;
    font-size: 14px;
  }
  
  .form-row {
    flex-direction: column;
  }
  
  .datetime-container {
    flex-direction: column;
  }
  
  .datetime-now-btn {
    width: 100%;
  }
}

/* Стили для текстовой области описания */
.textarea-description {
  resize: vertical;
  min-height: 80px;
  font-family: inherit;
  line-height: 1.5;
}

.textarea-description:focus {
  outline: none;
  border-color: #4299e1;
  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
}

/* Скроллбар для таблицы параметров */
.parameters-table-body::-webkit-scrollbar {
  width: 6px;
}

.parameters-table-body::-webkit-scrollbar-track {
  background: #f1f5f9;
}

.parameters-table-body::-webkit-scrollbar-thumb {
  background: #cbd5e0;
  border-radius: 3px;
}

.parameters-table-body::-webkit-scrollbar-thumb:hover {
  background: #a0aec0;
}


.unsaved-changes-indicator {
  color: #e53e3e;
  font-weight: bold;
  margin-left: 5px;
  animation: pulse 2s infinite;
}



.button-save-change {
  background: #4299e1;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 8px 12px;
  cursor: pointer;
  transition: all 0.2s;
  display: flex; /* РАЗКОММЕНТИРОВАТЬ! */
  align-items: center;
  justify-content: center;
  gap: 8px; /* Добавить отступ между иконкой и текстом */
  width: 200px;
  height: 30px;
  font-size: 14px;
  font-weight: 500;
}

.button-save-change svg {
  flex-shrink: 0;
}

.button-save-change:hover {
  background: #3182ce;
  transform: scale(1.05);
}

.button-save-change .fas {
  font-size: 14px;
  color: white;
}

@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.5; }
  100% { opacity: 1; }
}






































21) Файл SearchResult.jsx
import React from 'react';
import { FaEdit } from 'react-icons/fa';
import '../styles/SearchResults.css';

const PencilIcon = ({ size = 16, color = 'currentColor', className = '' }) => {
  return (
    <svg 
      width={size} 
      height={size} 
      viewBox="0 0 24 24" 
      fill="none" 
      stroke={color} 
      strokeWidth="2" 
      strokeLinecap="round" 
      strokeLinejoin="round" 
      className={className}
    >
      <path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"/>
    </svg>
  );
};

const SearchResults = ({ searchResults, searchQuery, onComponentSelect, onEdit }) => {
  if (!searchResults || searchResults.length === 0) {
    return (
      <div className="search-results">
        <div className="search-results-header">
          <h2>Результаты поиска</h2>
          <p className="search-query">По запросу: "{searchQuery}"</p>
        </div>
        <div className="no-results">
          <i className="fas fa-search fa-3x mb-3"></i>
          <h4>Ничего не найдено</h4>
          <p>Попробуйте изменить поисковый запрос</p>
        </div>
      </div>
    );
  }

  const handleComponentClick = (component) => {
    if (onComponentSelect) {
      onComponentSelect(component);
    }
  };

  const handleEditClick = (component, e) => {
    e.stopPropagation();
    if (onEdit) {
      onEdit(component);
    }
  };

  return (
    <div className="search-results">
      <div className="search-results-header">
        <h2>Результаты поиска</h2>
        <p className="search-query">По запросу: "{searchQuery}"</p>
        <p className="results-count">Найдено: {searchResults.length} компонентов</p>
      </div>

      <div className="search-results-list">
        {searchResults.map((component) => (
          <div
            key={component.id}
            className="search-result-item"
            onClick={() => handleComponentClick(component)}
          >
            <div className="result-item-content">
              <div className="result-item-main">
                <h3 className="result-item-name">{component.name}</h3>
                <p className="result-item-category">{component.category_name}</p>
                {component.storage_cell && (
                  <p className="result-item-storage">Ячейка: {component.storage_cell}</p>
                )}
                {component.description && (
                  <p className="result-item-description">{component.description}</p>
                )}
              </div>
              <div className="result-item-meta">
                <span className="result-item-quantity">Количество: {component.quantity || 0}</span>
                <button
                  className="btn-edit-result"
                  onClick={(e) => handleEditClick(component, e)}
                  title="Редактировать компонент"
                >
                  {/* <PencilIcon size={14} color="white" /> */}
                  <FaEdit size={14} />
                  Редактировать
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default SearchResults;

































22) Файл стилей SearchResult.css
.search-results {
  padding: 20px;
  height: 100%;
  overflow-y: auto;
  width: 800px;
}

.search-results-header {
  margin-bottom: 24px;
  padding-bottom: 16px;
  border-bottom: 1px solid #e2e8f0;
}

.search-results-header h2 {
  margin: 0 0 8px 0;
  font-size: 24px;
  font-weight: 600;
  color: #2d3748;
}

.search-query {
  margin: 0;
  font-size: 16px;
  color: #718096;
}

.results-count {
  margin: 4px 0 0 0;
  font-size: 14px;
  color: #a0aec0;
}

.no-results {
  text-align: center;
  padding: 60px 20px;
  color: #a0aec0;
}

.no-results .fa-search {
  margin-bottom: 16px;
  opacity: 0.5;
}

.no-results h4 {
  margin: 0 0 8px 0;
  font-weight: 500;
}

.no-results p {
  margin: 0;
  font-size: 14px;
}

.search-results-list {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.search-result-item {
  background: white;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  padding: 16px;
  cursor: pointer;
  transition: all 0.2s;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.search-result-item:hover {
  border-color: #4299e1;
  box-shadow: 0 2px 8px rgba(66, 153, 225, 0.15);
  transform: translateY(-1px);
}

.result-item-content {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 16px;
}

.result-item-main {
  flex: 1;
}

.result-item-name {
  margin: 0 0 8px 0;
  font-size: 18px;
  font-weight: 600;
  color: #2d3748;
}

.result-item-category {
  margin: 0 0 6px 0;
  font-size: 14px;
  color: #718096;
  font-weight: 500;
}

.result-item-storage {
  margin: 0 0 6px 0;
  font-size: 14px;
  color: #4a5568;
}

.result-item-description {
  margin: 8px 0 0 0;
  font-size: 14px;
  color: #718096;
  line-height: 1.4;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.result-item-meta {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 8px;
  flex-shrink: 0;
  width: 100px;
}

.result-item-quantity {
  font-size: 14px;
  font-weight: 500;
  color: #38a169;
  white-space: nowrap;
}

.btn-edit-result {
  background: #4299e1;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 8px 12px;
  cursor: pointer;
  transition: all 0.2s;
  display: flex; 
  align-items: center;
  justify-content: center;
  gap: 8px; 
  width: 150px;
  height: 30px;
  font-size: 14px;
  font-weight: 500;
}

.btn-edit-result svg {
  flex-shrink: 0;
}

.btn-edit-result:hover {
  background: #3182ce;
  transform: scale(1.05);
}

/* Стили для иконки внутри кнопки */
.btn-edit-result .fas {
  font-size: 14px;
  color: white;
}


@media (max-width: 768px) {
  .result-item-content {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .result-item-meta {
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    margin-top: 12px;
  }
}
































23) package.JSON{
  "name": "radiobase",
  "version": "1.0.0",
  "description": "An Electron application with React",
  "main": "./out/main/index.js",
  "author": "example.com",
  "homepage": "https://electron-vite.org",
  "scripts": {
    "format": "prettier --write .",
    "lint": "eslint --cache .",
    "start": "electron-vite preview",
    "dev": "electron-vite dev",
    "build": "electron-vite build",
    "postinstall": "electron-builder install-app-deps",
    "rebuild:db": "electron-rebuild -f -w better-sqlite3",
    "rebuild:all": "npm run postinstall && npm run rebuild:db",
    "build:unpack": "npm run build && electron-builder --dir",
    "build:win": "npm run rebuild:all && npm run build && electron-builder --win",
    "build:win:portable": "npm run rebuild:all && npm run build && electron-builder --win --config.artifactName=RadioBase-Portable.exe --config.win.target=portable",
    "build:win:installer": "npm run rebuild:all && npm run build && electron-builder --win --config.win.target=nsis",
    "build:mac": "npm run rebuild:all && npm run build && electron-builder --mac",
    "build:linux": "npm run rebuild:all && npm run build && electron-builder --linux",
    "dist": "npm run rebuild:all && npm run build && electron-builder --win --publish=never"
  },
  "dependencies": {
    "@electron-toolkit/preload": "^3.0.2",
    "@electron-toolkit/utils": "^4.0.0",
    "better-sqlite3": "^12.4.1",
    "react-icons": "^5.5.0"
  },
  "devDependencies": {
    "@electron-toolkit/eslint-config": "^2.1.0",
    "@electron-toolkit/eslint-config-prettier": "^3.0.0",
    "@vitejs/plugin-react": "^5.0.3",
    "electron": "^38.1.2",
    "electron-builder": "^25.1.8",
    "electron-rebuild": "^3.2.9",
    "electron-vite": "^4.0.1",
    "eslint": "^9.36.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "prettier": "^3.6.2",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "vite": "^7.1.6"
  },
  "build": {
    "appId": "com.example.radiobase",
    "productName": "RadioBase",
    "directories": {
      "output": "release"
    },
    "files": [
      "out/**/*",
      "node_modules/**/*",
      "package.json"
    ],
    "extraResources": [
      {
        "from": "assets",
        "to": "assets",
        "filter": [
          "**/*"
        ]
      }
    ],
    "asar": true,
    "compression": "maximum",
    "win": {
      "target": [
        {
          "target": "nsis",
          "arch": [
            "x64"
          ]
        }
      ],
      "icon": "assets/icon.ico"
    },
    "nsis": {
      "oneClick": false,
      "allowToChangeInstallationDirectory": true,
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true,
      "perMachine": false
    },
    "mac": {
      "target": "dmg",
      "icon": "assets/icon.icns"
    },
    "linux": {
      "target": "AppImage",
      "icon": "assets/icon.png"
    }
  }
}

