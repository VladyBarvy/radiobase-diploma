// tests/atmega328-test.spec.js
import { test, expect } from '@playwright/test';

test.describe('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ATmega328P-PU —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏', () => {
  test.beforeEach(async ({ page }) => {
    console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ evaluate
    await page.evaluate(() => {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö...');
      
      // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
      window.mockData = {
        categories: [
          { id: 1, name: '–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã' },
          { id: 2, name: '–†–µ–∑–∏—Å—Ç–æ—Ä—ã' },
          { id: 3, name: '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã' },
          { id: 4, name: '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã' },
          { id: 5, name: '–î–∏–æ–¥—ã' }
        ],
        components: [
          {
            id: 1,
            category_id: 4,
            name: 'ATmega328P-PU',
            storage_cell: 'A-111_070925',
            datasheet_url: 'https://example.com/datasheet.pdf',
            quantity: 15,
            parameters: JSON.stringify({
              "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": "AVR RISC",
              "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ": "1.8 - 5.5 –í",
              "–¢–∞–∫—Ç–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞": "–¥–æ 20 –ú–ì—Ü",
              "Flash –ø–∞–º—è—Ç—å": "32 –ö–ë",
              "SRAM": "2 –ö–ë",
              "EEPROM": "1 –ö–ë"
            }),
            description: '8-–±–∏—Ç–Ω—ã–π –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä AVR',
            image_data: null,
            category_name: '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã'
          },
          {
            id: 2,
            category_id: 2,
            name: '–†–µ–∑–∏—Å—Ç–æ—Ä 10–∫–û–º',
            storage_cell: 'R-001_01',
            quantity: 100,
            parameters: JSON.stringify({
              "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ": "10 –∫–û–º",
              "–î–æ–ø—É—Å–∫": "5%",
              "–ú–æ—â–Ω–æ—Å—Ç—å": "0.25 –í—Ç"
            }),
            description: '–£–≥–ª–µ—Ä–æ–¥–Ω—ã–π —Ä–µ–∑–∏—Å—Ç–æ—Ä',
            image_data: null,
            category_name: '–†–µ–∑–∏—Å—Ç–æ—Ä—ã'
          }
        ]
      };

      // –ú–æ–∫–∞–µ–º API –º–µ—Ç–æ–¥—ã
      if (!window.api) {
        window.api = {};
      }
      
      window.api.database = {
        getCategories: async () => {
          console.log('üìÇ Mock: getCategories called');
          return window.mockData.categories;
        },
        
        getComponents: async (categoryId = null) => {
          console.log(`üì¶ Mock: getComponents called with categoryId: ${categoryId}`);
          let components = window.mockData.components;
          
          if (categoryId) {
            components = components.filter(comp => comp.category_id === parseInt(categoryId));
          }
          
          console.log(`üì¶ Returning ${components.length} components`);
          return components;
        },
        
        getComponent: async (id) => {
          console.log(`üîç Mock: getComponent called with id: ${id}`);
          const component = window.mockData.components.find(comp => comp.id === parseInt(id));
          console.log('üîç Component found:', component ? component.name : 'null');
          return component || null;
        },
        
        searchComponents: async (query) => {
          console.log(`üîé Mock: searchComponents called with query: ${query}`);
          if (!query) return [];
          
          const results = window.mockData.components.filter(comp => 
            comp.name.toLowerCase().includes(query.toLowerCase())
          );
          console.log(`üîé Found ${results.length} results`);
          return results;
        },
        
        addCategory: async (name) => {
          console.log(`‚ûï Mock: addCategory called with name: ${name}`);
          return { success: true, id: Date.now() };
        },
        
        addComponent: async (data) => {
          console.log(`‚ûï Mock: addComponent called with name: ${data.name}`);
          return { success: true, id: Date.now() };
        },
        
        updateComponent: async (data) => {
          console.log(`‚úèÔ∏è Mock: updateComponent called for id: ${data.id}`);
          return { success: true };
        },
        
        deleteComponent: async (id) => {
          console.log(`üóëÔ∏è Mock: deleteComponent called for id: ${id}`);
          return { success: true };
        },
        
        deleteCategory: async (id) => {
          console.log(`üóëÔ∏è Mock: deleteCategory called for id: ${id}`);
          return { success: true };
        }
      };
      
      console.log('‚úÖ Mock API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    });

    await page.goto('/');
    console.log('üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await page.waitForSelector('.app', { timeout: 30000 });
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await page.screenshot({ path: 'test-initial-state.png' });
  });

  test('–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', async ({ page }) => {
    console.log('üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    await expect(page.locator('.sidebar')).toBeVisible();
    await expect(page.locator('.main-content')).toBeVisible();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const sidebarTitles = page.locator('.sidebar__title');
    const titleCount = await sidebarTitles.count();
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${titleCount}`);
    
    for (let i = 0; i < titleCount; i++) {
      const text = await sidebarTitles.nth(i).textContent();
      console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫ ${i + 1}: "${text}"`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
    const actionButtons = page.locator('.sidebar__action-btn');
    const buttonCount = await actionButtons.count();
    console.log(`üîò –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: ${buttonCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await page.waitForSelector('.sidebar__category-item', { timeout: 10000 });
    const categories = page.locator('.sidebar__category-item');
    const categoryCount = await categories.count();
    console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryCount}`);
    
    // –í—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    for (let i = 0; i < categoryCount; i++) {
      const categoryName = await categories.nth(i).locator('.sidebar__category-name').textContent();
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${i + 1}: "${categoryName}"`);
    }
    
    expect(categoryCount).toBeGreaterThan(0);
    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ATmega328P-PU –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã', async ({ page }) => {
    console.log('üß™ –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ ATmega328P-PU –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å
    const categories = page.locator('.sidebar__category-item');
    const categoryCount = await categories.count();
    console.log(`üìÇ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryCount}`);
    
    // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã"
    const microchipCategory = page.locator('.sidebar__category-button', { hasText: '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã' });
    const isMicrochipVisible = await microchipCategory.isVisible();
    console.log(`üîç –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã" –≤–∏–¥–∏–º–∞: ${isMicrochipVisible}`);
    
    if (isMicrochipVisible) {
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      await microchipCategory.click();
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã" –æ—Ç–∫—Ä—ã—Ç–∞');
      
      // –ñ–¥–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      await page.waitForTimeout(2000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const componentsList = page.locator('.sidebar__components-list');
      const isListVisible = await componentsList.isVisible();
      console.log(`üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–∏–¥–∏–º—ã–π: ${isListVisible}`);
      
      if (isListVisible) {
        // –ò—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        const components = page.locator('.sidebar__component-button');
        const componentCount = await components.count();
        console.log(`üíæ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${componentCount}`);
        
        // –í—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for (let i = 0; i < componentCount; i++) {
          const componentName = await components.nth(i).textContent();
          console.log(`   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${i + 1}: "${componentName}"`);
        }
        
        // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ ATmega328P-PU
        const atmegaComponent = page.locator('.sidebar__component-button', { hasText: 'ATmega328P-PU' });
        const isAtmegaVisible = await atmegaComponent.isVisible();
        console.log(`üîç ATmega328P-PU –≤–∏–¥–∏–º—ã–π: ${isAtmegaVisible}`);
        
        if (isAtmegaVisible) {
          console.log('‚úÖ ATmega328P-PU –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã');
        } else {
          console.log('‚ùå ATmega328P-PU –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
        }
      } else {
        console.log('‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ –≤–∏–¥–∏–º—ã–π (–≤–æ–∑–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ–π)');
      }
    } else {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç', async ({ page }) => {
    console.log('üß™ –¢–µ—Å—Ç 3: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã" –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const microchipCategory = page.locator('.sidebar__category-button', { hasText: '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã' });
    if (await microchipCategory.isVisible()) {
      await microchipCategory.click();
      await page.waitForTimeout(1000);
      
      // –ò—â–µ–º ATmega328P-PU
      const atmegaComponent = page.locator('.sidebar__component-button', { hasText: 'ATmega328P-PU' });
      if (await atmegaComponent.isVisible()) {
        await atmegaComponent.click();
        console.log('‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ ATmega328P-PU');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await page.waitForSelector('.component-card', { timeout: 10000 });
        console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏
        const componentTitle = page.locator('.component-title');
        if (await componentTitle.isVisible()) {
          const titleText = await componentTitle.textContent();
          console.log(`üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: "${titleText}"`);
          await expect(componentTitle).toContainText('ATmega328P-PU');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
        const infoRows = page.locator('.info-row');
        const infoCount = await infoRows.count();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${infoCount}`);
        
        for (let i = 0; i < infoCount; i++) {
          const label = await infoRows.nth(i).locator('.info-label').textContent();
          const value = await infoRows.nth(i).locator('.info-value').textContent();
          console.log(`   ${label}: "${value}"`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const parametersSection = page.locator('.parameters-section-full');
        if (await parametersSection.isVisible()) {
          console.log('‚úÖ –†–∞–∑–¥–µ–ª –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–æ–±—â–µ
          const parameterRows = page.locator('.parameter-row-full');
          const paramCount = await parameterRows.count();
          console.log(`‚öôÔ∏è –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${paramCount}`);
          
          if (paramCount > 0) {
            // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for (let i = 0; i < paramCount; i++) {
              const paramName = await parameterRows.nth(i).locator('.parameter-name-cell').textContent();
              const paramValue = await parameterRows.nth(i).locator('.parameter-value-cell').textContent();
              console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä: "${paramName}" = "${paramValue}"`);
            }
            
            // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            const expectedParams = ['–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', 'Flash –ø–∞–º—è—Ç—å'];
            for (const paramName of expectedParams) {
              const paramCell = page.locator('.parameter-name-cell', { hasText: paramName });
              if (await paramCell.isVisible()) {
                console.log(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä "${paramName}" –Ω–∞–π–¥–µ–Ω`);
              } else {
                console.log(`‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä "${paramName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
              }
            }
          } else {
            console.log('‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ –ø—É—Å—Ç—ã–µ)');
          }
        } else {
          console.log('‚ÑπÔ∏è –†–∞–∑–¥–µ–ª –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
        }
      } else {
        console.log('‚ùå ATmega328P-PU –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–∏–∫–∞');
      }
    } else {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞');
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', async ({ page }) => {
    console.log('üß™ –¢–µ—Å—Ç 4: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    const microchipCategory = page.locator('.sidebar__category-button', { hasText: '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã' });
    if (await microchipCategory.isVisible()) {
      await microchipCategory.click();
      await page.waitForTimeout(1000);
      
      const atmegaComponent = page.locator('.sidebar__component-button', { hasText: 'ATmega328P-PU' });
      if (await atmegaComponent.isVisible()) {
        await atmegaComponent.click();
        await page.waitForSelector('.component-card');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const editButton = page.locator('.btn-edit-component');
        const isEditVisible = await editButton.isVisible();
        console.log(`‚úèÔ∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–∏–º–∞: ${isEditVisible}`);
        
        if (isEditVisible) {
          await editButton.click();
          console.log('‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã–ª–æ—Å—å –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
          const modal = page.locator('.modal-add-component');
          const isModalVisible = await modal.isVisible({ timeout: 5000 });
          console.log(`üìã –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å: ${isModalVisible}`);
          
          if (isModalVisible) {
            await expect(modal.locator('.modal-title')).toContainText('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
            console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const closeButton = page.locator('.modal-close-btn');
            await closeButton.click();
            await expect(modal).not.toBeVisible();
          }
        } else {
          console.log('‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –≤–∏–¥–∏–º–∞');
        }
      }
    }
  });
});

test.describe('–¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
    await page.waitForSelector('.app', { timeout: 30000 });
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', async ({ page }) => {
    console.log('üß™ –¢–µ—Å—Ç 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const addCategoryBtn = page.locator('.sidebar__action-btn').first();
    await addCategoryBtn.click();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
    const categoryModal = page.locator('.modal-add-category');
    const isModalVisible = await categoryModal.isVisible({ timeout: 5000 });
    console.log(`üìã –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–∫—Ä—ã—Ç–æ: ${isModalVisible}`);
    
    if (isModalVisible) {
      await expect(categoryModal.locator('.modal-title')).toContainText('–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      await expect(page.locator('#categoryName')).toBeVisible();
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      await page.locator('.modal-close-btn').click();
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç', async ({ page }) => {
    console.log('üß™ –¢–µ—Å—Ç 6: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const addComponentBtn = page.locator('.sidebar__action-btn').nth(1);
    await addComponentBtn.click();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
    const componentModal = page.locator('.modal-add-component');
    const isModalVisible = await componentModal.isVisible({ timeout: 5000 });
    console.log(`üìã –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–æ: ${isModalVisible}`);
    
    if (isModalVisible) {
      await expect(componentModal.locator('.modal-title')).toContainText('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
      await expect(page.locator('input[placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"]')).toBeVisible();
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      await page.locator('.modal-close-btn').click();
    }
  });
});
